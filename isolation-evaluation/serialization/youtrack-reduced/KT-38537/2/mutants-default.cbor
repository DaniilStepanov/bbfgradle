¿iexportTaggdefaultnoriginalSamplex"
val rawCrawl = "".trimMargin("")
gmutantsŸxX

val n = false
try
{val rawCrawl = "".trimMargin("")}
catch(e: Exception){}
finally{}

xX
val rawCrawl = 
val s = false
try
{"".trimMargin("")}
catch(e: Exception){}
finally{}

xD
val rawCrawl = 
val p = true
if (p) {""} else {""}
.trimMargin("")
xc
val rawCrawl = "".
val w = true
when (w) {
 true -> {trimMargin("")}
 else -> {trimMargin("")}
}

x`
val rawCrawl = "".
val k = false
when (k) {
 true -> {trimMargin}
 else -> {trimMargin}
}
("")
xX
val rawCrawl = "".trimMargin(
val k = false
try
{""}
catch(e: Exception){}
finally{}
)
x"
val rawCrawl = "".("")trimMargin
x"
val rawCrawl = ""trimMargin.("")
x"
val rawCrawl = """.trimMargin(")
x"
= rawCrawl val "".trimMargin("")
x"
val rawCrawl = """"trimMargin(.)
x"
val rawCrawl = ".trimMargin(""")
x"
val rawCrawl = "".trimMargin("")
x"
val rawCrawl = "trimMargin("")."
x"
val rawCrawl = "(.trimMargin""")
x"
val trimMargin = "".rawCrawl("")
x"
val rawCrawl "".trimMargin("") =
x"
val rawCrawl = "".""(trimMargin)
x"
rawCrawl val = "".trimMargin("")
x"
val rawCrawl = ""."("trimMargin)
x"
" rawCrawl = "".trimMargin(val")
x"
. rawCrawl = ""valtrimMargin("")
x"
val rawCrawl = "("").trimMargin"
x"
"".trimMargin("") rawCrawl = val
x"
val " = "rawCrawl.trimMargin("")
x"
val rawCrawl ) "".trimMargin(""=
x"
val rawCrawl = "".trimMargin()""
x"
val rawCrawl = "."trimMargin("")
x"
val rawCrawl = trimMargin("").""
x"
trimMargin("") rawCrawl = "".val
x"
val rawCrawl = ("").trimMargin""
x"
val = rawCrawl "".trimMargin("")
x"
val rawCrawl "" "".trimMargin(=)
x"
val rawCrawl = "")trimMargin("".
x"
val rawCrawl = ""(trimMargin."")
x"
) rawCrawl = "".trimMargin(""val
x"
val rawCrawl trimMargin("") "".=
x"
val rawCrawl = (".trimMargin""")
x"
val rawCrawl . ""=trimMargin("")
x"
val rawCrawl = "trimMargin."("")
x"
"" rawCrawl = val.trimMargin("")
x"
val "" = "".trimMargin(rawCrawl)
x"
"" rawCrawl = "".trimMargin(val)
x"
val rawCrawl = (.trimMargin"""")
x"
val rawCrawl = ""("")trimMargin.
x"
val rawCrawl trimMargin "".=("")
x"
val "".trimMargin("") = rawCrawl
x"
val rawCrawl = trimMargin("")"."
x"
val rawCrawl = "".trimMargin""()
x"
val rawCrawl = ").trimMargin("""
x"
val rawCrawl = ("")".trimMargin"
x"
val ("") = "".trimMarginrawCrawl
x"
val rawCrawl = trimMargin.""("")
x"
val ) = "".trimMargin(""rawCrawl
x"
trimMargin rawCrawl = "".val("")
x"
val trimMargin("") = "".rawCrawl
x"
val " = "".trimMargin("rawCrawl)
x"
" rawCrawl = "".trimMargin("val)
x"
val rawCrawl " "".trimMargin("=)
x"
" rawCrawl = "val.trimMargin("")
x"
val rawCrawl = ""trimMargin("").
x"
val rawCrawl = "".)(""trimMargin
x"
val "" = rawCrawl.trimMargin("")
x"
( rawCrawl = "".trimMarginval"")
x"
val rawCrawl = trimMargin"."("")
x"
val " = rawCrawl".trimMargin("")
x"
val rawCrawl " "".trimMargin(=")
x"
("") rawCrawl = "".trimMarginval
x"
val rawCrawl = "".(trimMargin"")
x"
" rawCrawl = val".trimMargin("")
x"
val rawCrawl ("") "".trimMargin=
x"
val rawCrawl " =".trimMargin("")
x"
val rawCrawl = .""trimMargin("")
x"
val rawCrawl = ).trimMargin(""""
x"
val rawCrawl = "".trimMargin(")"
x"
val " = "".trimMargin(rawCrawl")
x"
val rawCrawl = """trimMargin(.")
x"
val rawCrawl ( "".trimMargin="")
x"
val . = ""rawCrawltrimMargin("")
x"
val ( = "".trimMarginrawCrawl"")
x"
val rawCrawl = ""."(trimMargin")
x
val rawCrawl = "".foo("")
x 
val rawCrawl = "".trimMargin()
x
val rawCrawl = "".String("")
x$
val rawCrawl = "OK".trimMargin("")
x"
val l = Array<C>(3, {x -> C(x)})
x
val rawCrawl = "".x("")
x
val rawCrawl = "".box("")
m
var a: Long
x$
val rawCrawl = "$a".trimMargin("")
x
val xs = "".trimMargin("")
x
val count = "".trimMargin("")
x$
val rawCrawl = "".trimMargin("OK")
x
val ax = "".trimMargin("")
x$
val rawCrawl = "".trimMargin(-0.0)
x
val rawCrawl = "".A("")
x
val rawCrawl = "".kotlin("")
x 
val listOf = "".trimMargin("")
x#
val rawCrawl = "".trimMargin(111)
x!
val rawCrawl = "".trimMargin(2)
x"
val rawCrawl = "".trimMargin(42)
x!
val Builder = "".trimMargin("")
x"
override val v = this@B.v + newv
x#
val rawCrawl = "".trimMargin("O")
x
val rawCrawl = "".FakeInt(42)
x5
val rawCrawl = "".trimMargin(Z(1), L(1L), S("abc"))
x&
val rawCrawl = "".AssertionError("")
r
val mcoll = MC()
m
val z = Z()
x
val rawCrawl = "".size("")
x2
val rawCrawl = "".trimMargin("nonExistentEntry")
x$
val rawCrawl = "".trimMargin(from)
x
val rawCrawl = "".Derived()
x 
val String = "".trimMargin("")
x
val V = "".trimMargin("")
x"
val reversed = "".trimMargin("")
u
val range4 = 5L..5L
x
val fn = "".trimMargin("")
x(
val AssertionError = "".trimMargin("")
x
val C = "".trimMargin("")
x
val nn: Boolean? = null
x
val rawCrawl = l.add(1)
x
val rawCrawl = "".Local()
x"
val rawCrawl = "".trimMargin(NZ)
x
val rawCrawl = 0.toShort()
x%
val rawCrawl = "".trimMargin({"D"})
x1
val rawCrawl = "fail 3: $result".trimMargin("")
x!
val rawCrawl = "".trimMargin(x)
x
val rawCrawl = 8u.toUShort()
xL
val result = (A::Inner)((::A)(), 111).result + (A::Inner)(A(), 222).result
x
val rawCrawl = "".i("")
x
val bx: Boolean = true
w
val rawCrawl = "".t()
x
val rawCrawl = "".O("")
x$
val rawCrawl = "".trimMargin("ok")
x
val rawCrawl = "".count2("")
x
val function1 = f::bar
x)
val rawCrawl = "".useNullableStrArr("")
x8
val rawCrawl = "".foo(A("O", "K")) { (x, y) -> x + y }
x
val ns1 = "".trimMargin("")
k
val a = 1
x
val p15 = "".trimMargin("")
x`
val answer = apply(Point(3, 5), { scalar : Int ->
        Point(x * scalar, y * scalar)
    })
x&
val rawCrawl = "fail".trimMargin("")
x,
val rawCrawl = IssueState.FIXED.ToString()
x"
val rawCrawl = "".Throwable("K")
x
val rawCrawl = "".Outer()
q
var result = ""
x#
val rawCrawl = "".myNotEquals("")
x#
val rawCrawl = "".trimMargin("K")
x 
val rawCrawl = "".Delegate("")
x
val rawCrawl = list1.size
x
val rawCrawl = "".bar(10)
x!
val rawCrawl = "".trimMargin(0)
x'
val rawCrawl = "fail5".trimMargin("")
x(
val rawCrawl = "fail 3".trimMargin("")
x
val rawCrawl = "".sb("")
x
val Int = "".trimMargin("")
t
val rawCrawl = A.x
x,
val rawCrawl = "".trimMargin("OverOver: ")
x
val rawCrawl = "".bar("")
x
val run = "".trimMargin("")
x
val x = run { Test.ok() }
x"
val rawCrawl = "".NZ2(NZ1(Z(1)))
x$
val rawCrawl = "".AssertionError()
x7
val rawCrawl = "".fails {
            x = 1
        }
x)
val rawCrawl = "Finally".trimMargin("")
x!
val rawCrawl = "".MAX_VALUE("")
x
val rawCrawl = e.message
x$
val rawCrawl = B("abc").toString()
w
val rawCrawl = t.data
w
val rawCrawl = "".B()
x8
val rawCrawl = "".trimMargin({ line: String -> line })
x(
val rawCrawl = "".trimMargin("fail 2")
x
val s = ArrayList<String>(1)
x
val Book = "".trimMargin("")
w
val rawCrawl = "".A()
x
val rawCrawl = Outer().test()
x
val rawCrawl = "".R(0)
x
val rawCrawl = "".c("")
x&
val rawCrawl = "".sort(l, ::compare)
x/
val rawCrawl = ArrayList<String>().iterator()
x
val rawCrawl = "".next()
x
val rawCrawl = xs.withIndex()
x#
val rawCrawl = "".trimMargin(999)
x)
val rawCrawl = "".trimMargin("Fail 19")
x
val rawCrawl = "".a("")
x
val element4 = (-1).toFloat()
x
val rawCrawl = xx.second
x!
val rawCrawl = "".Shape("fail")
x
val rawCrawl = "".d("")
x!
val rawCrawl = "".trimMargin(3)
x'
val test1 = foo(1) {a -> "" + a.size}
x!
val rawCrawl = "".get(L(1234L))
x
val box = "".trimMargin("")
x-
val rawCrawl = "".testIteratingOverMap1("")
x$
val rawCrawl = Outer().Inner("OK")
x 
val rawCrawl = "".bDefault("")
x
val rawCrawl = "".inner("")
x"
const val MinUI = UInt.MIN_VALUE
x-
val rawCrawl = Derived().foo(Str("OK")).str
x(
val rawCrawl = "fail 1".trimMargin("")
x
val rawCrawl = "".test("")
x
val value = "".trimMargin("")
x
val rawCrawl = z.foo(0, 0)
x
val rawCrawl = "".list5("")
x&
val rawCrawl = "".trimMargin(Impl())
x
val rawCrawl = "".equals("")
xb
val rawCrawl = "".trimMargin("Wrong elements for (MaxUS - 2u).toUShort()..MaxUS step 2: $list3")
x#
val rawCrawl = "w".trimMargin("")
x
val rawCrawl = s.toString()
x
val rawCrawl = "".test2("")
x
val rawCrawl = "".Kind("")
x
val list2 = ArrayList<UInt>()
x$
val defaultRes = FooClass().make()
x
val rawCrawl = M().doTest()
x!
val rawCrawl = "".trimMargin(d)
x
val size = "".trimMargin("")
x$
val rawCrawl = "$s".trimMargin("")
x$
val rawCrawl = "".trimMargin(null)
x
val rawCrawl = "".KFooQux("")
x
val rawCrawl = "".s("")
x(
val array = Array(0, { IntArray(0) } )
x
val rawCrawl = "".z("")
xi
val x = when (val s = peek()) {
        "A" -> "OK"
        "B" -> "B"
        else -> "other $s"
    }
x1
val rawCrawl = "".trimMargin("Jane", "Doe", 27)
x"
val rawCrawl = "".trimMargin(11)
x%
val rawCrawl = log.append("<init>")
x
val rawCrawl = log.toString()
q
val c: C? = C()
x+
val rawCrawl = "".trimMargin(-0.0F, 0.0F)
x
val rawCrawl = x.hasNext()
xK
val rawCrawl = "Wrong elements for 0..MinI step 3: $list1".trimMargin("")
x
val prop: Int by Delegate()
x2
val rawCrawl = "".trimMargin("fail: ${a.value}")
x
val rawCrawl = "".j("")
x!
val rawCrawl = "".trimMargin(n)
x
val rawCrawl = "".add("")
x$
val rawCrawl = "".trimMargin(true)
x 
val Double = "".trimMargin("")
x!
val rawCrawl = "".trimMargin(9)
x
val x = "".trimMargin("")
x'
val rawCrawl = "".rangeTo(2.toLong())
x
val rawCrawl = "".y("")
x
val rawCrawl = "".getLength()
v
var invokeOrder = ""
xN
val rawCrawl = "".trimMargin(listOf(1).map { it.toString() }.joinToString())
x
val rawCrawl = "".l("")
x)
val rawCrawl = "".trimMargin(Float.NaN)
v
private val s = "OK"
x#
val rawCrawl = "".trimMargin("y")
x
val rawCrawl = "".b("")
x
val rawCrawl = a.myEq(b)
x
val j = "".trimMargin("")
x/
val uints = MyUIntArray(intArrayOf(0, 1, 42))
x
val rawCrawl = X.B.value
v
val ref = Local::foo
x
val uint3 = "".trimMargin("")
x
val rawCrawl = derived.o
x
val rawCrawl = "".p("")
x
val f = "".trimMargin("")
x
val b = "".trimMargin("")
x
val rawCrawl = "".foo()
x"
val rawCrawl = Test(S("O")).test
x
val rawCrawl = "".t("")
w
val rawCrawl = "".C()
x(
val rawCrawl = "".listOf<ULong>(MaxUL)
x&
val rawCrawl = Z::test.invoke(Z(42))
x
val rawCrawl = "".Int("")
x
val rawCrawl = "".World()
x&
val rawCrawl = A().B("aa", 66, "cc")
x$
val rawCrawl = "".trimMargin(this)
x#
val rawCrawl = (Z::xx).get(Z(42))
x/
val rawCrawl = "".trimMargin("""" """, "\" ")
w
val s : String = "OK"
x(
val rawCrawl = "fail 8".trimMargin("")
x
val rawCrawl = i.superclass()
x)
val c = takeVarargs(u1, u3) ?: UInt(-1)
w
val rawCrawl = "".Z()
x"val rawCrawl = "".trimMargin("")

x
val  = "".trimMargin("")
x!
val rawCrawl = ".trimMargin("")
x!
val rawCrawl  "".trimMargin("")
b

q
val rawCrawl = 
t
val rawCrawl = "".
x!
val rawCrawl= "".trimMargin("")
x!val rawCrawl = "".trimMargin("")
x!
val rawCrawl = ""trimMargin("")
x!
val rawCrawl = "".trimMargin(")
x!
val rawCrawl ="".trimMargin("")
x
 rawCrawl = "".trimMargin("")
x!
val rawCrawl = "".trimMargin(""
x
val rawCrawl = "".("")
x!
val rawCrawl = "".trimMargin"")
x!
valrawCrawl = "".trimMargin("")
x
val rawCrawl = "".trimMargin
x!
val rawCrawl = "".trimMargin("")x 
val rawCrawl = .trimMargin("")
ÿÿ