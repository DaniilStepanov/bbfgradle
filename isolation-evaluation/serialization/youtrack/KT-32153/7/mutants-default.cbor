øiexportTaggdefaultnoriginalSampleyV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
gmutantsüyå// Original bug: KT-32153
// Duplicated bug: KT-32153


val u = false
try
{suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}}
catch(e: Exception){}
finally{}

yz// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() 
val m = false
if (m) {{
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}} else {{
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}}

yM// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    
val t = false
if (t) {suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }} else {suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }}

    copyNs(hashMapOf(), hashMapOf())
}
yå// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    
val v = false
try
{copyNs(hashMapOf(), hashMapOf())}
catch(e: Exception){}
finally{}

}
y// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) 
val b = false
if (b) {{
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }} else {{
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }}

    copyNs(hashMapOf(), hashMapOf())
}
yè// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    
val s = true
when (s) {
 true -> {copyNs}
 else -> {copyNs}
}
(hashMapOf(), hashMapOf())
}
y§// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(
val c = false
when (c) {
 true -> {from: MutableMap<Any, Any>}
 else -> {from: MutableMap<Any, Any>}
}
, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y¢// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, 
val c = false
when (c) {
 true -> {to: MutableMap<Any, Any>}
 else -> {to: MutableMap<Any, Any>}
}
) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y∂// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        
val r = false
if (r) {from.forEach {
            to.put(it, from.get(it)!!)
        }} else {from.forEach {
            to.put(it, from.get(it)!!)
        }}

        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y´// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        
val w = true
if (w) {from.forEach {
            copyNs(from, to)
        }} else {from.forEach {
            copyNs(from, to)
        }}

    }
    copyNs(hashMapOf(), hashMapOf())
}
yç// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        
val g = true
when (g) {
 true -> {from}
 else -> {from}
}
.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y∞// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.
val v = true
if (v) {forEach {
            to.put(it, from.get(it)!!)
        }} else {forEach {
            to.put(it, from.get(it)!!)
        }}

        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y{// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        
val j = false
if (j) {from} else {from}
.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yß// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.
val u = false
if (u) {forEach {
            copyNs(from, to)
        }} else {forEach {
            copyNs(from, to)
        }}

    }
    copyNs(hashMapOf(), hashMapOf())
}
yå// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(
val z = false
try
{hashMapOf()}
catch(e: Exception){}
finally{}
, hashMapOf())
}
yÅ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), 
val i = true
if (i) {hashMapOf()} else {hashMapOf()}
)
}
y}// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.
val n = true
if (n) {forEach} else {forEach}
 {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yã// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.
val h = true
try
{forEach}
catch(e: Exception){}
finally{}
 {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yì// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(
val h = false
when (h) {
 true -> {hashMapOf}
 else -> {hashMapOf}
}
(), hashMapOf())
}
yå// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), 
val d = false
try
{hashMapOf}
catch(e: Exception){}
finally{}
())
}
yå// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: 
val x = false
try
{MutableMap}
catch(e: Exception){}
finally{}
<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yÅ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: 
val g = false
if (g) {MutableMap} else {MutableMap}
<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yº// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach 
val w = false
when (w) {
 true -> {{
            to.put(it, from.get(it)!!)
        }}
 else -> {{
            to.put(it, from.get(it)!!)
        }}
}

        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y≤// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach 
val b = false
when (b) {
 true -> {{
            copyNs(from, to)
        }}
 else -> {{
            copyNs(from, to)
        }}
}

    }
    copyNs(hashMapOf(), hashMapOf())
}
y©// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach 
val b = false
if (b) {{
            to.put(it, from.get(it)!!)
        }} else {{
            to.put(it, from.get(it)!!)
        }}

        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yü// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach 
val u = false
if (u) {{
            copyNs(from, to)
        }} else {{
            copyNs(from, to)
        }}

    }
    copyNs(hashMapOf(), hashMapOf())
}
yã// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            
val q = true
try
{to.put(it, from.get(it)!!)}
catch(e: Exception){}
finally{}

        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yå// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            
val k = false
try
{copyNs(from, to)}
catch(e: Exception){}
finally{}

        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y§// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            
val b = false
when (b) {
 true -> {to.put(it, from.get(it)!!)}
 else -> {to.put(it, from.get(it)!!)}
}

        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yô// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            
val l = true
when (l) {
 true -> {copyNs(from, to)}
 else -> {copyNs(from, to)}
}

        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yã// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<
val q = true
try
{Any}
catch(e: Exception){}
finally{}
, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yy// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, 
val o = true
if (o) {Any} else {Any}
>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yã// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<
val u = true
try
{Any}
catch(e: Exception){}
finally{}
, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yã// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, 
val v = true
try
{Any}
catch(e: Exception){}
finally{}
>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yã// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            
val z = true
try
{to}
catch(e: Exception){}
finally{}
.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yç// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.
val k = true
if (k) {put(it, from.get(it)!!)} else {put(it, from.get(it)!!)}

        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yê// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            
val t = false
when (t) {
 true -> {copyNs}
 else -> {copyNs}
}
(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yç// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.
val g = false
when (g) {
 true -> {put}
 else -> {put}
}
(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yé// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(
val v = false
when (v) {
 true -> {from}
 else -> {from}
}
, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yã// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, 
val r = true
try
{to}
catch(e: Exception){}
finally{}
)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yã// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(
val r = true
try
{it}
catch(e: Exception){}
finally{}
, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yò// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, 
val p = false
when (p) {
 true -> {from.get(it)!!}
 else -> {from.get(it)!!}
}
)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yÇ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, 
val v = true
if (v) {from.get(it)} else {from.get(it)}
!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yå// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)
val p = false
try
{!!}
catch(e: Exception){}
finally{}
)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yå// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, 
val j = false
try
{from}
catch(e: Exception){}
finally{}
.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yã// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.
val p = true
try
{get(it)}
catch(e: Exception){}
finally{}
!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yy// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.
val l = true
if (l) {get} else {get}
(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yx// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(
val k = true
if (k) {it} else {it}
)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach ({
            to.put(it, from.get(it)!!)
        })
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.(put(it, from.get(it)!!))
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)(!!))
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf!!())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any!!>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get!!(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: (MutableMap<Any, Any>)?, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: (MutableMap<Any, Any>)?) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<(Any)?, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, (Any)?>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<(Any)?, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, (Any)?>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to!!.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.{ {
            to.put(it, from.get(it)!!)
        }
        from.forEach forEach
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put{
            copyNs(from, to)
        }it, from.get(it)!!)
        }
        from.forEach (
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, ,.get(it)!!)
        }
        from.forEach {
            copyNs(fromfrom to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.from {
            to.put(it, forEach.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)from)
        }
        from.forEach {
            copyNs(!!, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get{
            copyNs(from, to)
        }it)!!)
        }
        from.forEach (
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        hashMapOf()
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), from.forEach {
            to.put(it, from.get(it)!!)
        })
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach copyNs
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            {(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<put(it, from.get(it)!!), Any>) {
        from.forEach {
            to.Any
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
{
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}

suspend fun cloneStorage() // Duplicated bug: KT-32153
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(}, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    it
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<put, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.Any(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, from>, to: MutableMap<Any, Any>) {
        Any.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(ithashMapOf()!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<it, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(Any)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<{, Any>, to: MutableMap<Any, Any>) {
        from.forEach Any
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        put.forEach {
            to.from(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, MutableMap>, to: Any<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, get(it)>) {
        from.forEach {
            to.put(it, from.Any!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, ()>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOfAny, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMapgetAny, Any>) {
        from.forEach {
            to.put(it, from.<(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)()
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs!!hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: copyNs<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    MutableMap(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, copyNs>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    Any(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMapcopyNs(hashMapOf(), hashMapOf())Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    <
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

to fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            suspend.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.puthashMapOf
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), (it, from.get(it)!!)())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: ), to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, toMutableMap<Any, Any>
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<), Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(itAny!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(,)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf()it hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, hashMapOf>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(Any(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<,, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(fromAny to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.,(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf()put hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs,from: MutableMap<Any, Any>( to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(forEach {
            to.put(it, from.get(it)!!)
        }, to: MutableMap<Any, Any>) {
        from.from: MutableMap<Any, Any>
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: !!) {
        from.forEach {
            to.put(it, from.get(it)MutableMap<Any, Any>)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            )
        }
    }
    copyNs(hashMapOf(copyNs(from, to), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(copyNs, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            from: MutableMap<Any, Any>(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }<Any, Any>) MutableMap
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<to.put(it, from.get(it)!!), Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            Any
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: () {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOfMutableMap<Any, Any>))
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            ,.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(fromto to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, (: MutableMap<Any, Any>) {
        from.forEach {
            to.puttoit, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

{
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
} fun cloneStorage() suspend
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>copyNs to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            ,(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<<, Any>, to: MutableMapAnyAny, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMapAny<, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorageto: MutableMap<Any, Any> {
    suspend fun copyNs(from: MutableMap<Any, Any>, ()) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach copyNs(from, to)
        from.forEach {
            {
            to.put(it, from.get(it)!!)
        }
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, forEach {
            to.put(it, from.get(it)!!)
        }>, to: MutableMap<Any, Any>) {
        from.Any
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<hashMapOf, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), Any())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>to.put(it, from.get(it)!!) {
        from.forEach {
            )
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>(from, to) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Anyput Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.,(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, }>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
Any
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it),)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf()!! hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.hashMapOf
    }
    copyNs(hashMapOf(), forEach {
            copyNs(from, to)
        }())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from!! MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it):)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, .) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        fromto: MutableMap<Any, Any>forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any{
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }) >
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach from
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs({, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, copyNs>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            Any(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.copyNs(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    put(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

{
            copyNs(from, to)
        } fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach suspend
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    (it, from.get(it)!!) fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.putsuspend
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, it>) {
        from.forEach {
            to.put(it, from.get(Any)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any{) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach >
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<it, Any>) {
        from.forEach {
            to.put(it, from.get(Any)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage( {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs()hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, (>) {
        from.forEach {
            to.putAnyit, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() get
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.{(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage( {
    suspend fun copyNs()from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            hashMapOf(from, to)
        }
    }
    copyNs(copyNs(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: put<Any, Any>) {
        from.forEach {
            to.MutableMap(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNscopyNs(from, to)from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            (
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(forEach, to: MutableMap<Any, Any>) {
        from.from: MutableMap<Any, Any> {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        }.forEach {
            copyNs(from, to)
        }
    from
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.(from, to) {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNsforEach
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(}, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
it
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach forEach
            to.put(it, from.get(it)!!)
        }
        from.{ {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.copyNs
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    put(it, from.get(it)!!)(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, ()
        }
    }
    copyNs(hashMapOfto), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap)Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it<!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.hashMapOf(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(put(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<to, Any>) {
        from.forEach {
            Any.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
} cloneStorage() fun
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs() {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.}!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
get(it)
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend Any copyNs(from: MutableMap<Any, Any>, to: MutableMap<fun, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

from.get(it)!! fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, suspend)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: <<Any, Any>, to: MutableMapMutableMapAny, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

Any fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, suspend>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(Any: MutableMap<Any, Any>, to: MutableMap<Any, from>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<,, Any>Any to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach ()
    }
    copyNs(hashMapOf(), hashMapOf{
            copyNs(from, to)
        })
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) hashMapOf
    copyNs(hashMapOf(), {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap,Any, Any>) {
        from.forEach {
            to.put(it< from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<hashMapOf(), Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), Any)
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(fromforEach MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.: {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.hashMapOf!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), get(it)())
}
yV// Original bug: KT-32153
MutableMap

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: // Duplicated bug: KT-32153<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMapget, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.<Any, Any>(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, {)
        }
        from.forEach from.get(it)!!
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf((it), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() it
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get({)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage(Any {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<), Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: !!, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)MutableMap<Any, Any>)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>it {
        from.forEach {
            to.put(it, from.get())!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, ,: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf()to hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOfhashMapOf()), ()
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend forEach copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.fun {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        {
            to.put(it, from.get(it)!!)
        }.forEach from
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(}, from.get(it)!!)
        it
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

. fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        fromsuspendforEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: to<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            MutableMap.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage<) {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap(Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: {<Any, Any>, to: MutableMap<Any, Any>) MutableMap
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs)from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf()(
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.)(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(get, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<forEach {
            to.put(it, from.get(it)!!)
        }, Any>, to: MutableMap<Any, Any>) {
        from.Any
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<AnyforEach Any>, to: MutableMap<Any, Any>) {
        from., {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, }: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
to
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<to, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, Any)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any) Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to,
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

} fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        suspend
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<(, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOfAny))
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, ,>Any to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage(} {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
)
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Anyfrom Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(,, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from(hashMapOf(), hashMapOf()) to)
        }
    }
    copyNs,
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<AnyforEach Any>) {
        from., {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, ,>, to: MutableMap<AnyAny Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>get to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.,(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            to(from, copyNs)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf)), hashMapOf(()
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend forEach cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.fun {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

hashMapOf fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), suspend())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, forEach {
            to.put(it, from.get(it)!!)
        }>) {
        from.Any
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend MutableMap copyNs(from: MutableMap<Any, Any>, to: fun<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach ()
    }
    copyNs(hashMapOf{
            copyNs(from, to)
        }, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<(), Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOfAny)
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<AnyforEach Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from., {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<{
            copyNs(from, to)
        }, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach Any
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun to(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            copyNs.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend Any cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, fun>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.(
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOfput(it, from.get(it)!!)))
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(hashMapOf(), hashMapOf())(from, to)
        }
    }
    copyNs
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)))
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf(!!)
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStoragehashMapOf) {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), (())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    {
            copyNs(from, to)
        } fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach suspend
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to
        }
        from.forEach {
            copyNs(from, to.put(it, from.get(it)!!))
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV{
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
// Duplicated bug: KT-32153

suspend fun cloneStorage() // Original bug: KT-32153
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    ) fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, tosuspend
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorageput {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.()(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.(
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOfput(it, from.get(it)!!)), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap{
            copyNs(from, to)
        }) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach <Any, Any>
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun from() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        cloneStorage.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach (
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs{hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.copyNs {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            forEach(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap!!, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)<Any, Any>)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    }
    copyNs(hashMapOf(), hashMapOf())
suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.{
            copyNs(from, to)
        }(it, from.get(it)!!)
        }
        from.forEach put
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!()
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf))
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>( {
        from.forEach {
            to.put)it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            (
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNsto.put(it, from.get(it)!!)hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMapAny, to: MutableMap<Any, <Any, Any>>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun <Any, Any>() {
    suspend fun copyNs(from: MutableMapcloneStorage, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage{
            copyNs(from, to)
        }) {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach (
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun it(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(copyNs, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.getfromit)!!)
        }
        from.forEach {
            copyNs((, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf(})
)
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to) MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it:!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage(from.get(it)!! {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, ))
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: forEach, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.MutableMap<Any, Any> {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        fromfromforEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(., to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put((, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNsithashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    (
    copyNs(hashMapOfsuspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.{
        }
        from.forEach put(it, from.get(it)!!)
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.hashMapOf() {
            copyNs(from, to)
        }
    }
    copyNs(forEach, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(MutableMap<Any, Any>, to: from: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from} MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        :
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<AnyhashMapOf Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), ,())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, hashMapOf()>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), Any)
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<(, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNsAnyhashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, (from, to)>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNsAny
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun !!() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)cloneStorage)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

put fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.suspend(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun Any(from: MutableMap<Any, Any>, to: MutableMap<copyNs, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend hashMapOf() copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(fun, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, {
            copyNs(from, to)
        })
        }
        from.forEach from.get(it)!!
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap), to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(<Any, Any>, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        to
        from.forEach {
            copyNs(from, from.forEach {
            to.put(it, from.get(it)!!)
        })
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.copyNs(from, to)!!)
        }
        from.forEach {
            get(it)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, ()>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOfAny, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, from>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(Any, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from)forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf(.)
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to!!put(it, from.get(it).)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)forEach {
            copyNs(from, to)
        })
        }
        from.!!
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, put: MutableMap<Any, Any>) {
        from.forEach {
            to.to(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.copyNs(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    get(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        fromfromforEach {
            copyNs(., to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            from.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(to, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: it) {
        from.forEach {
            to.put(MutableMap<Any, Any>, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: to.put(it, from.get(it)!!)<Any, Any>) {
        from.forEach {
            MutableMap
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<., Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, fromAnyget(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.copyNs!!)
        }
        from.forEach {
            get(it)(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, to>, to: MutableMap<Any, Any>) {
        from.forEach {
            Any.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap)) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(<Any, Any>, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: hashMapOf<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(MutableMap(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, }>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        Any
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            )
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf()to.put(it, from.get(it)!!)
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: to, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, MutableMap<Any, Any>)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: to.put(it, from.get(it)!!)) {
        from.forEach {
            MutableMap<Any, Any>
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it} from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
,
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        forEach {
            copyNs(from, to)
        }.from
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(<: MutableMapfromAny, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach hashMapOf()
    }
    copyNs({
            copyNs(from, to)
        }, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: from.get(it)<Any, Any>) {
        from.forEach {
            to.put(it, MutableMap!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(): MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, tofrom
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend Any copyNs(from: MutableMap<fun, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        )
    }
    copyNs(hashMapOf(), hashMapOf()}
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>forEach {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.) {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<., Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            toAnyput(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        !!.forEach {
            to.put(it, from.get(it)from)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<}, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    Any
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
Any

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, // Duplicated bug: KT-32153>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: copyNs(from, to)<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            MutableMap
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Anyto.put(it, from.get(it)!!)) {
        from.forEach {
            >
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to)put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(., hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, copyNs>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            Any(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun forEach {
            to.put(it, from.get(it)!!)
        }(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.copyNs
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(fromit MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(:, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Anyfrom Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, ,.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend { cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach fun
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    get fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.suspend(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

MutableMap<Any, Any> fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: suspend) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, )>Any {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: hashMapOf<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), MutableMap())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, hashMapOf)
        }
    }
    copyNs(hashMapOf(), to())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNsAnyfrom: MutableMap<(, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            ()
        }
    }
    copyNs(hashMapOfcopyNs(from, to), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            hashMapOf
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(to.put(it, from.get(it)!!)(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach hashMapOf
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs({
            to.put(it, from.get(it)!!)
        }(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any), to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf(>)
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(to)!!)
        }
        from.forEach {
            copyNs(from, it)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

hashMapOf() fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), suspend)
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            hashMapOf()
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), to.put(it, from.get(it)!!))
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, get.from(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

) fun cloneStorage(suspend {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.getforEachit)!!)
        }
        from.( {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, it>) {
        from.forEach {
            to.put(Any, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        }
        from.forEach {
            copyNs(from, to)
        }
    from.forEach {
            to.put(it, from.get(it)!!)
        }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Anyfrom Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(,, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs)from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to(
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any) Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(,, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.. {
            toforEachput(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMapAnyAny, Any>, to: MutableMap<Any, <>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.puthashMapOf
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs((it, from.get(it)!!)(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.forEach(it)!!)
        }
        from.get {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: forEach, to: MutableMap<Any, Any>) {
        from.MutableMap<Any, Any> {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(itcopyNs!!)
        }
        from.forEach {
            )(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage(suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    } {
    )
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Anyto.put(it, from.get(it)!!) Any>) {
        from.forEach {
            ,
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.to {
            copyNs(from, forEach)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<from, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        Any.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: from<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(MutableMap, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        {
            copyNs(from, to)
        }.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach from
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) from.forEach {
            to.put(it, from.get(it)!!)
        }
        {
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage(from.forEach {
            copyNs(from, to)
        } {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        )
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to)put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf().
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    forEach fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.suspend {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.{
            to.put(it, from.get(it)!!)
        } forEach
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun MutableMap<Any, Any>(from: copyNs, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to) MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!:
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yVto
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            // Original bug: KT-32153.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage.) {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to(put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<AnycopyNs(hashMapOf(), hashMapOf()) Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    ,
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            from
        }
        to.put(it, from.get(it)!!).forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, copyNs(hashMapOf(), hashMapOf())>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    Any
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<get(it), Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.Any!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun (from: MutableMap<Any, Any>, to: MutableMap<Any, Any>)copyNs {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach )
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf({)
}
yV// Original bug: KT-32153
()

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf// Duplicated bug: KT-32153, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<from, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(Any, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        fromcopyNsforEach {
            copyNs(from, to)
        }
    }
    .(hashMapOf(), hashMapOf())
}
yVget(it)
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.// Original bug: KT-32153!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, it>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(Any)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        forEach {
            copyNs(from, to)
        }
        from.}
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(copyNs, to)
        }
    }
    from(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }

suspend fun cloneStorage() {
    // Duplicated bug: KT-32153
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOfhashMapOf), (())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.putgetit, from.((it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, AnyforEach {
            to.put(it, from.get(it)!!)
        }, to: MutableMap<Any, Any>) {
        from.>
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

from fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(suspend, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.putfrom
        }
        (it, from.get(it)!!).forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: forEach<Any, Any>, to: MutableMap<Any, Any>) {
        from.MutableMap {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNsfrom.get(it)!! {
        from.forEach {
            to.put(it, (from: MutableMap<Any, Any>, to: MutableMap<Any, Any>))
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any( Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs,hashMapOf(), hashMapOf())
}
yVfrom.get(it)!!
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, // Original bug: KT-32153)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<., Any>, to: MutableMap<Any, Any>) {
        fromAnyforEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Anyfrom, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(>, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

fun suspend cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNsforEach {
            copyNs(from, to)
        } {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>)
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, {>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach Any
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() .
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from{get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: {
            copyNs(from, to)
        }, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach MutableMap<Any, Any>
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put({
            copyNs(from, to)
        }, from.get(it)!!)
        }
        from.forEach it
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get({
            copyNs(from, to)
        })!!)
        }
        from.forEach it
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMaptoAny, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            <.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it).)
        }
        from!!forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorageto {
    suspend fun copyNs(from: MutableMap<Any, Any>, (): MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        hashMapOf().forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(from, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<AnyhashMapOf() Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(,, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMapAnyAny, <>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMapAnyAny, <>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put{it, from.get(it)!!)
        }
        from.forEach (
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    to.put(it, from.get(it)!!) fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            suspend
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(hashMapOf(), to)
        }
    }
    copyNs(from, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<forEach, Any>, to: MutableMap<Any, Any>) {
        from.Any {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    hashMapOf
    copyNs(}(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Anyput Any>) {
        from.forEach {
            to.,(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf,)( hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage} {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
()
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from}get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    .
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

Any fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<suspend, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) .
        from{forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            forEach {
            copyNs(from, to)
        }
        }
        from.to.put(it, from.get(it)!!)
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: to.put(it, from.get(it)!!), to: MutableMap<Any, Any>) {
        from.forEach {
            MutableMap<Any, Any>
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, to>) {
        from.forEach {
            Any.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<>, AnyAny) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<MutableMap<Any, Any>, Any>, to: Any) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<{, Any>, to: MutableMap<Any, Any>) Any
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.} {
            copyNs(from, to)
        }
    forEach
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<forEach, Any>) {
        from.Any {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() hashMapOf()
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), {)
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStoragefrom {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, ().get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: (it), to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.getMutableMap<Any, Any>!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    )(hashMapOf(copyNs, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, copyNs(from, to)>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            Any
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.get(it, from.put(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any{
            to.put(it, from.get(it)!!)
        }, to: MutableMap<Any, Any>) {
        from.forEach >
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() ,
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any{ Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs((, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOffrom: MutableMap<Any, Any>))
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach (
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf{
            to.put(it, from.get(it)!!)
        }))
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: Any<Any, MutableMap>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from( to)
        }
    }
    copyNs(hashMapOf,), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        (from, to).forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNsfrom
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}

// Duplicated bug: KT-32153
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to}put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
.
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.putcopyNs
        }
        from.forEach {
            (it, from.get(it)!!)(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun to() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            cloneStorage.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        ).forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf()from
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<copyNs(from, to), Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            Any
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Anyto, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, >)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage(copyNs(from, to) {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            )
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), (hashMapOf))
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, (hashMapOf(), hashMapOf()))
        }
    }
    copyNsto
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(hashMapOf())!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(it, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.from {
            copyNs(forEach, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>from {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(), to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach to
            {.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: forEach {
            copyNs(from, to)
        }, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.MutableMap<Any, Any>
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage(suspend {
    ) fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach hashMapOf
            copyNs(from, to)
        }
    }
    copyNs({(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any( Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf,), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, ))
        }
    }
    copyNs(hashMapOf(to, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

forEach fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.suspend {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun Any() {
    suspend fun copyNs(from: MutableMap<Any, cloneStorage>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.) {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf()forEach
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap)) {
        from.forEach {
            to.put(it, from.get(it)!!<Any, Any>
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() Any
    suspend fun copyNs(from: MutableMap<Any, {>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage, {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf()() hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, hashMapOf())
        }
    }
    copyNs(to, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, )>, to: MutableMap<Any, Any>Any {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    . fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            tosuspendput(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.from(it)!!)
        }
        from.forEach {
            copyNs(get, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.putcopyNs(hashMapOf(), hashMapOf())
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    (it, from.get(it)!!)
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend from copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(fun, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, hashMapOf()>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(Any, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    copyNs
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from.get(it)!!, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from: MutableMap<Any, Any>)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap(, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf<Any, Any>))
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any!! Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it),)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<{
            to.put(it, from.get(it)!!)
        }, Any>, to: MutableMap<Any, Any>) {
        from.forEach Any
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap{
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }Any, Any>) <
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, {
            to.put(it, from.get(it)!!)
        }) {
        from.forEach to: MutableMap<Any, Any>
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: copyNs<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            MutableMap(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)to)
        }
        from.forEach {
            copyNs(from, !!)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.to.put(it, from.get(it)!!) {
            forEach
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, to.put(it, from.get(it)!!)>) {
        from.forEach {
            Any
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.to(it)!!)
        }
        from.forEach {
            copyNs(from, get)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<AnyAny Any>, to: MutableMap<Any, ,>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) .
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from{forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    Any fun copyNs(from: MutableMap<suspend, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

. fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            tosuspendput(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend MutableMap<Any, Any> copyNs(from: fun, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Anyit Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(,)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun from.get(it)() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, cloneStorage!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>it to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(,, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    . fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, fromsuspendget(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

Any fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, suspend>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach )
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf({
            to.put(it, from.get(it)!!)
        }, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<(it), Any>) {
        from.forEach {
            to.put(it, from.getAny!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.putcopyNs
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    (it, from.get(it)!!)(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMaphashMapOfAny, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(<(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<from, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        Any.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorageto.put(it, from.get(it)!!)) {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            (
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun <Any, Any>(from: MutableMap<Any, Any>, to: MutableMapcopyNs) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, AnycopyNs(hashMapOf(), hashMapOf())) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    >
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach hashMapOf()
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), {)
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMapcopyNsAny, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    <(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMapcopyNs(from, to), to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            <Any, Any>
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from}forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    .
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>Any to: MutableMap<,, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend } copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        fun
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.from.forEach {
            copyNs(from, to)
        }
        }
        put(it, from.get(it)!!)
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMaphashMapOf) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(<Any, Any>(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, fromfromget(it)!!)
        }
        from.forEach {
            copyNs(., to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from,get(it)!!)
        }
        from.forEach {
            copyNs(from. to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put,it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from( to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, forEach>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.Any {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs({, to: MutableMap<Any, Any>) {
        from.forEach from: MutableMap<Any, Any>
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() )
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf({)
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

fun fun cloneStorage() {
    suspend suspend copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage}) {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
(
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap(), to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf<Any, Any>, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap{
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }) <Any, Any>
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: from.forEach {
            to.put(it, from.get(it)!!)
        }<Any, Any>) {
        MutableMap
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        to.forEach {
            copyNs(from, from)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: ), to: MutableMap<Any, Any>MutableMap<Any, Any> {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, (>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOfAny))
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStoragehashMapOf()) {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs((, hashMapOf())
}
yV// Original bug: KT-32153
!!

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)// Duplicated bug: KT-32153)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(from, from.get(it)!!)
        }
        it.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: get(it), to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.MutableMap<Any, Any>!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: from<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(MutableMap, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(hashMapOf)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(it(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: {
            copyNs(from, to)
        }) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach MutableMap<Any, Any>
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<get, Any>) {
        from.forEach {
            to.put(it, from.Any(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<copyNs, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            Any(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, put>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.Any(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend {
            copyNs(from, to)
        } cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach fun
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            hashMapOf()
        }
    }
    copyNs(hashMapOf(), copyNs(from, to))
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend , cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Anyfun Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(,, to)
        }
    }
    copyNs(hashMapOf()from hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.{
            copyNs(from, to)
        } forEach
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        ,.forEach {
            to.put(itfrom from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<!!, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)Any)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.hashMapOf(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), put())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, it>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(Any, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, forEach {
            copyNs(from, to)
        }>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.Any
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, (hashMapOf(), hashMapOf())>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNsAny
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, toAny MutableMap<:, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap{
            to.put(it, from.get(it)!!)
        }, to: MutableMap<Any, Any>) {
        from.forEach <Any, Any>
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        hashMapOf.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), from())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    from fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        suspend.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(hashMapOf())!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), it)
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach (hashMapOf(), hashMapOf())
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs{
            to.put(it, from.get(it)!!)
        }
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) copyNs
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    {(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMapcopyNs(hashMapOf(), hashMapOf())Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    <
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf(get(it))
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, ).get(itfrom!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        hashMapOf
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(from.forEach {
            to.put(it, from.get(it)!!)
        }(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend forEach {
            to.put(it, from.get(it)!!)
        } cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.fun
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from, to) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun from.get(it)!!() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, cloneStorage)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.)(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, toput
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend ( copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNsfunfrom, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, forEach {
            copyNs(from, to)
        })
        }
        from.from.get(it)!!
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStoragehashMapOf {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), ()())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<(from, to), Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNsAny
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
Any

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, // Duplicated bug: KT-32153>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorageMutableMap<Any, Any> {
    suspend fun copyNs(from: (), to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach it
            to.put(it, from.get({)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    } fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    suspend
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    ()
    copyNs(hashMapOf(), hashMapOfsuspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    })
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(it: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(from)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: (, to: MutableMap<Any, Any>) {
        from.forEach {
            to.putMutableMap<Any, Any>it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(hashMapOf(), hashMapOf())it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<copyNs, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    Any(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStoragefrom) {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs((, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage(( {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put)it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<hashMapOf(), Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(Any, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            toput.(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: to: MutableMap<Any, Any><Any, Any>, MutableMap) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>{
            copyNs(from, to)
        } {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach )
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    ) fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(suspend, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    (it) fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.getsuspend!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach from
            copyNs({, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: forEach<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.MutableMap {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>( {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf)), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.{
            copyNs(from, to)
        }(it)!!)
        }
        from.forEach get
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

() fun cloneStoragesuspend {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, (.get(it)!!)
        }
        from.forEach {
            copyNsfromfrom, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage{
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
} ()
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNshashMapOf()
        }
    }
    copyNs((from, to), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from(hashMapOf(), hashMapOf())forEach {
            copyNs(from, to)
        }
    }
    copyNs.
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun Any() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<cloneStorage, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        ..forEach {
            to.put(it, from.get(it)!!)
        }
        fromfromforEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<), Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(Any, hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, fromget(it).!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        String.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yN// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), A())
}
y[// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, Dummy())
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yH// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: String, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y/// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.TestDelegate({"C"})
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        a.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y)// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach { 3 }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y2// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {a, b -> a +b}
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, String>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yf// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage(val default: Int) {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: B<String, Int>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y:// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {x -> 2 * x}
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<T, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y®// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    fun box(): String {
    val a = Result<Int>(1) // valueOf
    val b = Result<String>("sample")
    val c = Result<Result<Int>>(a)
    val d = Result<Result<Int>>(Result<Int>(1)) // valueOf

    if (a.a !is Int) throw AssertionError()

    if (b.a !is String) throw AssertionError()

    if (c.a !is Result<*>) throw AssertionError()
    val ca = c.a as Result<*>
    if (ca.a !is Int) throw AssertionError()

    if (d.a !is Result<*>) throw AssertionError()
    val da = d.a as Result<*>
    if (da.a !is Int) throw AssertionError()

    return "OK"
}
    copyNs(hashMapOf(), hashMapOf())
}
y9// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
        a = 3
    }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            size(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yM// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: A<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<value, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yN// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(c(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    override fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, 9.toByte())
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Double, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get()!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(true), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            bLong(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    open fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            x.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y<// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {a, b -> a +b}
    }
    copyNs(hashMapOf(), hashMapOf())
}
yj// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            {
    this[index1 + index2] = elem
}
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Base>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, "!")
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yK// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, a++)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yE// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.test()
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, i)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, C>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, String)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.f {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<l, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yN// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(R(), hashMapOf())
}
y_// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs("result: $result")
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), bar())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), Int())
}
yK// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, i++)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun Float(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: size<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)==)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Int, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(Str, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yL// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            i = 20
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, String>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<UInt>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, T>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    enum fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y ô// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    fun box() = Outer().foo()
    copyNs(hashMapOf(), hashMapOf())
}
y^// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
        var j = 1
        a.add({ j })
        ++j
    }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    val c = C("OK")
    val b: B = c
    val a: A = c
    if (b.component1() != "OK") return "Fail 1"
    if (a.component1() != "OK") return "Fail 2"
    return c.component1()
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.i {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    open inner fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, 10.toLong()!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(a2, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
ya// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
        xl++
        xd += 1.0
        xi++
    }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yL// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, 10!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y.// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.invoke()
    }
    copyNs(hashMapOf(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, String: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, z>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y ä// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    A()
    return if (A.c == A.b) "OK" else "Fail"
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            checkLess(0.5, 1)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<i, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yC// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            A().a()
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yE// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: Any) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(C, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yJ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, 42)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y3// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach { y }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, B.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<T, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.result {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(i, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y+// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.foo()
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), "test")
}
yG// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(vararg e: T, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, mspf>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<String, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y;// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.foo(3, 2, 3) {a -> "" + a.size}
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        this.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(String)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, 0x00FF00)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Int>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

inline fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            T(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: hasNext<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, "OK")
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y ¯// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
    val b = B()
    b.init()
    return b.x
}
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<super, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, UInt>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// KJS_WITH_FULL_RUNTIME
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.String {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y\// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
        val x = 1   //second exception
    }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: Data<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
    holder += "getShape1()"
    mainShape = Shape("fail")
    return mainShape
}
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, k)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        a.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<String, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<L, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yC// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: T, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Double>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<C, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y]// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, KProperty: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.add(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yM// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: a<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y\// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(reversed, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    T(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Int, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), a4())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Int>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
ya// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, arrayOf("OK"))
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.foo()!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yD// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put()
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yH// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(k, v)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y]// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(holderValue: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, result: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), NZ2())
}
yK// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, t!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: add<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<*, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put("foo", from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

override fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y-// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach { field }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Int>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// TARGET_BACKEND: JVM
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yf// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            forEach { println(it.asList()) }
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

open fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yC// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        Book("239").compareTo(Book("932"))
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Double>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.foo {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<div, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(bx, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    this(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(Request(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            ch(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, x)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(r, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.reversed {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    companion fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yL// WITH_RUNTIME
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), arrayOf("K"))
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            s2(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yK// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    fun box(): String {
    val any: Any? = when (1) {
        x -> null
        else -> Any()
    }

    // Must not be NPE here
    val hashCode = any?.hashCode()

    return hashCode?.toString() ?: "OK"
}
    copyNs(hashMapOf(), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<K>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), setText())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.i(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: Any<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y]// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(DelegateLong(999L), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<T>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, t)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Int>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

operator fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yB// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.C()
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y°// Original bug: KT-32153
// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            {
    val plusZero: Any = 0.0
    val minusZero: Any = -0.0
    val nullDouble: Double? = null
    if (plusZero is Double) {
        // Smart casts behavior in 1.2
        when (plusZero) {
            nullDouble -> {
                return "fail 1"
            }
            -0.0 -> {
                return "fail 2"
            }
            else -> {}
        }

        if (minusZero is Double) {
            // Smart casts behavior in 1.2
            when (plusZero) {
                nullDouble -> {
                    return "fail 3"
                }
                minusZero -> {
                    return "fail 4"
                }
                else -> {}
            }
        }
    }

    return "OK"
}
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yM// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: i<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yd// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
                val x = ok
                { x }
            }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yN// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs()
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.Int(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yJ// Original bug: KT-32153
// WITH_RUNTIME

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, arg2)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yB// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            result
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y&// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {}
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put("O", from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// !LANGUAGE: +InlineClasses
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Double, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        list4.add(i)
        if (list4.size > 23) break
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.Id {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yN// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
        foo("O") + foo()
    }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            box.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, list>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y\// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, (Z::xx).get(Z(42))!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            Unit.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    inline fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// IGNORE_BACKEND: JS_IR

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yK// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put("abcde")
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(String, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y[// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(1, 2, 3)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: Long<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y€// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            {
    var result = ""
    result += Child().Inner().o()

    fun Child.f() {
        result += Inner().k()
    }
    Child().f()

    return result
}
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(A, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf("OK"))
}
y>// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs()
}
y.// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.RuntimeException()
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yM// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: k<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(2, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: kotlin<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun valueOf() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yN// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(l(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.box(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, log.toString()!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<In<A>, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y]// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(RuntimeException(), hashMapOf())
}
y[// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, article: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(char(), hashMapOf())
}
y6// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.get(arrayOf("OK", "Fail"))
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y^// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, assertEquals.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y"// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs() {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.Any(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yÖ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            {
        list5.add(i)
        if (list5.size > 23) break
    }
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, ULong>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yF// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(val x: Int, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, *>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yH// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: String) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yC// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: B, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        listOf.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        Outer.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<*>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y2// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        body().toString()
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        String.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            a(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), M<Int>(p))
}
y4// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.Array<String>(1, { "" })
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            s(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.String(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, apply>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y\// Original bug: KT-32153
// Duplicated bug: KT-32153

internal open fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, ClassB)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(1.0F)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, *>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(val value: String = "OK", to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y|// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
        object {
            fun run() = prop + test()
        }.run()
    }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, it.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(Long(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, A>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, A(0).toString()!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun String(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yK// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, c++)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, size>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(null, hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: downTo<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, x>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y#// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        D().test(10)
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, Int.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    A(hashMapOf(), hashMapOf())
}
yN// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(C(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(box, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yN// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), v())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!=)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.Season {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<String>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.a(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y$// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        Test().test()
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            test(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yI// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: () -> T) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: String<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(true, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y ©// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    val prop: Int by Delegate()
    return run { if (prop == 1) "OK" else "fail" }
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(String, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        test.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    const fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            range0(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<C, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.Boolean(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y[// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<MyNumber, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
xt// Original bug: KT-32153
// Duplicated bug: KT-32153

operator fun X.inc(): X {
    this.value++
    return this
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(to(), hashMapOf())
}
ys// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            {
    if (isZeroUInt(1U)) throw AssertionError()
    if (isZeroUInt2(1U)) throw AssertionError()
    if (!isZeroUInt(0U)) throw AssertionError()
    if (!isZeroUInt2(0U)) throw AssertionError()

    if (isZeroULong(1UL)) throw AssertionError()
    if (isZeroULong2(1UL)) throw AssertionError()
    if (!isZeroULong(0UL)) throw AssertionError()
    if (!isZeroULong2(0UL)) throw AssertionError()

    if (isNullUInt(1U)) throw AssertionError()
    if (isNullUInt2(1U)) throw AssertionError()
    if (!isNullUInt(null)) throw AssertionError()
    if (!isNullUInt2(null)) throw AssertionError()

    if (isNullULong(1UL)) throw AssertionError()
    if (isNullULong2(1UL)) throw AssertionError()
    if (!isNullULong(null)) throw AssertionError()
    if (!isNullULong2(null)) throw AssertionError()

    return "OK"
}
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), takeClass())
}
yö// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    fun box(): String {
    var count = 0
    for (i in (M .. M).reversed()) {
        ++count
        if (count > 1) {
            throw AssertionError("Loop should be executed once")
        }
    }
    if (count != 1) throw AssertionError("Should be executed once")
    return "OK"
}
    copyNs(hashMapOf(), hashMapOf())
}
y+// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach { x++ }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.Double(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), box())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(rec, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.test2(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yB// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, p: T) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: msg<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y0// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach { x = "OK" }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yN// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(B(), hashMapOf())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), foo())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, D().c!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
xa// Original bug: KT-32153
// Duplicated bug: KT-32153

operator fun Long.component2() = this + 2
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, T>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y\// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, compareTo>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.this {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y5// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach { A() }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        foreach.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(1, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// KJS_WITH_FULL_RUNTIME

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y^// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(callsInterfaceFun(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            String.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), changer())
}
y?// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach { { Test.ok() } }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yL// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), 2)
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), plus(1))
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(your)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, until>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: foobar<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y*// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        (4 .. 1).reversed()
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y é// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    fun foo(): Int
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    ArrayList(hashMapOf(), hashMapOf())
}
yb// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(arrayOfNulls<String>(1), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        b.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            E(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yN// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, Z.Z1!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Season>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            local(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y ¨// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
        val ok = "OK"
        class Local : Outer({ ok })

        return Local()
    }
yC// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    val list1 = ArrayList<Int>()
    for (i in (MinI + 5) downTo MinI step 3) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<Int>(MinI + 5, MinI + 2)) {
        return "Wrong elements for (MinI + 5) downTo MinI step 3: $list1"
    }

    val list2 = ArrayList<Int>()
    for (i in (MinB + 5).toByte() downTo MinB step 3) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<Int>((MinB + 5).toInt(), (MinB + 2).toInt())) {
        return "Wrong elements for (MinB + 5).toByte() downTo MinB step 3: $list2"
    }

    val list3 = ArrayList<Int>()
    for (i in (MinS + 5).toShort() downTo MinS step 3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<Int>((MinS + 5).toInt(), (MinS + 2).toInt())) {
        return "Wrong elements for (MinS + 5).toShort() downTo MinS step 3: $list3"
    }

    val list4 = ArrayList<Long>()
    for (i in (MinL + 5).toLong() downTo MinL step 3) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<Long>((MinL + 5).toLong(), (MinL + 2).toLong())) {
        return "Wrong elements for (MinL + 5).toLong() downTo MinL step 3: $list4"
    }

    val list5 = ArrayList<Char>()
    for (i in (MinC + 5) downTo MinC step 3) {
        list5.add(i)
        if (list5.size > 23) break
    }
    if (list5 != listOf<Char>((MinC + 5), (MinC + 2))) {
        return "Wrong elements for (MinC + 5) downTo MinC step 3: $list5"
    }

    return "OK"
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            Int(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y?// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, i) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, ZImpl2>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yµ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            {
    val txt = Thing("hello there")
    val s = txt.subSequence(0, 1)
    return if ("$s" == "h") "OK" else "Fail: $s"
}
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        T.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.AssertionError("Should be executed once")
    }
    copyNs(hashMapOf(), hashMapOf())
}
yE// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(1)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), a.method!!())
}
y§// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            {
      var s = ""
      for ((a, b) in C(0)..C(2)) {
          s += "$a:$b;"
      }
      return s
  }
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, ee>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        i.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yG// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put("O")
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y^// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun AssertionError(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<BK, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y)// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.B()
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            p.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yF// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: Any?, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), Double())
}
yB// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.Z()
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: list1<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(null)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y ™// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    fun test(p: T): T {
        return p
    }
    copyNs(hashMapOf(), hashMapOf())
}
y\// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, B<Int>().foo(1, 2)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, C())
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.o(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yK// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun j() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.bar("OK")!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.s(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yX// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, ULong>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y[// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(targetArgument(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            Companion(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: foo<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y7// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach { (x, y) -> x + y }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Boolean>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, s>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        toString.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: Foo<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, length)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    L(hashMapOf(), hashMapOf())
}
y%// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.(::foo)()
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(count, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yn// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
        takeNullableUInt(it)
        takeNullableUInt(x)
    }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Derived>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<TValue, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y[// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.plusZero(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y:// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach { x ->
    screen[x]
}
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y)// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
    return when(a) {
        is ArrayList<*> -> "array list"
        else -> "no idea"
    }
}
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            { x = value }
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    x(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(x="xyz", to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        x.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Color>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        s.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
ya// with possible local optimizations
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Char, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, Id("OK"))
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yB// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    foo(a = 2.0)
}
y ±// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    val ss = foo(arr)
    return if (ss == "0:10;1:20;2:30;3:40;") "OK" else "fail: '$ss'"
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put("a", from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.box {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(doubleArrayOf(-1.0))
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(Double(), hashMapOf())
}
yD// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            a.add(0)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yM// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: c<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y]// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, component2>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yC// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            1.foo()
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, s)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            run(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), String())
}
yN// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: Z2<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yD// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.operation(if (3 > 2) a else b)
    }
    copyNs(hashMapOf(), hashMapOf())
}
y-// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.Class()
    }
    copyNs(hashMapOf(), hashMapOf())
}
y]// Original bug: KT-32153
//fun main(args : Array<String>) {

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yN// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: fn<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(1L, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y À// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {}
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(list4: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yH// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(null)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.elem(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        A.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    index1(hashMapOf(), hashMapOf())
}
yN// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), d())
}
y ﬁ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
    result = "OK"
}
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), D("O"))
}
y@// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
    val xs = listOf("a", "b", ".", "..").normalize()
    if (xs != listOf("a")) return "Fail: $xs"

    return "OK"
}
    copyNs(hashMapOf(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(Z(100))!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, b>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y3// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        MyObject().greet()
    }
    copyNs(hashMapOf(), hashMapOf())
}
y\// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            reversed.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yY// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.String(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yM// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), 2L)
}
yW// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    operator fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    name(hashMapOf(), hashMapOf())
}
yZ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Nothing>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, val expected: String) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
}
        }
    }
    copyNs(hashMapOf(), hashMapOf())
            copyNs(from, to)
yV// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }

    copyNs(hashMapOf(), hashMapOf())
}
    }yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }}
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>){
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf() hashMapOf())
}
y.// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach 
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNsfrom: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from,to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yI// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y?// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() 
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y$// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach 
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, >) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yM// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), ())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun (from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any,Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend  cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y<// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yM// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMapAny, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yB// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: ) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, >, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any> to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach 
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, )
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yK// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(, hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to:MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y=
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            (from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        .forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yK// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), )
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from. {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from. {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yH// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, )
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y<// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any> {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yL// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: <Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yM// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yF// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            .put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yM// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs((), hashMapOf())
}
y Ä// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.getit)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf)
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach{
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(, hashMapOf())
}
y!// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        
    }
    copyNs(hashMapOf(), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            toput(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yL// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNsfrom, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        
    }
    copyNs(hashMapOf(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yB// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yM// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)}
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>,to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from:MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yL// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspendfun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
xS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() 
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        fromforEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yL// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: <Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y;// Original bug: KT-32153


suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it))
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

 fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf()
}
y>// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, ) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        .forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMapAny, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y …// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) 
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(),hashMapOf())
}
x8// Original bug: KT-32153
// Duplicated bug: KT-32153


yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())

yB// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: , to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yS// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend  copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yJ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, !!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, .get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage(){
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, fromget(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yM// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)}
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf), hashMapOf())
}
yO// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
     fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) 
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage) {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        fromforEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y<// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend funcopyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yQ// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNshashMapOf(), hashMapOf())
}
yP// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    (hashMapOf(), hashMapOf())
}
y&// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yR// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y6// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.putit, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any,Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf))
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, : MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yI// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach 
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspendfun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yL// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yT// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf, hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it,from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage( {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yU// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend funcloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
y // Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs {
        from.forEach {
            to.put(it, from.get(it)!!)
        }
        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
yM// Original bug: KT-32153
// Duplicated bug: KT-32153

suspend fun cloneStorage() {
    suspend fun copyNs(from: MutableMap<Any, Any>, to: MutableMap<Any, Any>) {
        from.forEach {
            to.put(it, from.get(it)!!)

        from.forEach {
            copyNs(from, to)
        }
    }
    copyNs(hashMapOf(), hashMapOf())
}
ˇˇ