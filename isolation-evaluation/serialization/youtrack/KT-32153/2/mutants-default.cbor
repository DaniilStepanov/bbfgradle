¿iexportTaggdefaultnoriginalSampley// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
gmutantsŸyý// Original bug: KT-41881
// Duplicated bug: KT-32153


val r = true
when (r) {
 true -> {class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}}
 else -> {class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}}
}

y6// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer
val w = true
try
{()}
catch(e: Exception){}
finally{}
 {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
yÎ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    
val n = true
if (n) {suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }} else {suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }}

}
y7// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) 
val w = false
try
{{
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }}
catch(e: Exception){}
finally{}

}
yC// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(
val v = true
when (v) {
 true -> {a: List<String>}
 else -> {a: List<String>}
}
) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y7// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        
val h = false
try
{suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }}
catch(e: Exception){}
finally{}


        recurse(a)
    }
}
y6// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        
val u = true
try
{recurse(a)}
catch(e: Exception){}
finally{}

    }
}
y6// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) 
val c = true
try
{{
            current.forEach { recurse(listOf(it)) }
        }}
catch(e: Exception){}
finally{}


        recurse(a)
    }
}
y<// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        
val e = false
when (e) {
 true -> {recurse}
 else -> {recurse}
}
(a)
    }
}
yJ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(
val t = false
when (t) {
 true -> {current: List<String>}
 else -> {current: List<String>}
}
) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y\// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            
val x = false
when (x) {
 true -> {current.forEach { recurse(listOf(it)) }}
 else -> {current.forEach { recurse(listOf(it)) }}
}

        }

        recurse(a)
    }
}
y6// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: 
val y = true
try
{List}
catch(e: Exception){}
finally{}
<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y7// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            
val w = false
try
{current}
catch(e: Exception){}
finally{}
.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y7// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.
val r = false
try
{forEach { recurse(listOf(it)) }}
catch(e: Exception){}
finally{}

        }

        recurse(a)
    }
}
y#// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(
val f = false
if (f) {a} else {a}
)
    }
}
y6// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.
val h = true
try
{forEach}
catch(e: Exception){}
finally{}
 { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y9// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: 
val x = false
when (x) {
 true -> {List}
 else -> {List}
}
<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y6// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach 
val a = true
try
{{ recurse(listOf(it)) }}
catch(e: Exception){}
finally{}

        }

        recurse(a)
    }
}
y9// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach 
val h = false
if (h) {{ recurse(listOf(it)) }} else {{ recurse(listOf(it)) }}

        }

        recurse(a)
    }
}
y;// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<
val b = false
when (b) {
 true -> {String}
 else -> {String}
}
>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y7// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { 
val f = false
try
{recurse(listOf(it))}
catch(e: Exception){}
finally{}
 }
        }

        recurse(a)
    }
}
y4// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { 
val d = true
if (d) {recurse(listOf(it))} else {recurse(listOf(it))}
 }
        }

        recurse(a)
    }
}
y(// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<
val u = false
if (u) {String} else {String}
>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y)// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { 
val g = false
if (g) {recurse} else {recurse}
(listOf(it)) }
        }

        recurse(a)
    }
}
y7// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(
val a = false
try
{listOf(it)}
catch(e: Exception){}
finally{}
) }
        }

        recurse(a)
    }
}
y6// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(
val u = true
try
{listOf}
catch(e: Exception){}
finally{}
(it)) }
        }

        recurse(a)
    }
}
y$// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(
val h = false
if (h) {it} else {it}
)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }!!
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a!!)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it!!)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: (List<String>)?) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: (List<String>)?) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<(String)?>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<(String)?>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: { recurse(listOf(it)) }) {
        suspend fun recurse(current: List<String>) {
            current.forEach List<String>
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List)) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)<String> }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List{ recurse(listOf(it)) }) {
            current.forEach <String>
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse((it)listOf) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: () {
        suspend fun recurseList<String>current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current(forEach { recurse.listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: fun) {
        suspend List<String> recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: Lista) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(<String>)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend current recurse(fun: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer{

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}) (
y// Original bug: KT-41881
// Duplicated bug: KT-32153

List<String> Reproducer() {

    suspend fun f(a: class) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class recurse(listOf(it))() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { Reproducer }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend a f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(fun)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class )() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(aReproducer
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<recurse(listOf(it))>) {
            current.forEach { String }
        }

        recurse(a)
    }
}
yfun
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend // Original bug: KT-41881 recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach )
        }

        recurse(a{ recurse(listOf(it)) }
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun List<String>(a: List<String>) {
        suspend fun recurse(current: f) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class (a)() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurseReproducer
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        recurse(listOf(it)) fun recurse(current: List<String>) {
            current.forEach { suspend }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducersuspend {

    suspend fun f(a: List<String>) {
        () fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<{>) String
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

String Reproducer() {

    suspend fun f(a: List<class>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend String f(a: List<String>) {
        suspend fun recurse(current: List<fun>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<Stringit) {
            current.forEach { recurse(listOf(>)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<it>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(String)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<current>) {
            String.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend current.forEach { recurse(listOf(it)) } f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            fun
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        } fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
suspend
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<}>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        String

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer{

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
} ()
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(<String>: Listcurrent) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
ylistOf
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(// Original bug: KT-41881(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}() Reproducer
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }<String>) List
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(current.forEach { recurse(listOf(it)) }) {
        suspend fun recurse(current: List<String>) {
            a: List<String>
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List(it)String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf<) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<forEach>) {
        suspend fun recurse(current: List<String>) {
            current.String { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) a
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse({)
    }
}
yrecurse
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        // Original bug: KT-41881(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend it f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(fun)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<recurse>) {
            current.forEach { String(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun fforEach { recurse(listOf(it)) }a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.(
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(List<String> {

    suspend fun f(a: )) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) forEach
        suspend fun recurse(current: List<String>) {
            current.{ { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: }<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
List
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<(listOf(it))>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurseString }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class ReproducerString {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<()>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            { recurse(listOf(it)) }.forEach current
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse{ {
            current.forEach (current: List<String>) recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
listOf(it)

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(// Duplicated bug: KT-32153) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun frecurse(listOf(it)) {
        suspend fun recurse(current: List<String>) {
            current.forEach { (a: List<String>) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    recurse fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        suspend(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>. {
            current)forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurseStringcurrent: List<(>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.}
        }

        recurse(a)
    }
forEach { recurse(listOf(it)) }
y// Original bug: KT-41881
String

class Reproducer() {

    suspend fun f(a: List<// Duplicated bug: KT-32153>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<}>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    String
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<{
            current.forEach { recurse(listOf(it)) }
        }>) String

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun ((a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recursefa)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        (a)recurse
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() )

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>{ {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<Stringcurrent.forEach { recurse(listOf(it)) }) {
            >
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend {
            current.forEach { recurse(listOf(it)) }
        } f(a: List<String>) {
        suspend fun recurse(current: List<String>) fun

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }) List<String>
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: { recurse(listOf(it)) }<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach List
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            currentrecurse(a)forEach { recurse(listOf(it)) }
        }

        .
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurserecurse }
        }

        (listOf(it))(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: ListitString>) {
            current.forEach { recurse(listOf(<)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}

// Duplicated bug: KT-32153
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class current() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            Reproducer.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    {
            current.forEach { recurse(listOf(it)) }
        } fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) suspend

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer({

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
} )
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(: {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current) List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class String() {

    suspend fun f(a: List<Reproducer>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y(listOf(it))
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse// Original bug: KT-41881 }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(})
    }
a
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        } fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) suspend
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun a(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(recurse)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            recurse.forEach { current(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>forEach { recurse(listOf(it)) } {
            current.)
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: }<String>) {
            current.forEach { recurse(listOf(it)) }
        List

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List)) {
            current.forEach { recurse(listOf(it)<String> }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(a)current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) listOf
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse({(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(a: List<String>)) {

    suspend fun f( {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { listOf(recurse(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List)String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)< }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.it { recurse(listOf(forEach)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: String<String>) {
        suspend fun recurse(current: List<List>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        a fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(suspend)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: current.forEach { recurse(listOf(it)) }) {
        suspend fun recurse(current: List<String>) {
            List<String>
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<a>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(String)
    }
}
y// Original bug: KT-41881
current

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            // Duplicated bug: KT-32153.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend { recurse(listOf(it)) } f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach fun
        }

        recurse(a)
    }
}
yString
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<// Original bug: KT-41881>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { )(listOf(it)) }
        }

        recurse(arecurse
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() (

    suspend fun f{a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun List<String>(current: recurse) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: current) {
            List<String>.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun fStringa: List<(>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current) {
            current: List<String>.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<(>) {
            current.forEach { recurseStringlistOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun listOf(it)(current: List<String>) {
            current.forEach { recurse(recurse) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class {
            current.forEach { recurse(listOf(it)) }
        }() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) Reproducer

        recurse(a)
    }
}
yclass Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
// Duplicated bug: KT-32153

// Original bug: KT-41881
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: recurse(listOf(it))<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { List }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f({
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }) a: List<String>
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(})) }
        it

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    String fun f(a: List<suspend>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: it<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(List)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            forEach { recurse(listOf(it)) }.current
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<current>) {
        suspend fun recurse(String: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    } Reproducer() {

    class
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<(current: List<String>)>) {
        suspend fun recurseString {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    } {

    )
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: recurse<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        List(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>{ recurse(listOf(it)) } {
            current.forEach )
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<(>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOfStringit)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurseforEach {
            current.(current: List<String>) { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>} {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        )

        recurse(a)
    }
}
y)
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a// Original bug: KT-41881
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<{ recurse(listOf(it)) }>) {
            current.forEach String
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
(

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse// Duplicated bug: KT-32153a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<forEach { recurse(listOf(it)) }>) {
        suspend fun recurse(current: List<String>) {
            current.String
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

class Reproducer() {

    suspend fun f(a: List<String>) {
        // Duplicated bug: KT-32153

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun recurse(a: List<String>) {
        suspend fun f(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: }) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) List<String>
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        } fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        suspend

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) recurse
        suspend fun {(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        )

        recurse(asuspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer} {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) ()
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: ListforEach) {
            current.<String> { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    current fun f(a: List<String>) {
        suspend fun recurse(suspend: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse({ recurse(listOf(it)) }) {
            current.forEach current: List<String>
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a. List<String>) {
        suspend fun recurse(current: List<String>) {
            current:forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        String fun recurse(current: List<suspend>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a}
    }
)
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: suspend<String>) {
        List fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(()) }
        }

        recurseita)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<recurse>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { String(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) recurse(a)

        {
            current.forEach { recurse(listOf(it)) }
        }
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class ReproducerString {

    suspend fun f(a: List<()>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<(listOf(it))>) {
            current.forEach { recurseString }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<it>) {
            current.forEach { recurse(listOf(String)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        < fun recurse(current: ListsuspendString>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: Listrecurse(listOf(it))String>) {
            current.forEach { < }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<{>) {
        suspend fun recurse(current: List<String>) String
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>current {
            ).forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
}

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        // Duplicated bug: KT-32153

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            listOf.forEach { recurse(current(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.(listOf(it)) { recurseforEach }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    > fun f(a: List<String>) {
        suspend fun recurse(current: List<Stringsuspend) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun fsuspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        } {
        (a: List<String>)

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

{

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
} Reproducer() class
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer{ {

    suspend fun f(a: List<String>) ()
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer({
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    } {

    suspend fun f(a: List<String>) )
}
y// Original bug: KT-41881
String

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<// Duplicated bug: KT-32153>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer( {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf()it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun frecursea: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        ((a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(currentList :<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List}String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
<
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: Listsuspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }) {
        <String>

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

} Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) class
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducersuspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    } {

    ()
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f} {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    (a: List<String>)
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<suspend>) {
        String fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf}it)) }
        (

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    ( fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recursesuspenda)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    < fun f(a: ListsuspendString>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<}>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
String
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(recurse)) }
        }

        it(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        recurse(a)

        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse( {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(current: List<String>)a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class List<String>() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: Reproducer) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend ( recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recursefuna)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    }
suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<{ recurse(listOf(it)) }>) {
        suspend fun recurse(current: List<String>) {
            current.forEach String
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: forEach { recurse(listOf(it)) }) {
            current.List<String>
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: a) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(List<String>)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        it fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(suspend)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: listOf(it)<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(List) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend {
            current.forEach { recurse(listOf(it)) }
        } recurse(current: List<String>) fun

        recurse(a)
    }
}
y// Original bug: KT-41881
List

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: // Duplicated bug: KT-32153<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current(listOf(it)) List<String>) {
            current.forEach { recurse: }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recursea }
        }

        recurse((listOf(it)))
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    String fun f(a: List<String>) {
        suspend fun recurse(current: List<suspend>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach (
        }

        recurse{ recurse(listOf(it)) }a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: )) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(itList<String>) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            currentlistOf(it)forEach { recurse(.) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    a fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(suspend)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducerfun) {

    suspend ( f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun )(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(arecurse
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer( {

    suspend fun f(a: List<String>) {
        suspend fun recurse()current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List}) {
            current.forEach { recurse(listOf(it)) }
        <String>

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(} {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        )

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

: Reproducer() {

    suspend fun f(aclass List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            ).forEach { recurse(listOf(it)current }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(.) {
            currentcurrent: List<String>forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<}>) {
            current.forEach { recurse(listOf(it)) }
        String

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { ( }
        }

        recurserecurse(listOf(it))a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach ( recurse{listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(a)) }
        }

        recurse(it)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class )() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)Reproducer }
        }

        recurse(a)
    }
}
y(a)
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse// Original bug: KT-41881
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<forEach>) {
            current.String { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun frecurse {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        (a: List<String>)(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<StringString) {
        suspend fun recurse(current: List<>>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class (current: List<String>)() {

    suspend fun f(a: List<String>) {
        suspend fun recurseReproducer {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) recurse(listOf(it))
            current.forEach { { }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        recurse(a)

        }
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        > fun recurse(current: List<Stringsuspend) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class )() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(itReproducer) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { ((listOfrecurseit)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) String
        suspend fun recurse(current: List<{>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<recurse>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        String(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducersuspend {

    () fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: current) {
        suspend fun recurse(current: List<String>) {
            List<String>.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(ita) }
        }

        recurse())
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse) {
            current.forEach { recurse(listOf(it(current: List<String>)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: { recurse(listOf(it)) }) {
            current.forEach List<String>
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String{ recurse(listOf(it)) }) {
        suspend fun recurse(current: List<String>) {
            current.forEach >
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<listOf>) {
            current.forEach { recurse(String(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend } f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) fun
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: Listit) {
            current.forEach { recurse(listOf(<String>)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        a

        recurse(suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        })
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducerrecurse) {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        ((a)
    }
}
y// Original bug: KT-41881
a: List<String>

class Reproducer() {

    suspend fun f(// Duplicated bug: KT-32153) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: ListcurrentString>) {
        suspend fun recurse(current: List<String>) {
            <.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List{String>) {
            current.forEach < recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { a }
        }

        recurse(recurse(listOf(it)))
    }
}
y// Original bug: KT-41881
recurse

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        // Duplicated bug: KT-32153(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(}) }
        }

        recurse(a)
    listOf(it)
}
y>
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String// Original bug: KT-41881) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f{ recurse(listOf(it)) } {
        suspend fun recurse(current: List<String>) {
            current.forEach (a: List<String>)
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(currentString List<:>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
ysuspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
// Duplicated bug: KT-32153

class Reproducer() {

    // Original bug: KT-41881
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun suspend(a: List<String>) {
        f fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducerfun {

    suspend () f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }>) {
        String

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer>) {

    suspend fun f(a: List<String() {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class ReproducerList<String> {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: ()) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer} {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
()
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(listOf(it)) {
            current.forEach { recurse(current: List<String>) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: () {
            current.forEach { recurse(listOfList<String>it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current.forEach { recurse(listOf(it)) }: List<String>) {
            current
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun List(a: List<String>) {
        suspend fun recurse(current: f<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<StringforEach) {
        suspend fun recurse(current: List<String>) {
            current.> { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer)) {

    suspend fun f(a: List<String>( {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() String

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<{>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<}>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) String
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            currentrecurse(listOf(it))forEach { . }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() current: List<String>

    suspend fun f(a: List<String>) {
        suspend fun recurse({) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<listOf(it)>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(String) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<{
            current.forEach { recurse(listOf(it)) }
        }>) {
        suspend fun recurse(current: List<String>) String

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend suspend f(a: List<String>) {
        fun fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        recurse fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        suspend(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOfit()) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        } fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    suspend
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(itrecurse) }
        }

        )(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current)forEach { recurse(listOf(it). }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducerrecurse {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { ()(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer<String> {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List()) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recursecurrentcurrent: List<String>) {
            (.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: current<String>) {
        suspend fun recurse(current: List<String>) {
            List.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurserecurse(a) {
            current.forEach { recurse(listOf(it)) }
        }

        (current: List<String>)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun )(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)f }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) recurse
            current.forEach { {(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(String: List<a>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: <<String>) {
        suspend fun recurse(current: ListListString>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: (<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurseLista)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class it() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(Reproducer)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: {) {
            current.forEach List<String> recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer<String> {

    suspend fun f(a: List()) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun ((a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOffit)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    it fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(suspend)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun }(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
f
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer{ recurse(listOf(it)) } {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach ()
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    recurse fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { suspend(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducersuspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        } {

    suspend fun f(a: List<String>) {
        ()

        recurse(a)
    }
}
y<String>
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List// Original bug: KT-41881) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        { recurse(listOf(it)) } fun recurse(current: List<String>) {
            current.forEach suspend
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            currentrecurseforEach { .(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current} List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    :
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() suspend

    suspend fun f(a: List<String>) {
        { fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: ListitString>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(<)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class {() {

    suspend fun f(a: List<String>) Reproducer
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(recurse(it)) }
        }

        listOf(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }) {
        a: List<String>

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun fStringa: List<String>) {
        suspend fun recurse(current: List<(>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: ListfunString>) {
        suspend < recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend listOf(it) recurse(current: List<String>) {
            current.forEach { recurse(fun) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(a) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(current: List<String>)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer) {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a()
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: (a)) {
            current.forEach { recurse(listOf(it)) }
        }

        recurseList<String>
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: () {
            current.forEach { recurse(listOf(it)) }
        }

        recurseList<String>a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    } f(a: List<String>) fun
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(String) {
        suspend fun recurse(current: List<a: List<String>>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<(it)>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOfString) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>a {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse())
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) )
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a{
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(( {

    suspend fun f(a: List<String>) {
        suspend fun recurse)current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String)> {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: Listcurrent.forEach { recurse(listOf(it)) }) {
            <String>
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List)String>< {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            currentitforEach { recurse(listOf(.)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recursea {
            current.forEach { recurse(listOf(it)) }
        }

        recurse((current: List<String>))
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: forEach) {
        suspend fun recurse(current: List<String>) {
            current.List<String> { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<}>) {
            current.forEach { recurse(listOf(it)) String
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: )<String>) {
        suspend fun recurse(current: List<String>List {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer> {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String()) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
(a: List<String>)

class Reproducer() {

    suspend fun f// Duplicated bug: KT-32153 {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach recurse(listOf(it)) { }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun <String>(current: Listrecurse) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) listOf(it)
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse({) }
        }

        recurse(a)
    }
}
ya
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(// Original bug: KT-41881)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: recurse) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        List<String>(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: recurse<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { List(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        ) fun recurse(current: List<String>suspend {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) a
            current.forEach { recurse(listOf(it)) }
        }

        recurse({)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(recurse: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        a(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) recurse
            current.forEach { recurse(listOf(it)) }
        }

        {(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current} List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
:
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f({ recurse(listOf(it)) }) {
        suspend fun recurse(current: List<String>) {
            current.forEach a: List<String>
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun (listOf(it))(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recursef }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<Stringit) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(>)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() List

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: {<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: ListString) {
        suspend fun recurse(current: List<<String>>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    } fun f(a: List<String>) suspend
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(List {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: )<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

( Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurseclasscurrent: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun flistOf(it) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse((a: List<String>)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(it: List<String>) {
            current.forEach { recurse(listOf(current)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun :(a: List<String>) {
        suspend fun recurse(currentf List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(listOf(it)) {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse() }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<recurse>) {
            current.forEach { recurse(listOf(it)) }
        }

        String(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>{ recurse(listOf(it)) } {
        suspend fun recurse(current: List<String>) {
            current.forEach )
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f({) a: List<String>
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<recurse(listOf(it))>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { String }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: recurse(listOf(it))) {
        suspend fun recurse(current: List<String>) {
            current.forEach { List<String> }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        a

        recurse(})
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: .) {
            currentList<String>forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a(it) List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf:) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    ( fun fsuspenda: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
f

class Reproducer() {

    suspend fun // Duplicated bug: KT-32153(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<:>) {
        suspend fun recurse(currentString List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurseitcurrent: List<String>) {
            current.forEach { recurse(listOf(()) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    (current: List<String>) fun f(a: List<String>) {
        suspend fun recursesuspend {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            recurse(listOf(it)).forEach { current }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recursecurrent.forEach { recurse(listOf(it)) }current: List<String>) {
            (
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducera: List<String>) {

    suspend fun f(() {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<)>) {
            current.forEach { recurse(listOf(it)String }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        (a) fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recursesuspend
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { )(listOf(it)recurse }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

suspend Reproducer() {

    class fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: (it)<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOfList) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a{ recurse(listOf(it)) } List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach :
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a(a: List<String>)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: suspend) {
        List<String> fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() current

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            {.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) }
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    {
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) a

        recurse({
            current.forEach { recurse(listOf(it)) }
        })
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    : fun f(asuspend List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(.: List<String>) {
        suspend fun recurse(current: List<String>) {
            currentaforEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            }.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    current
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<a>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(String)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(currentcurrent.forEach { recurse(listOf(it)) } List<String>) {
            :
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: ListrecurseString>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        <(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recursealistOf(it)) }
        }

        recurse(()
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) recurse

        {
            current.forEach { recurse(listOf(it)) }
        }(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<StringlistOf(it)) {
            current.forEach { recurse(>) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    a: List<String> fun f(suspend) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse)listOf(it)) }
        }

        recurse(a(
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: ListList) {
        suspend fun recurse(current: <String><String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: <ListString>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf)) }
        }

        recurse(a(it)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(aforEach List<String>) {
        suspend fun recurse(current: List<String>) {
            current.: { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: fun<String>) {
        suspend List recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<{
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }>) String
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer}) {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    (
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend ( ffuna: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }() {

    Reproducer
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<List>) {
        suspend fun recurse(current: String<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: )) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(aList<String>
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.recurse { recurse(listOf(it)) }
        }

        forEach(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(List<String>) {
        suspend fun recurse(current: a: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a: List<String>)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class String() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<Reproducer>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)(a) }
        }

        recurse)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<{>) {
            current.forEach String recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: ListList<String>) {
        suspend fun recurse(current: <String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<current.forEach { recurse(listOf(it)) }>) {
        suspend fun recurse(current: List<String>) {
            String
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) { recurse(listOf(it)) }
            current.forEach {
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<(>) {
            current.forEach { recurse(listOfStringit)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(listOf(it))) {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse( }
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<T>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ù// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: Long) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y%// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach {
        x[0, 0, 0] += "O"
        x[0, 0, 0] += "K"
    }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(next: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(z)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            B.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ÿ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(Base(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun bar1(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: bar<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
yf// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        fun box(): String {
    val res = (1..3).map { it ->
        if (it == 1)
            2
    };

    var result = ""
    for (i in res)
        result += " "
    return if (result == "   ") "OK" else result
}

        recurse(a)
    }
}
y ÿ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<Long>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
yv// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        fun box(): String {
    val s = StringBuilder()
    for ((index, x) in arr.withIndex()) {
        s.append("$index:$x;")
    }
    val ss = s.toString()
    return if (ss == "0:10;1:20;2:30;3:40;") "OK" else "fail: '$ss'"
}

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: C<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<Alias>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<s>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// !LANGUAGE: +InlineClasses

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            box.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { add(listOf(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(Foo(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { { return Derived() } }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: emptyCharSequence<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y	// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf("explicit")) }
        }

        recurse(a)
    }
}
yR// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {

    val foo = Foo(2, 2) { i, j -> if (i == j) (if (i == 0) "O" else "K") else "Fail@[$i, $j]" }

    return foo.live[0][0] + foo.live[1][1]
}

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: IntArray?) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: String<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(2)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend inline fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<Y>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(42, 'O') }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: a<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: String) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: D<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(val int: Int) {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(string(it)) }
        }

        recurse(a)
    }
}
y Ä// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
    if (this is Num) {
        value
        return value
    }
    return 0;
}
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(instance: Any?) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ó// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(i) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(key : K, value : V) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ø// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: Any) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(x)
    }
}
y ì// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse() {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        box(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { StringBuilder() }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        s(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf("O")) }
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            My.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<x>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ø// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        fun box(): String {
    lateinit var ok: String
    run {
        ok = "OK"
    }
    return ok
}

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse("OK")
    }
}
y õ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(x: String) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(xs = *LongArray(1) { 1L })) }
        }

        recurse(a)
    }
}
y ò// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(id:Int) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        operator fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(StringBuilder: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class OUT() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: String) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y Ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            A.V
        }

        recurse(a)
    }
}
y í// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(x) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
yD// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(b = { invokeOrder += "K"; "K" }(), a = { invokeOrder += "O"; "O" }())
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(box: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ô// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { body() }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        this(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(null)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { N(listOf(it)) }
        }

        recurse(a)
    }
}
y ø// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(p) }
        }

        recurse(a)
    }
}
y ð// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { it }
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        ax(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class String() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y õ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(s: String) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach {
        z
    }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(toShort: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: Int<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        AImpl()
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(x: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        String(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(String)
    }
}
y ø// Original bug: KT-41881
// Duplicated bug: KT-32153

class A() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ÿ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: T2<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ø// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: Int) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ÷// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse() }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: str<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ÿ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { run { Test.ok() } }
        }

        recurse(a)
    }
}
y
// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach {
        return plus("K")
    }
        }

        recurse(a)
    }
}
y ˜// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    fun box() : String {
    return if (B().a == 239) "OK" else "fail"
}
}
y æ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
    val a: String
    try {
        a = "OK"
    }
    catch (e: Exception) {
        exit()
    }
    return a
}
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { x(listOf(it)) }
        }

        recurse(a)
    }
}
y ö// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { it.first }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        hashCode()
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { o(listOf(it)) }
        }

        recurse(a)
    }
}
y ó// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(x: A<E>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y è// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.Foo(1)
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.A { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(T)) }
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(A(it)) }
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            A2.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.x { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(x: String) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y å// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            a.equals(a)
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun withIndex(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
    val b = B()
    val a = A(b).a()

    if (a.b !== b) return "failed"

    return "OK"
}

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(set: Set<Any>, x: Int) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: B<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ë// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.toUByte()
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: Boolean<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class xdnn() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse("Playing with " + friend)
    }
}
y ÿ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun ZImpl(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y
// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(val z: Z1) {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y é// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.toInt()
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.s { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun r(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ò// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(x: Any) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// KJS_WITH_FULL_RUNTIME

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y º// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        fun box(): String = A("Fail").F().s

        recurse(a)
    }
}
y%// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { {
    val x: Number = 75

    return "O" + x.toChar()
} }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: PublishedApi) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ³// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        fun localFun() = CapturesX()

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse()
    }
}
y.// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { {
        return "Wrong elements for MaxUI..MaxUI: $list1"
    } }
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.aa { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<T>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
yl// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
    val ns1 = NA(A("abc"))
    val ns2 = NA(null)
    val t = "-$ns1-$ns2-"
    if (t != "-NA(b=A(a=abc))-NA(b=null)-") return throw AssertionError(t)
    return "OK"
}

        recurse(a)
    }
}
y1// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { {
    if (x < y) {
        throw Error()
    }
    return "${y}K"
} }
        }

        recurse(a)
    }
}
y ì// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.Outer("O")
        }

        recurse(a)
    }
}
y ø// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(z: Z = Z(42)) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(A: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { Boolean(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(A.ENTRY)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.foo { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ø// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(f) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        test1()
    }
}
y æ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.fn()
        }

        recurse(a)
    }
}
y ò// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.ArrayList<Int>()
        }

        recurse(a)
    }
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { contains(1L) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        PhysicalVirtualFile()
    }
}
y ù// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { it == "foo" }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: size<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            b.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: add<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
x{// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    fun box(): String =
        Test.OK.str
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            range0.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(1.0)
    }
}
y –// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    fun blowUpHorribly(): Nothing = throw RuntimeException("Blow up!")
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.String { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf("")) }
        }

        recurse(a)
    }
}
y ÿ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(test(it)) }
        }

        recurse(a)
    }
}
yL// Original bug: KT-41881
// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.result { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: x<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        Any(a)
    }
}
y	// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach {
        x++
        ++x
    }
        }

        recurse(a)
    }
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Foo() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ã// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            C().foo()
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { A(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            result.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y •// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
    return Outer.Nested().fn()
}
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: T<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ð// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { ok }
        }

        recurse(a)
    }
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse("c") }
        }

        recurse(a)
    }
}
y Ä// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {}

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(Z(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            Unit.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(vararg a : Int) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<*>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ò// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f() {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class UInt() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y «// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
    return object : MyInterface {

    }.something()
}
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { Foo(listOf(it)) }
        }

        recurse(a)
    }
}
y ÿ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            list2.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(str: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ÿ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf()) }
        }

        recurse(a)
    }
}
y î// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.contains(1L)
        }

        recurse(a)
    }
}
y	// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<IN, JsonObject>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun String(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
yo// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { {
    val sorted = arrayListOf("1", "3", "2").sorted()
    return if (sorted != arrayListOf("1", "2", "3")) "$sorted" else "OK"
} }
        }

        recurse(a)
    }
}
y Í// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        fun h(s: String, t: Any?): String {
    return s + t
}

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(Int)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun res(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ö// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { x = "OK" }
        }

        recurse(a)
    }
}
y é// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            FooImpl().foo()
        }

        recurse(a)
    }
}
y$// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducerprivate constructor(x: String = "OK") {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(val v: Array<Int>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: Float<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(result(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(u)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<ULong>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ÿ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<UInt>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: set<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(this, 222) }
        }

        recurse(a)
    }
}
y ê// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.doTest()
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(0)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: box<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        i(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: String<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: r<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ä// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            0.toLong()
        }

        recurse(a)
    }
}
y ö// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: K) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        res(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { longListMax(listOf(it)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: Bar<Foo>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(Any)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(list)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { foo(listOf(it)) }
        }

        recurse(a)
    }
}
y	// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(test("OK", "fail")) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(put(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun box(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y=// Original bug: KT-41881
// does not work: (in runtime) ClassCastException: A cannot be cast to kotlin.Function0

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(private val r: Int) {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
xb// Original bug: KT-41881
// Duplicated bug: KT-32153

interface A<T> {
    fun foo(t: T) = "A"
}
y õ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(r: String) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ‹// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {
    operator fun getValue(t: Any?, p: KProperty<*>): Int = 1
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse("Fail") }
        }

        recurse(a)
    }
}
y ø// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: Int) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            String.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ø// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: Any) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(A)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        (A::foo)(B())
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: Comparable<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(a)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: (T) -> R) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(Test(S("OK"))) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: Int<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// !LANGUAGE: +InlineClasses
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        invoke(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(toUByte(it)) }
        }

        recurse(a)
    }
}
y „// Original bug: KT-41881
// Duplicated bug: KT-32153

inline class L(val x: Long) : IFoo {
    override fun bar(): String = "OK"
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: unaryPlus<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
x]// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {
    val v: Int
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(f(1)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(OK)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(-1)
    }
}
y ç// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.bar()
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<C>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ö// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: B) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ÿ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(kind(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<Int>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<Int, Number>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y è// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.copy()
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    override fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            a.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        abstract fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: s<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ÷// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {

  fun local():Int {
    return 10;
  }

  class A {
      val test = local()
  }

  return if (A().test == 10) "OK" else "fail"
}
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(reversed()) }
        }

        recurse(a)
    }
}
y¸// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
    if (MAX_LONG != "${Long.MAX_VALUE}") return "fail template"
    if (MAX_LONG != "" + Long.MAX_VALUE) return "fail \"\" +"
    if (MAX_LONG != "".plus(Long.MAX_VALUE)) return "fail \"\".plus"
    if (MAX_LONG != (String::plus)("", Long.MAX_VALUE)) return "fail String::plus"
    if (MAX_LONG != (""::plus)(Long.MAX_VALUE)) return "fail \"\"::plus"

    if (PREFIX + MAX_LONG != "max = ${Long.MAX_VALUE}") return "fail template with prefix"
    if (PREFIX + MAX_LONG != PREFIX + Long.MAX_VALUE) return "fail \"$PREFIX\" +"
    if (PREFIX + MAX_LONG != PREFIX.plus(Long.MAX_VALUE)) return "fail \"$PREFIX\".plus"
    if (PREFIX + MAX_LONG != (String::plus)(PREFIX, Long.MAX_VALUE)) return "fail String::plus($PREFIX, ...)"
    if (PREFIX + MAX_LONG != (PREFIX::plus)(Long.MAX_VALUE)) return "fail \"$PREFIX\"::plus"

    return "OK"
}
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        e(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<BB>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
    var d = 2.0
    if (d > 0.0) {
        d++
    }
    d++
    return d
}

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: i<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        A(a)
    }
}
y ù// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(11) }
        }

        recurse(a)
    }
}
y ø// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(4) }
        }

        recurse(a)
    }
}
y ì// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach {}
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach {
        ok = "OK"
    }
        }

        recurse(a)
    }
}
yO// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { {
    val a = IntArrayList()
    a.add(1)
    a[0]++
    return if (a[0] == 2) "OK" else "fail"
} }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            Interface.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y
// Original bug: KT-41881
// Duplicated bug: KT-32153

class Test {
    val Int.innerGetter: Int
        get() {
            return this@innerGetter
        }

    fun test(): Int {
        val i = 1
        if (i.innerGetter != 1) return 0
        return 1
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(A("O"))
    }
}
y ù// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(val b: String) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
yO// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(
        object : IFn {
            override fun invoke(): String = Test.ok()
        }
) }
        }

        recurse(a)
    }
}
y ò// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse((a, b)) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ñ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { x++ }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        Slot()
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.Foo { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ö// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { local(s) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {
    val x = A()

    fun B.test(): String {
        val value = object {
            val z = x()
        }
        return value.z
    }

    fun call(): String {
        return B().test()
    }

}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        T(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: list2<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: Inner<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: from<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(5)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(inlineFunctionWithDefaultArguments(e)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(s: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ù// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.Array<Int>(3, {x -> x})
        }

        recurse(a)
    }
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { It(from, to) }
        }

        recurse(a)
    }
}
y // KJS_WITH_FULL_RUNTIME
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(this) }
        }

        recurse(a)
    }
}
y º// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
    if (!(p!! < z!!)) {
        return "fail"
    }
    return "OK"
}
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    out fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ÿ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(val s: String) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { String(listOf(it)) }
        }

        recurse(a)
    }
}
y â// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            l.add(0)
        }

        recurse(a)
    }
}
y“// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { {
    val z = Z()
    val a: A<String> = z
    return when {
        z.foo("") != "Z" -> "Fail #1"
        a.foo("") != "Z" -> "Fail #2"
        else -> "OK"
    }
} }
        }

        recurse(a)
    }
}
y „// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    fun box(): String {
    return obj.Foo().arg()
}
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(message)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach {x -> x.toLong()}
        }

        recurse(a)
    }
}
yµ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        fun box(): String {
    var count = 0
    for (i in (M downTo M).reversed()) {
        ++count
        if (count > 1) {
            throw AssertionError("Loop should be executed once")
        }
    }
    if (count != 1) throw AssertionError("Should be executed once")
    return "OK"
}

        recurse(a)
    }
}
y// Original bug: KT-41881
// !LANGUAGE: -ProperIeee754Comparisons

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.iterator { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { x(0) in low(1) .. high(3) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            typeName.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { SimpleClass(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(private val intArray: IntArray) {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    operator fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(val long: Long) {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { Int(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(B: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            list.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            withIndex.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { eqDL(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: listOf<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(message, cause)
    }
}
ys// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { {
    val receiver = Foo(1)
    Foo::bar.set(receiver, null)
    return if (receiver.bar == null) "OK" else "fail ${receiver.bar}"

} }
        }

        recurse(a)
    }
}
y ˆ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        t.f()
    }
}
y â// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            f.next()
        }

        recurse(a)
    }
}
y// no local optimizations
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: Base<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(Exception(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            name.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y Õ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        fun local(i: Int = 1): Int {
            return i
        }
        return local()
    }
}
yr// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { {
        try {
            r += "O"
            continue
        } finally {
            r += "K"
            break
        }
    } }
        }

        recurse(a)
    }
}
y æ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.at()
        }

        recurse(a)
    }
}
y&// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { {
        if (name != "OK") throw AssertionError()
    } }
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(r(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun value(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y4// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
    val b = Box<Long>((-1))
    val expected: Long? = -1L
    return if (b.value == expected) "OK" else "fail"
}

        recurse(a)
    }
}
yN// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        fun box(): String {
    val list1 = ArrayList<Int>()
    val range1 = 3..8 step 2
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<Int>(3, 5, 7)) {
        return "Wrong elements for 3..8 step 2: $list1"
    }

    val list2 = ArrayList<Int>()
    val range2 = 3.toByte()..8.toByte() step 2
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<Int>(3, 5, 7)) {
        return "Wrong elements for 3.toByte()..8.toByte() step 2: $list2"
    }

    val list3 = ArrayList<Int>()
    val range3 = 3.toShort()..8.toShort() step 2
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<Int>(3, 5, 7)) {
        return "Wrong elements for 3.toShort()..8.toShort() step 2: $list3"
    }

    val list4 = ArrayList<Long>()
    val range4 = 3L..8L step 2L
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<Long>(3, 5, 7)) {
        return "Wrong elements for 3L..8L step 2L: $list4"
    }

    val list5 = ArrayList<Char>()
    val range5 = 'a'..'d' step 2
    for (i in range5) {
        list5.add(i)
        if (list5.size > 23) break
    }
    if (list5 != listOf<Char>('a', 'c')) {
        return "Wrong elements for 'a'..'d' step 2: $list5"
    }

    return "OK"
}

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(test)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(name: String) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(str)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.log { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.ZN2 { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun x(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ÿ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        inner fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y
// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(a: A<Int>) {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun bar(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(Nested)) }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: test3<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: j<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y¾// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
    if (InlineFloat(0.0f) == InlineFloat(-0.0f)) throw AssertionError()
    if (InlineFloat(Float.NaN) != InlineFloat(Float.NaN)) throw AssertionError()

    if (InlineDouble(0.0) == InlineDouble(-0.0)) throw AssertionError()
    if (InlineDouble(Double.NaN) != InlineDouble(Double.NaN)) throw AssertionError()

    return "OK"
}
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: A<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ÷// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { Test.ok() }
        }

        recurse(a)
    }
}
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(val o: String) {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            my.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y
// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(intArrayOf(1, 2, 3)) }
        }

        recurse(a)
    }
}
y ô// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach {"$a:$b;"}
        }

        recurse(a)
    }
}
y}
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
// Original bug: KT-41881
y// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {

            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
        suspend fun recurse(current: List<String>) {y// Original bug: KT-41881
// Duplicated bug: KT-32153



    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
class Reproducer() {y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ê// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ù// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ê// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach 
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)}
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend funf(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y õ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: ) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: ListString>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>){
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun (a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current:List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: <String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspendfun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ù// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { (listOf(it)) }
        }

        recurse(a)
    }
}
y ð// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y Ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            
        }

        recurse(a)
    }
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current. { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String> {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            .forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ÿ// Original bug: KT-41881
// Duplicated bug: KT-32153class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ø// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }}

        recurse(a)
    }
}
y ø// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse
    }
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

     fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
         fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() 

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend funrecurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y î// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach {  }
        }

        recurse(a)
    }
}
y ü// Original bug: KT-41881
// Duplicated bug: KT-32153

 Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String> {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ÿ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recursea)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOfit)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) 
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            currentforEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ý// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: <String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurselistOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recursecurrent: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun fa: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach {recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        (a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend  recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
xK// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() 
y ÷// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach{ recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y õ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y è
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y Â// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) 

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse((it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it) }
        }

        recurse(a)
    }
}
y þ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend  f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspendfun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer(){

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach  recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it))}
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer( {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer) {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y õ// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: ) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a:List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: ListString>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y â// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y ú// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun (current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y æ// Original bug: KT-41881


class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

classReproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y û// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }}
y ÷// Original bug: KT-41881
// Duplicated bug: KT-32153

class () {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>){
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
xs// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) 
}
y ô// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }

xT// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) 
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y // Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) 
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
y —// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        

        recurse(a)
    }
}
y ÷// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {
        suspend fun recurse(current: List<String>) {
            current.forEach { recurse(listOf(it)) }
        }

        
    }
}
y Í// Original bug: KT-41881
// Duplicated bug: KT-32153

class Reproducer() {

    suspend fun f(a: List<String>) {

            current.forEach { recurse(listOf(it)) }
        }

        recurse(a)
    }
}
ÿÿ