øiexportTaggdefaultnoriginalSampleyç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
gmutantsüy√// Original bug: KT-14961
// Duplicated bug: KT-14961


val c = true
if (c) {fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}} else {fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}}


fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y˛// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}


val s = false
when (s) {
 true -> {fun main(args: Array<String>) {
  println(listOfFactor(60))
}}
 else -> {fun main(args: Array<String>) {
  println(listOfFactor(60))
}}
}

y¬// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> 
val i = true
try
{{
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}}
catch(e: Exception){}
finally{}


fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y√// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) 
val s = false
try
{{
  println(listOfFactor(60))
}}
catch(e: Exception){}
finally{}

yÀ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(
val j = true
when (j) {
 true -> {number: Int}
 else -> {number: Int}
}
): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y¬// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  
val s = true
try
{tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }}
catch(e: Exception){}
finally{}

  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yË// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  
val c = true
when (c) {
 true -> {return listOfFactor(number, emptyList())}
 else -> {return listOfFactor(number, emptyList())}
}

}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y‘// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(
val f = false
when (f) {
 true -> {args: Array<String>}
 else -> {args: Array<String>}
}
) {
  println(listOfFactor(60))
}
y¬// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  
val r = true
try
{println(listOfFactor(60))}
catch(e: Exception){}
finally{}

}
yƒ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): 
val l = true
when (l) {
 true -> {List}
 else -> {List}
}
<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y(// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> 
val a = true
if (a) {{
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }} else {{
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }}

  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y√// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return 
val t = false
try
{listOfFactor(number, emptyList())}
catch(e: Exception){}
finally{}

}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y¬// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  
val k = true
try
{println}
catch(e: Exception){}
finally{}
(listOfFactor(60))
}
y¬// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(
val k = true
try
{number: Int}
catch(e: Exception){}
finally{}
, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y√// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, 
val n = false
try
{acc: List<Int>}
catch(e: Exception){}
finally{}
): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y#// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    
val q = false
when (q) {
 true -> {(2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }}
 else -> {(2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }}
}

    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÀ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    
val q = false
when (q) {
 true -> {return acc}
 else -> {return acc}
}

  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÕ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return 
val r = false
when (r) {
 true -> {listOfFactor}
 else -> {listOfFactor}
}
(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y√// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: 
val g = false
try
{Int}
catch(e: Exception){}
finally{}
): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y√// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): 
val e = false
try
{List}
catch(e: Exception){}
finally{}
<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÃ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    
val o = false
when (o) {
 true -> {(2..number)}
 else -> {(2..number)}
}
.forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y¬// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).
val f = true
try
{forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }}
catch(e: Exception){}
finally{}

    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yƒ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return 
val k = false
when (k) {
 true -> {acc}
 else -> {acc}
}

  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y√// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: 
val a = false
try
{Array}
catch(e: Exception){}
finally{}
<String>) {
  println(listOfFactor(60))
}
y–// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(
val x = true
when (x) {
 true -> {listOfFactor(60)}
 else -> {listOfFactor(60)}
}
)
}
y // Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (
val n = false
when (n) {
 true -> {2..number}
 else -> {2..number}
}
).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y√// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).
val o = false
try
{forEach}
catch(e: Exception){}
finally{}
 {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y√// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(
val q = false
try
{number}
catch(e: Exception){}
finally{}
, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y√// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, 
val i = false
try
{emptyList()}
catch(e: Exception){}
finally{}
)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yπ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(
val g = true
if (g) {listOfFactor} else {listOfFactor}
(60))
}
yƒ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<
val w = false
when (w) {
 true -> {Int}
 else -> {Int}
}
> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y∞// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: 
val e = true
if (e) {Int} else {Int}
, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y≈// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: 
val u = false
when (u) {
 true -> {List}
 else -> {List}
}
<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y¬// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (
val u = true
try
{2}
catch(e: Exception){}
finally{}
..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y√// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2
val t = false
try
{..}
catch(e: Exception){}
finally{}
number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y√// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..
val x = false
try
{number}
catch(e: Exception){}
finally{}
).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y¬// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach 
val r = true
try
{{
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }}
catch(e: Exception){}
finally{}

    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y√// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, 
val e = false
try
{emptyList}
catch(e: Exception){}
finally{}
())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach 
val z = false
when (z) {
 true -> {{
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }}
 else -> {{
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }}
}

    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y¬// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(
val e = true
try
{60}
catch(e: Exception){}
finally{}
))
}
yƒ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<
val j = false
when (j) {
 true -> {Int}
 else -> {Int}
}
> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÌ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      
val i = true
if (i) {if (number % it == 0) return listOfFactor(number / it, acc + it)} else {if (number % it == 0) return listOfFactor(number / it, acc + it)}

    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y∆// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<
val x = true
when (x) {
 true -> {String}
 else -> {String}
}
>) {
  println(listOfFactor(60))
}
yÌ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      
val q = true
if (q) {if (number % it == 0) return listOfFactor(number / it, acc + it)} else {if (number % it == 0) return listOfFactor(number / it, acc + it)}

    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y∞// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<
val p = true
if (p) {Int} else {Int}
>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y√// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (
val d = false
try
{number % it == 0}
catch(e: Exception){}
finally{}
) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÎ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) 
val f = false
when (f) {
 true -> {return listOfFactor(number / it, acc + it)}
 else -> {return listOfFactor(number / it, acc + it)}
}

    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y¬// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (
val i = true
try
{number % it}
catch(e: Exception){}
finally{}
 == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yØ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it 
val i = true
if (i) {==} else {==}
 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y¬// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 
val n = true
try
{0}
catch(e: Exception){}
finally{}
) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y—// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return 
val f = false
if (f) {listOfFactor(number / it, acc + it)} else {listOfFactor(number / it, acc + it)}

    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y∆// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (
val l = true
when (l) {
 true -> {number}
 else -> {number}
}
 % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÆ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number 
val q = true
if (q) {%} else {%}
 it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y¬// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % 
val v = true
try
{it}
catch(e: Exception){}
finally{}
 == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÃ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return 
val y = true
when (y) {
 true -> {listOfFactor}
 else -> {listOfFactor}
}
(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÃ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(
val x = false
when (x) {
 true -> {number / it}
 else -> {number / it}
}
, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y¬// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, 
val a = true
try
{acc + it}
catch(e: Exception){}
finally{}
)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y√// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(
val b = false
try
{number}
catch(e: Exception){}
finally{}
 / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÆ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number 
val u = true
if (u) {/} else {/}
 it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yØ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / 
val l = true
if (l) {it} else {it}
, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y∞// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, 
val d = true
if (d) {acc} else {acc}
 + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÆ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc 
val g = true
if (g) {+} else {+}
 it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y¬// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + 
val p = true
when (p) {
 true -> {it}
 else -> {it}
}
)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return (acc)
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor((number), emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..(number)).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      (if (number % it == 0) return listOfFactor(number / it, acc + it))
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<(Int)>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + (it))
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array!!<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number!!).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String!!>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)!!
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it!!, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): (List<Int>)? {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: (Int)?): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): (List<Int>)? {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: (Array<String>)?) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<(Int)?> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: (Int)?, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: (List<Int>)?): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<(Int)?> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<(String)?>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<(Int)?>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it != 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yó// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    ((2).rangeTo(number)).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y•// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if ((number % it)?.equals(0) ?: (0 === null)) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yí// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if ((number).rem(it) == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yí// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor((number).div(it), acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (println == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  number % it(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    listOfFactor(60)2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(()
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int)fun main(args: Array<String>) {
  println(listOfFactor(60))
} List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

:
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: tailrec): List<Int> {
  Int fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(60(listOfFactor))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    ).forEach {
      if (number % it == 0(2..number) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: fun, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

Int main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  println(listOfFactor(60))
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  }
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: number % it == 0, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (Int) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) 60 listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(return))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, )): List<Int> {
    (2..numberacc: List<Int>.forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<forEach> {
    (2..number).Int {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    ).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList()(2..number)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..fun).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

number main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(<Int>): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: Listnumber: Int): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: println(listOfFactor(60))<String>) {
  Array
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    ).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60)(2..number)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: (listOfFactor(60))) {
  printlnArray<String>
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    ()..number).forEach {
      if (number % it == 02 return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor>
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String(number / it, acc + it)) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == >) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String0) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): (<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactorList60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Array> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Int<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<emptyList()> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, Int)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<{
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach Int
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..String).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<number>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == (60)) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor0)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(60, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(number))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<}> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
Int
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun it(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / listOfFactor, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor()): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + itnumber: Int
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  String fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<tailrec>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc number it)
    }
    return acc
  }
  return listOfFactor(+, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(fun main(args: Array<String>) {
  println(listOfFactor(60))
}, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

number: Int
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  Int fun listOfFactor(number: tailrec, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): acc + it {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, List<Int>)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (Array % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: number<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): Listreturn listOfFactor(number / it, acc + it)Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) <
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number number / it it == 0) return listOfFactor(%, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % { == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) it
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return )
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>acc {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): (<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactorList60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    02..number).forEach {
      if (number % it == () return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, main + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun acc(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): listOfFactor(number / it, acc + it) {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return List<Int>
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if ((args: Array<String>) % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun mainnumber {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<:> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(argsInt Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<listOfFactor(number, emptyList())> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return Int
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return (number, emptyList())listOfFactor
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + ))
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>it {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(numberlistOfFactor(60) emptyList())
}

fun main(args: Array<String>) {
  println(,)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: listOfFactor(60)): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(Int)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int{
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }): List<Int> {
    (2..number).forEach >
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<(2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }>): List<Int> {
    Int
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<IntString {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<>>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: <): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: ListIntInt>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<{
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }>): List<Int> {
    (2..number).forEach Int
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % ( == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  printlnitlistOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): { List<Int>
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): ( {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  printlnList<Int>listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: ListString): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<<Int>>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / listOfFactor, acc + it)
    }
    return acc
  }
  return it(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (return) number % it == 0 listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(, / it, acc + it)
    }
    return acc
  }
  return listOfFactor(numbernumber emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0listOfFactor return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println()(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun >(args: Array<Stringmain) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): ><Int> {
  tailrec fun listOfFactor(number: Int, acc: List<IntList): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(String / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<number>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main60 {
  println(listOfFactor((args: Array<String>)))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  )
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60)tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<(args: Array<String>)> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun mainInt {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
Int

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: // Duplicated bug: KT-14961, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(List: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): number<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(numberlistOfFactor(number, emptyList()) Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return :
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>{
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }: List<Int> {
    (2..number).forEach )
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2{
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }number).forEach ..
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> )
  return listOfFactor(number, emptyList({
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  })
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec listOfFactor listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(fun(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun Array(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: listOfFactor<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<IntArray {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: ><String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(acc, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return number: Int
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      (number / it, acc + it) (number % it == 0) return listOfFactorif
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor..number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2(number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(}, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
number / it

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0listOfFactor return )(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun (number: Int, acc: List<Int>)listOfFactor: List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): )<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0List return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): main {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun List<Int>(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(numberList<Int> Int): : {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
number

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(// Duplicated bug: KT-14961, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..numberArray<String>.forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: )) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main:args( Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc< List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array:String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): ListList<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): <Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + listOfFactor)
    }
    return acc
  }
  return it(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<return listOfFactor(number / it, acc + it)> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) Int
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>)Int List<:> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % number == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(it, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(listOfFactor(60)) {
  println(args: Array<String>)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / acc + it, it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (}) return listOfFactor(number / it, acc + it)
    }
    return acc
  number % it == 0
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) emptyList() listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, return)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): ..<Int> {
    (2Listnumber).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, accreturn listOfFactor(number / it, acc + it) List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) :
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}): List<Int> Int

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun .(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number)listOfFactorforEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: )): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>Int: List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, listOfFactor): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return acc: List<Int>(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
(

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor// Duplicated bug: KT-1496160))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == return listOfFactor(number / it, acc + it)) 0
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<it>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + Int)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): ListmainInt> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun <(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun Array<String>(args: main) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args60 Array<String>) {
  println(listOfFactor(:))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<(>): List<Int> {
    Int2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(: List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number: Int)number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<number>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(Int / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, accString List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<:>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: ), acc: List<Int>): List<Int> {
    (2..numberInt.forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) listOfFactor
    }
    return acc
  }
  return return listOfFactor(number / it, acc + it)(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List(2..number)): List<Int> {
    <Int>.forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec ) listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60)fun
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
  println(listOfFactor(60))
}
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): emptyList() {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, List<Int>)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun List(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): listOfFactor<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactorlistOfFactor
}

fun main(args: Array<String>) {
  println((number, emptyList())(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int} {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
>

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor)number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it(
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): % {
    (2..number).forEach {
      if (number List<Int> it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number 60 it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(%))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int)60 List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(:))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(if: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      number (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: +): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc Int it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int% {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number > it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number0 Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == :) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int)number List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(: / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<(>) {
  println(listOfFactorString60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(+ / it, acc number it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int<Int>: List) {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun <String>(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: ArraylistOfFactor) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor
    }
    return acc
  }
  return listOfFactor(number / it, acc + it)(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  number % it == 0 fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (tailrec) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> acc
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, { + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): return acc<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    List
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      listOfFactor(60)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(if (number % it == 0) return listOfFactor(number / it, acc + it))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<{> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach Int
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<2..number> {
    (Int).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): ListaccInt> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return <
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactorIntnumber: Int): List<(> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List(Int> {
    <2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return fun main(args: Array<String>) {
  println(listOfFactor(60))
}(number, emptyList())
}

listOfFactor
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List2Int>): List<Int> {
    (<..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    ((number / it, acc + it)..number).forEach {
      if (number % it == 0) return listOfFactor2
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

emptyList listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, fun())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactorprintln: List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  (number: Int, acc: List<Int>)(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<{
  println(listOfFactor(60))
}> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) Int
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    Array
  }
  return listOfFactor(number, emptyList())
}

fun main(args: return acc<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<it> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % Int == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (String..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<2>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + 60)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(it))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<it> {
    (2..number).forEach {
      if (number % Int == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<emptyList()> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, Int)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Intacc + it {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, >)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyListfun main(args: Array<String>) {
  println(listOfFactor(60))
}))
}

(
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / String, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<it>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Intacc + it: List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, ))
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor((2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }: Int, acc: List<Int>): List<Int> {
    number
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, ..): List<Int> {
    (2acc: List<Int>number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<acc + it> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, Int)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2listOfFactor(60)number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(..)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: 2, acc: List<Int>): List<Int> {
    (Int..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % ) == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60it)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String() {
  println>listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, }: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
acc
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      it (number % it == 0) return listOfFactor(number / if, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (% number it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun Int(number: Int, acc: List<listOfFactor>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): ListlistOfFactorInt> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return <(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: List): Int<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): Listtailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  } {
  <Int>
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: if (number % it == 0) return listOfFactor(number / it, acc + it)): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      Int
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: emptyList()): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, List<Int>)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number: Int % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(60)
}

fun main(args: Array<String>) {
  println(listOfFactor(number, emptyList()))
}
yçnumber
// Duplicated bug: KT-14961

fun listOfFactor(// Original bug: KT-14961: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(Array, emptyList())
}

fun main(args: number<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): acc + it {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, List<Int>)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Array> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Int<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  ( fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyListtailrec))
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Intit: List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + ))
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<number % it>): List<Int> {
    (2..number).forEach {
      if (Int == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yçInt
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<// Original bug: KT-14961> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(args, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(number / it: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc{
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  } List<Int>): List<Int> :
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactorfun main(args: Array<String>) {
  println(listOfFactor(60))
}number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

(
yç// Original bug: KT-14961
number: Int

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(// Duplicated bug: KT-14961, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): Listacc + itInt> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, <)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return {(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) listOfFactor
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, listOfFactor + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(acc(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List%): List<Int> {
    (2..number).forEach {
      if (number <Int> it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(numberInt Int, acc: List<Int>): List<:> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: List, acc: List<Int>): Int<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: println<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  List(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number / it, acc + it): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number: Int)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(acc + it, number / it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun List<Int>(number: Int, acc: List<Int>): listOfFactor {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<)> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList()Int
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): number {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(List<Int>, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<(60)> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactorInt)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, ==): List<Int> {
    (2..number).forEach {
      if (number % it acc: List<Int> 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, emptyList(): List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, acc)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> args

fun main({
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number) Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>: {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return {
  println(listOfFactor(60))
}
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) acc
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): number<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(List, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return ((number, emptyList())
}

fun main(args: Array<String>) {
  printlnlistOfFactorlistOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<)> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60Int)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number % it == 0: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach return
      if (number % it == 0) { listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List} {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    <Int>
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(numberString Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<:>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Intfun acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

, main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): 60<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(List))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..return listOfFactor(number / it, acc + it)).forEach {
      if (number % it == 0) number
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..acc).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return number
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc emptyList it)
    }
    return acc
  }
  return listOfFactor(number, +())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun number(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (listOfFactor % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) ( listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactorreturn60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

( listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactorfunnumber / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<return>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    Int acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc println it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  +(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun <Int>(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: ListlistOfFactor): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> .
    (2..number){forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun String(args: Array<main>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number ) it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60)/
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, emptyList())
    }
    return acc
  }
  return listOfFactor(number, acc + it)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(emptyList, acc + it)
    }
    return acc
  }
  return listOfFactor(number, number / it())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (listOfFactor..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(2(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): it {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + List<Int>)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number)+forEach {
      if (number % it == 0) return listOfFactor(number / it, acc . it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactornumber
    }
    return acc
  }
  return listOfFactor((number / it, acc + it), emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): it {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % List<Int> == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..emptyList()).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, number)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      String (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<if>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: {<Int>): List<Int> {
    (2..number).forEach List
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: ), acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0Int return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: IntArray<String>: List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: )) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactorIntnumber: Int, acc: List<(>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: (number: Int, acc: List<Int>)): List<Int> {
  tailrec fun listOfFactorInt: List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: <ArrayString>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
println(listOfFactor(60))

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  // Duplicated bug: KT-14961
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<if>): List<Int> {
    (2..number).forEach {
      Int (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  emptyList
  return listOfFactor(number, tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>)( List<Int> {
    :2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).( {
      if forEachnumber % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: IntlistOfFactor acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return ,(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(List<Int>: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): number {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): Array<String> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: List<Int>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 60) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(0))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number listOfFactor(number / it, acc + it) it == 0) return %
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: String, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<Int>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>)it List<Int> {
    (2..number).forEach {
      if (number % : == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).// Duplicated bug: KT-14961
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<number>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(Int, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List60Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(<))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Intnumber {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (> % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  } {
  List<Int>
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(emptyList, number())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactorListnumber: Int): (<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: listOfFactor<String>) {
  println(Array(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): 2 {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (List<Int>..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

println(listOfFactor(60))

fun main(args: Array<String>) {
  fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>)println List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  :(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<(> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactorInt60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..(args: Array<String>)).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun mainnumber {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: <Int>, acc: List<Int>): ListInt {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (Array<String> == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: number % it) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Intnumber: Int: List<Int> {
  tailrec fun listOfFactor(), acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): (<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactorListnumber / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Array): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Int<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<if> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      Int (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List)Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60<)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  60 fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(tailrec))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(it: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / number, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + ()
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  printlnitlistOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  60
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(}))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).return listOfFactor(number, emptyList()) {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  forEach
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yçlistOfFactor
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return // Original bug: KT-14961(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>%: List<Int> {
    (2..number).forEach {
      if (number ) it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..+).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc number it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..60).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(number))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (listOfFactor) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(number % it == 0(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: if, acc: List<Int>): List<Int> {
    (2..number).forEach {
      Int (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: 0, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == Int) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<IntList<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): > {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

(60) main(args: Array<String>) {
  println(listOfFactorfun)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach acc
    return {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int%: List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number ) it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  ( fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun maintailrecargs: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor60
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor((number / it, acc + it)))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == println(listOfFactor(60))) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  0
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it println 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  ==(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<listOfFactor> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(Int(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == number) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(0, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: ==): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it Int 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun %(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number listOfFactor it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: String<Array>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  listOfFactor(number, emptyList())
  return }
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return fun
  }
  return listOfFactor(number, emptyList())
}

acc main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return emptyList(number, listOfFactor())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + itString
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<)>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<..>): List<Int> {
    (2Intnumber).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      listOfFactor(60) (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(if)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<,> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / itInt acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): ,<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / itList acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<println> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  Int(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) listOfFactor return(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  (listOfFactor(60))
}

fun main(args: Array<String>) {
  printlnreturn listOfFactor(number, emptyList())
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == :) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args0 Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactoracc: List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, (number: Int) + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: Int<Int>): List<List> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<>String) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (( % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactornumbernumber, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, (())
}

fun main(args: Array<String>) {
  println(listOfFactoremptyList60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach listOfFactor
    return acc
  }
  return {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (acc % it == 0) return listOfFactor(number / it, number + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, emptyList + it)
    }
    return acc
  }
  return listOfFactor(number, acc())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(listOfFactor(60), emptyList())
}

fun main(args: Array<String>) {
  println(number)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, args())
}

fun main(emptyList: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec Int listOfFactor(number: fun, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: number<Int>): List<Int> {
    (2..List).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).number: Int
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<)>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60Int)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2return accnumber).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    ..
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, %): List<Int> {
    (2..number).forEach {
      if (number acc: List<Int> it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): }<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  List
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).listOfFactor(number, emptyList())
    return acc
  }
  return forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, number)
    }
    return acc
  }
  return listOfFactor(acc + it, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<%> {
    (2..number).forEach {
      if (number Int it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number args it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(%: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> if (number % it == 0) return listOfFactor(number / it, acc + it)
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      {
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<0> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == Int) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (listOfFactor(60)).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(2..number)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach listOfFactor
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return {(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (listOfFactor(60))
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (if..number).forEach {
      2 (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    String
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<(2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun number(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(listOfFactor / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

listOfFactor

fun main(args: Array<String>) {
  println(fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number (listOfFactor(60)) it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println%
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List, {
  tailrec fun listOfFactor(number: Int<Int> acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(>): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Intnumber: Int): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec Array<String> listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: fun) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
forEach

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).// Duplicated bug: KT-14961 {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  listOfFactor(println(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }): List<Int> {
  number: Int
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (acc + it) return listOfFactor(number / it, number % it == 0)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, args)
}

fun main(emptyList(): Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (main) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun number % it == 0(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int)>: List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach (listOfFactor(60))
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println{
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int)fun List<Int> {
  tailrec : listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / fun main(args: Array<String>) {
  println(listOfFactor(60))
}, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

it
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<IntforEach {
    (2..number).> {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): } {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
List<Int>
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    )2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList()(
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number):forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args. Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    +.forEach {
      if (number % it == 0) return listOfFactor(number / it, acc (2..number) it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array60) {
  println(listOfFactor(<String>))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach (
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList{))
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(acc + it: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, number)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<String> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<Int>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<number> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(Int, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): <String> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: ArrayList<Int>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if ((60) % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactornumber)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<(listOfFactor(60))>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  printlnInt
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactorIntnumber: (, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<}> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  Int
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }, acc: List<Int>): List<Int> {
    (2..number).forEach Int
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..numberforEach.) {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it emptyList() 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, ==)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): ListaccInt> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return <
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    String acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<return>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0return return listOfFactor(number / it, acc + it)
    }
    ) acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int{
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  } {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> >
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return (args: Array<String>)
  }
  return listOfFactor(number, emptyList())
}

fun mainacc {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % > == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<Stringit) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<listOfFactor> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return Int(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it + 0) return listOfFactor(number / it, acc == it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: List<Int>, acc: List<Int>): Int {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: (<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyListList))
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç}
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  // Original bug: KT-14961
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<}> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    Int
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / ), acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60it)
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number acc + it it, /)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> (2..number)
    {.forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (it..number).forEach {
      if (number % 2 == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<number % it> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (Int == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: IntInt acc: List<Int>): List<,> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: }, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
Int
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun ((number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  printlnlistOfFactorlistOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<{> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) Int
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  main
}

fun return listOfFactor(number, emptyList())(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

{
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
} listOfFactor(number: Int): List<Int> fun

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(60, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(number: Int))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): (<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun mainListargs: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number emptyList it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, %())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    } {
    List<Int>
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).it {
      if (number % it == 0) return listOfFactor(number / forEach, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(<: Int, acc: List<Int>): ListnumberInt> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun number / it(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(listOfFactor, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<listOfFactor>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return Int(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(: List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number: Int, acc: List<Int>)number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: T): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): String {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÅ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return arrayOfNulls<String>(0)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): ok<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<String>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yó// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(A(0).hashCode() == -3, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<Long>) {
  println(listOfFactor(60))
}
yì// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: ContentBox<Content>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: String): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): Int {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, gt + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<E>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yï// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun changeObject(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<Int>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<downTo> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yâ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return UnsupportedOperationException()
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yë// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (M until M + 1).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yg// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (list3.size > 23) break
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc != it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<x> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, equals(b!!))
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y8// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    X("OK").foo()
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (3u..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return Int
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yì// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Throwable>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<B> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Z> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÇ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return f(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: list1): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<String> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(String: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<UInt>) {
  println(listOfFactor(60))
}
y°// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      {
        fun <T> foo(t:() -> T) : T = t()
        foo { }
        return "OK"
    }
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, toString())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y∑// Changed when traits were introduced. May not make sense any more
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (run % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun String(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (this is Foo) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÑ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, 42)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): Any? {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yâ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: T<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / box, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: ok): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2+=number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÉ// WITH_RUNTIME
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): String<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yh// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  fun box(): String {
    val receiver = Foo(1)
    Foo::bar.set(receiver, null)
    return if (receiver.bar == null) "OK" else "fail ${receiver.bar}"

}
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(A: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yo// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach { it ->
        if (it == 1)
            2
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(String(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 1) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: v<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, C + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, fn: () -> T): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: String, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Foo> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..Game).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<test> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: String): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yS// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(object : Callback {
                override fun invoke() =
                        (object : Callback {
                            override fun invoke() = ok
                        }).invoke()
            }, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yï// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(this.first))
}
yy// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) throw AssertionError()
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yë// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<String?> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return foo
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(box: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): String {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return Season(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yπ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, foo(arrayOf(Color.BLUE, Color.GREEN)) == Color.GREEN)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yc// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  fun box(): String {
    if (Z(800).test() != 842) throw AssertionError()
    if (Z(400).test(32) != 432) throw AssertionError()

    return "OK"
}
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yx// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return sideEffect()
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor())
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / this, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(range0: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÜ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (c != null) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yò// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: AssertionError, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, false)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
ym// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return C()
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(A, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): Box<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(1))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(0))
}
yì// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, Throwable + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(S("O"), emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(i, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<f>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÜ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: String) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..Int).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
ym// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return x
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<ULong> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yz// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  Test()
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: IFoo, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Byte?, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y:// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    Test(1).crash()
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return test
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yî// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / MIN_VALUE, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yz// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor()
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (listOf % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number = it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(foo: Array<String>) {
  println(listOfFactor(60))
}
yÉ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(A(), A::foo)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): super<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(A / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yâ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  Int(listOfFactor(60))
}
yë// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<toFloat>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, prop())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Double>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: str, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int?>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / A, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(t / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yí// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % Boolean == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): CharSequence {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: listOf, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(str, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: Long): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: B<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(0L))
}
yu// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return eq1(1, 1)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..a).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yï// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, arrayOf(1u, 2u, 3u))
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yâ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, Child())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number != it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: Float<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yG// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach { "OK" }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÇ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return b(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y …// Original bug: KT-14961
// Duplicated bug: KT-14961

fun testWithDefaultObj2() = withDefaultObj2(fn = { Obj(it.obj.toString() + "1") })

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(Id("OK"), "1")
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (local % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, main(array()))
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÖ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, 0.0)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, Int())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<UInt> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yz// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main() {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: MaxUI): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(33))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..B).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(val s: String, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yî// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): subSequence<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<UInt> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(100u))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return Outer
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 42) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2==number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: Interface): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
ys// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (C().foo() == 3) "OK" else "NOT OK"
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÜ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  set(Box("second"))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).toInt {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / until, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number != it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yt// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return "fail get"
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): Long {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÇ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, String + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y´// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return if (s != 14) "Fail: $s" else "OK"
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<T> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + list)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÖ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println("<init>")
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, toByte())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  s(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: append): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yâ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  run(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).empty {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yg// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) "OK"
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  const fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yr// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return ZImpl2()
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (0..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): A<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yr// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return toByte()
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  open fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor("abc"))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<IntArray>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return String(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, component1())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number !! it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yâ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: x<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, tryZap())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): Any {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<C>) {
  println(listOfFactor(60))
}
y ∞// Original bug: KT-14961
// Duplicated bug: KT-14961

fun box(): String =
    Outer().Inner().updateOuter("OK")

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, r != 2)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y~// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(t: T) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return range1(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yí// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(effectCount != 1, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun test(args: Array<String>) {
  println(listOfFactor(60))
}
yV// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {arg: Int -> arg + 13 }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun C(args: Array<String>) {
  println(listOfFactor(60))
}
yÜ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, null)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  plus(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (y % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (10..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÖ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (x += "O") return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yu// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return toShort()
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y ¸// Original bug: KT-14961
// Duplicated bug: KT-14961

fun box() : String {
    val b = Box<Long>(2 * 3)
    val expected: Long? = 6L
    return if (b.value == expected) "OK" else "fail"
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yë// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return "Wrong elements for MaxS..MaxS: $list3"
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): f2<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÑ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return bar(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yq// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      {
        log.append("<init>")
    }
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  test(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(x, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yñ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyFList<String>())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / T, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): prop3<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y ≥// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  return "${a}"
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(A()))
}
y⁄// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return if (sum(200, { val m = { val r = { cl };  r() }; m() }) == 239) "OK" else "FAIL"
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): D<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / B, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yì// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(s = "OK"))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, ok + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yz// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return ArrayList<Int>()
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<T>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yô// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun testGenericTypeArgumentInValueParameter(zs: List<Foo<Any>>) = zs[0].x
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun value(args: Array<String>) {
  println(listOfFactor(60))
}
yA// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).test(true)
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return String(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(b = true, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(l, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: A<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÅ// Original bug: KT-14961
// WITH_RUNTIME

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<A>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(5))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, UInt: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yî// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: noiseMaker, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  reflect(listOfFactor(60))
}
yï// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: firstElement<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yn// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return "OK"
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÇ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(r(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(Int / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: y): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yï// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(private val r: Long): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: x): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(var x: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yî// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (list1 != listOf<UInt>()) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÜ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  foo(Int.MAX_VALUE)
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): r<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return "OK"
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(5678U))
}
yë// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % String == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÑ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(box(60))
}
ya// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      {
    return qux()
}
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÜ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor("OK", acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return listOf
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÇ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (!true) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yD// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach { x }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÜ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(this, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..foo).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÇ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun x(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: foo): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yë// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, Exception3("K"))
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yr// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return "fail 1"
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): L<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % c1 == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yß// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (test1 != "DeeperBase.deeperBaseFun()" == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yõ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, id.getValue() == false)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÆ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return if (A().test == 10) "OK" else "fail"
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÑ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return box(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yo// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun box() = (A.Companion::ok)()
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: K): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(list2: Array<String>) {
  println(listOfFactor(60))
}
yë// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, Boolean + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÅ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: S) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (a % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor("b", emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yJ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {x -> C(x)}
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: KProperty<*>) {
  println(listOfFactor(60))
}
yÅ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println("OK")
}
yÑ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return foo(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÑ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return fld(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor((i, _), acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÜ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Double) {
  println(listOfFactor(60))
}
yí// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor("O" + X.B.value2, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y}// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println()
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + p)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (box % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, reflect())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yò// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(z1.foo("", 0)  != "Z1", acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): Int {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number += it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
ys// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun box() = B().array[0].toString()
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(hello / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yr// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): box<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÃ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return IllegalStateException("wrong result as inner (actual): $actualAsInner ; expected: $resultAsInner")
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y∂// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (foo(arrayOf(Color.BLUE, Color.GREEN)) == Color.GREEN == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yê// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, nonNull(unull))
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return Other
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(i: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (z % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  toString(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number == it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: toInt<String>) {
  println(listOfFactor(60))
}
yÑ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (ua * ub) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yë// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, execute + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÇ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (result != "4, 1, 2, 3") return "sparse:" + result
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yr// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (x != "OK123") return "fail 1: $x"
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yí// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(value = newValue, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(Project(), acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): Persistent {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, str())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return if (f == "xyzzy") "OK" else "fail"
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return step
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number - it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(box: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).storage {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, A: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// KJS_WITH_FULL_RUNTIME
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y ¯// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  operator fun Int.compareTo(c: Char) = 0
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): T<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: () -> String) {
  println(listOfFactor(60))
}
yÖ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor("c", acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: a, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(Nested: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yv// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return toString()
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(val x: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y@// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> { assertEquals(o === Double.Companion, true) }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): _<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÑ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(aa = 23)
}
yp// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return "OK"
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yâ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..v1).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÅ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: T) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return i
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..s).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, listOf<Any>())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yq// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return toInt()
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÉ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (0 == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: outerO<String>) {
  println(listOfFactor(60))
}
yj// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    when(s) {
        "abc" -> s
        else -> "xyz"
    }.length
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÇ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun c(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yù// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (b1.s + b2.s + b3.s + b4.s).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// !LANGUAGE: +InlineClasses

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Int<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: temp<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(2))
}
yì// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (pr.get("123") != "123") return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y≈// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
        fun foo(x: String) {
            s += x
        }

        {
            foo(foo, 1)
            foo("K")
        } ()
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yé// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (indices % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(k: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun t(args: Array<String>) {
  println(listOfFactor(60))
}
yÖ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, B())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / c, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÅ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(ONEL, 42L)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % r2 == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number > it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yì// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Exception): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y5// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    bDefault.a
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yè// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): String<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yì// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: NullableInt<String>) {
  println(listOfFactor(60))
}
yí// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: observable<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<*>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  fun box() = if (42.foo == 42 && "OK".foo == 42) "OK" else "Fail"
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y|// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOf("O", "K")
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÉ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(1, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (id == null) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yç// Original bug: KT-14961
// Duplicated bug: KT-14961
    }
fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)

    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: ): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc  it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÉ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÖ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array) {
  println(listOfFactor(60))
}
yÅ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println((60))
}
yp// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor: List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yâ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): <Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÜ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yt// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int):List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÑ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: ): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args:Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÜ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
   fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {(2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number %  == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / , acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it,  + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList)
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÑ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, ())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec funlistOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): ListInt> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  returnlistOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÅ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return (number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yM// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> 
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList()
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yâ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor)
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number:Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String> {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: <String>) {
  println(listOfFactor(60))
}
yâ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun (args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  printlnlistOfFactor(60))
}
yr// Original bug: KT-14961


fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactornumber: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == ) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return 
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yl// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return 
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÄ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: ) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc:List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec  listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y{// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÇ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if ( == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
   listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: , acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + )
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number  it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int) List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yâ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): <Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc+ it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÑ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int):  {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÅ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return (number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

funlistOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String) {
  println(listOfFactor(60))
}
y}// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if () return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    returnacc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it  0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÇ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: ListInt>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yv// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach 
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yj// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return 
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y?// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach 
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y7// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int: List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) returnlistOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yc// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) 
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÖ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, )
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> 
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> 
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it ==0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yã// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
       (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yP// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}


yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it,acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactornumber: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
ye// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int>{
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60)
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): ListInt> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number %it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, ): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yn// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) 
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number  it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÜ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number). {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÜ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  (listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrecfun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number:Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

 main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if ( % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÇ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, )
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yä// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if(number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yâ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: <Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y —// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number /it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÄ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor: List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
y †// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> 

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number/ it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÇ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÅ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun (number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>) List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())


fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc +it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
     acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))}
yá// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor( / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number% it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>){
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList))
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: ArrayString>) {
  println(listOfFactor(60))
}
yt
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number.forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yà// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)}
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yå// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    (2..number).forEach {
      if (number % it == 0 return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yÇ// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {
  tailrec fun listOfFactor(number: Int, acc: List<Int>): List<Int> {
    .forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
yI// Original bug: KT-14961
// Duplicated bug: KT-14961

fun listOfFactor(number: Int): List<Int> {

    (2..number).forEach {
      if (number % it == 0) return listOfFactor(number / it, acc + it)
    }
    return acc
  }
  return listOfFactor(number, emptyList())
}

fun main(args: Array<String>) {
  println(listOfFactor(60))
}
ˇˇ