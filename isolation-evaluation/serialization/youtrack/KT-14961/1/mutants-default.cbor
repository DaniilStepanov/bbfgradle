øiexportTaggdefaultnoriginalSampleyß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
gmutantsüy›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion


val q = false
try
{sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}}
catch(e: Exception){}
finally{}


private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÕ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}


val a = false
when (a) {
 true -> {private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}}
 else -> {private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}}
}


data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y5// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}


val y = false
if (y) {data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}} else {data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}}

y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package 
val f = false
try
{me.viluon.ion}
catch(e: Exception){}
finally{}


sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode
val z = false
try
{(val size: Int, val children: Array<Rope?> = Array(2) { null })}
catch(e: Exception){}
finally{}
 :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÏ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf
val m = true
when (m) {
 true -> {(val data: String)}
 else -> {(val data: String)}
}
 : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‰// Original bug: KT-37845
// Duplicated bug: KT-14961

package 
val q = false
when (q) {
 true -> {me.viluon}
 else -> {me.viluon}
}
.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.
val d = true
try
{ion}
catch(e: Exception){}
finally{}


sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    
val k = true
try
{companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }}
catch(e: Exception){}
finally{}



    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    
val z = false
if (z) {fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)} else {fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)}

}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    
val f = false
try
{internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }}
catch(e: Exception){}
finally{}

}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    
val t = false
try
{val size: UInt
        inline get() = data.length.toUInt()}
catch(e: Exception){}
finally{}

}
y…// Original bug: KT-37845
// Duplicated bug: KT-14961

package 
val y = true
if (y) {me} else {me}
.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‡// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.
val q = true
when (q) {
 true -> {viluon}
 else -> {viluon}
}
.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‰// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = 
val m = false
if (m) {Rope.leafContaining(this, i)} else {Rope.leafContaining(this, i)}

}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(
val o = false
try
{val size: Int}
catch(e: Exception){}
finally{}
, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, 
val o = true
when (o) {
 true -> {val children: Array<Rope?> = Array(2) { null }}
 else -> {val children: Array<Rope?> = Array(2) { null }}
}
) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yﬁ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    
val c = true
when (c) {
 true -> {Rope}
 else -> {Rope}
}
() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) 
val k = false
if (k) {{
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }} else {{
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }}

}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÿ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(
val w = false
if (w) {val data: String} else {val data: String}
) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : 
val g = true
try
{Rope}
catch(e: Exception){}
finally{}
() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y˛// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        
val o = false
when (o) {
 true -> {inline get() = data.length.toUInt()}
 else -> {inline get() = data.length.toUInt()}
}

}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        
val i = false
try
{tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }}
catch(e: Exception){}
finally{}

    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yŒ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(
val m = false
if (m) {i: Int} else {i: Int}
): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÀ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = 
val m = true
if (m) {Rope} else {Rope}
.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.
val c = true
try
{leafContaining(this, i)}
catch(e: Exception){}
finally{}

}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÎ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = 
val a = true
when (a) {
 true -> {Array(2) { null }}
 else -> {Array(2) { null }}
}
) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y„// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(
val t = false
if (t) {f: (child: Rope) -> Boolean} else {f: (child: Rope) -> Boolean}
) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        
val c = true
if (c) {for (i in 0 until size.toInt()) if (f(children[i]!!)) break} else {for (i in 0 until size.toInt()) if (f(children[i]!!)) break}

    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y€// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = 
val v = true
if (v) {data.length.toUInt()} else {data.length.toUInt()}

}
yÔ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = 
val b = false
if (b) {when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }} else {when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }}

    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): 
val x = false
try
{Pair}
catch(e: Exception){}
finally{}
<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÈ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.
val o = false
when (o) {
 true -> {leafContaining}
 else -> {leafContaining}
}
(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yﬂ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = 
val y = true
when (y) {
 true -> {Array}
 else -> {Array}
}
(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y»// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (
val e = true
if (e) {i} else {i}
 in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: 
val u = true
try
{UInt}
catch(e: Exception){}
finally{}

        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = 
val k = true
try
{data.length}
catch(e: Exception){}
finally{}
.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.
val i = true
try
{toUInt()}
catch(e: Exception){}
finally{}

}
y‰// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(
val x = true
when (x) {
 true -> {rope: Rope}
 else -> {rope: Rope}
}
, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yŒ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, 
val h = false
if (h) {i: Int} else {i: Int}
): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÀ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (
val s = true
if (s) {rope} else {rope}
) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: 
val r = false
try
{Int}
catch(e: Exception){}
finally{}
, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: 
val r = true
try
{Array}
catch(e: Exception){}
finally{}
<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‚// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) 
val x = true
when (x) {
 true -> {{ null }}
 else -> {{ null }}
}
) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yﬂ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    
val z = false
when (z) {
 true -> {Rope}
 else -> {Rope}
}
() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÓ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 
val b = true
when (b) {
 true -> {0 until size.toInt()}
 else -> {0 until size.toInt()}
}
) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) 
val g = true
try
{if (f(children[i]!!)) break}
catch(e: Exception){}
finally{}

    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: 
val n = false
try
{String}
catch(e: Exception){}
finally{}
) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÀ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : 
val h = true
if (h) {Rope} else {Rope}
() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = 
val u = true
try
{data}
catch(e: Exception){}
finally{}
.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.
val r = true
try
{length}
catch(e: Exception){}
finally{}
.toUInt()
}
yŒ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.
val j = false
if (j) {toUInt} else {toUInt}
()
}
yÃ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): 
val h = false
if (h) {Pair} else {Pair}
<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yï// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> 
val m = true
if (m) {{
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }} else {{
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }}

            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> 
val v = false
try
{Pair(rope, i)}
catch(e: Exception){}
finally{}

        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yﬁ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: 
val p = false
when (p) {
 true -> {Int}
 else -> {Int}
}
): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(
val o = true
try
{this}
catch(e: Exception){}
finally{}
, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, 
val i = false
try
{i}
catch(e: Exception){}
finally{}
)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y…// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(
val e = false
if (e) {2} else {2}
) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) 
val z = false
try
{{ null }}
catch(e: Exception){}
finally{}
) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y»// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 
val m = true
if (m) {0} else {0}
 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 
val n = true
try
{until}
catch(e: Exception){}
finally{}
 size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until 
val w = false
try
{size.toInt()}
catch(e: Exception){}
finally{}
) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yY// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                
val r = true
when (r) {
 true -> {rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }}
 else -> {rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }}
}


                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                
val y = false
try
{throw IllegalStateException()}
catch(e: Exception){}
finally{}

            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÀ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> 
val b = true
if (b) {Pair} else {Pair}
(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yﬁ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(
val d = true
when (d) {
 true -> {this}
 else -> {this}
}
, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÀ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { 
val f = true
if (f) {null} else {null}
 }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (
val a = true
try
{child: Rope}
catch(e: Exception){}
finally{}
) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until 
val y = true
try
{size}
catch(e: Exception){}
finally{}
.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.
val b = false
try
{toInt()}
catch(e: Exception){}
finally{}
) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (
val t = false
try
{f(children[i]!!)}
catch(e: Exception){}
finally{}
) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) 
val l = true
try
{break}
catch(e: Exception){}
finally{}

    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yﬂ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: 
val c = false
when (c) {
 true -> {Rope}
 else -> {Rope}
}
, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y // Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: 
val a = true
if (a) {Int} else {Int}
): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yﬂ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                
val y = false
when (y) {
 true -> {rope}
 else -> {rope}
}
.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yU// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.
val z = false
when (z) {
 true -> {iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }}
 else -> {iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }}
}


                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw 
val l = true
try
{IllegalStateException()}
catch(e: Exception){}
finally{}

            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yﬁ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<
val e = true
when (e) {
 true -> {Leaf}
 else -> {Leaf}
}
, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, 
val l = true
when (l) {
 true -> {Int}
 else -> {Int}
}
> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÃ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { 
val f = false
if (f) {null} else {null}
 }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yœ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> 
val e = false
if (e) {Boolean} else {Boolean}
) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.
val g = true
try
{toInt}
catch(e: Exception){}
finally{}
()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (
val h = false
when (h) {
 true -> {f}
 else -> {f}
}
(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y„// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is 
val i = true
when (i) {
 true -> {InnerNode}
 else -> {InnerNode}
}
 -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yﬂ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.
val b = false
when (b) {
 true -> {iter}
 else -> {iter}
}
 { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw 
val c = true
try
{IllegalStateException}
catch(e: Exception){}
finally{}
()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÃ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is 
val p = false
if (p) {Leaf} else {Leaf}
 -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yﬁ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(
val q = true
when (q) {
 true -> {rope}
 else -> {rope}
}
, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, 
val f = true
try
{i}
catch(e: Exception){}
finally{}
)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yﬁ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<
val z = true
when (z) {
 true -> {Leaf}
 else -> {Leaf}
}
, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÀ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, 
val m = false
if (m) {Int} else {Int}
> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter 
val p = true
try
{{ child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }}
catch(e: Exception){}
finally{}


                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÃ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<
val u = false
if (u) {Rope} else {Rope}
?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: 
val t = true
try
{Rope}
catch(e: Exception){}
finally{}
) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y’// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(
val g = false
if (g) {children[i]!!} else {children[i]!!}
)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yO// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter 
val h = true
when (h) {
 true -> {{ child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }}
 else -> {{ child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }}
}


                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(
val q = false
try
{children[i]}
catch(e: Exception){}
finally{}
!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y…// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]
val g = true
if (g) {!!} else {!!}
)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    
val m = true
if (m) {if (i < 1) return leafContaining(child, i)
                    false} else {if (i < 1) return leafContaining(child, i)
                    false}

                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(
val q = true
try
{children}
catch(e: Exception){}
finally{}
[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÃ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { 
val m = true
if (m) {child} else {child}
 ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    
val c = false
try
{if (i < 1) return leafContaining(child, i)}
catch(e: Exception){}
finally{}

                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    
val i = false
try
{false}
catch(e: Exception){}
finally{}

                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y€// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[
val n = true
when (n) {
 true -> {i}
 else -> {i}
}
]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (
val w = false
try
{i < 1}
catch(e: Exception){}
finally{}
) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÁ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) 
val t = false
if (t) {return leafContaining(child, i)} else {return leafContaining(child, i)}

                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y›// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (
val a = false
try
{i}
catch(e: Exception){}
finally{}
 < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y€// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i 
val t = true
when (t) {
 true -> {<}
 else -> {<}
}
 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y€// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 
val l = true
when (l) {
 true -> {1}
 else -> {1}
}
) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‹// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return 
val l = true
try
{leafContaining(child, i)}
catch(e: Exception){}
finally{}

                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yË// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return 
val c = true
when (c) {
 true -> {leafContaining}
 else -> {leafContaining}
}
(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y‡// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(
val j = false
when (j) {
 true -> {child}
 else -> {child}
}
, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y€// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, 
val s = true
when (s) {
 true -> {i}
 else -> {i}
}
)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package (me).viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) ({
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    })
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) ({ null })) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until (size.toInt())) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) (break)
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is (InnerNode) -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<(Rope)?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f((children[i]!!))) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }!!
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()!!
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining!!(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i!! in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array!!<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope!!() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int!!): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode!! -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter!! { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i!!)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i!!]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): (Pair<Leaf, Int>)? = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: (UInt)?
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: (Int)?, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    (Rope)?() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: (String)?) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : (Rope)?() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): (Pair<Leaf, Int>)? = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: (Int)?): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: ((child: Rope) -> Boolean)?) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: (Rope)?, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: (Int)?): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<(Leaf)?, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, (Int)?> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> (Boolean)?) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is (InnerNode)? -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is (Leaf)? -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<(Leaf)?, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, (Int)?> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: (Rope)?) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope!!.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length!!.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i == 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon(ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining.rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(i, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, rope)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode((), val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toIntval size: Int) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, )> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2Int { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    private data
}

fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i) class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package =.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> me when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(return leafContaining(child, i), i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) rope: Rope
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until sizeRopetoInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : .() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope:leafContaining(this, i)
}

private data class InnerNode(val size. Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yßreturn leafContaining(child, i)
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) // Original bug: KT-37845
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<(?> = Array(2) { null }) :
    RopeRope) {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun length(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.leafContaining.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: 0 until size.toInt(), val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in Int) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (Rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNodeStringval size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: () : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)(val data: String) break
    }
}

data class Leaf) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Leaf> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Int(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): inline = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal Pair<Leaf, Int> fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)data break
    }
}

data class Leaf(val ): String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: size.toInt()): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until Int) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, InttoUInt = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.>()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, IntArray(2) { null } = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = >) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when }rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
(

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    toInt {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.Rope()()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                Rope?.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<rope> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun val(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(iter data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package ..viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = datamelength.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun { null }(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) leafContaining) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Int(rope, i)
        }
    }


    fun leafContaining(i: Pair): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                :

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f} (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: size.toInt(), i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until Rope) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return data.length
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = leafContaining(child, i).toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<(> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUIntRope?)
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object 2


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array({
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yßrope
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                // Original bug: KT-37845.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) data
    }
}

data class Leaf(val break: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        data
    }
}

data class Leaf(val for (i in 0 until size.toInt()) if (f(children[i]!!)) break: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        String
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: }) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Rope> = Int.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

data class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private sealed class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package meRope()viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    . {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (}) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            rope
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, (> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> PairIntrope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        )
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)} break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                } fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                tailrec

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: toIntchild: Rope) -> Boolean) {
        for (i in 0 until size.(()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package 2.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(me.viluon) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Rope, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Leaf.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope{
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            } Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> :
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package tailrec.viluon.ion

sealed class Rope {
    companion object {
        me fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.rope

sealed class Rope {
    companion object {
        tailrec fun leafContaining(ion: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<i, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, Leaf)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.i

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<}, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        Leaf
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = (child: Rope) -> Boolean.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: Rope) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return Int(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: leafContaining, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining->: Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf (rope: Rope, i: Int) Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    data
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

false class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(val: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, rope children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (children) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(i < 1[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) UInt) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: { null }
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, Boolean)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> i) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) toInt) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.{ null }()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int) val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get(, = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(thisRope() i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    , {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

0 class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in sealed until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is i -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, InnerNode)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, Pair): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> i: Int(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Intdata class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
} val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

,
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    children[i]!! fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(internal inline)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { Pair ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> child(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNodeRope?val size: Int, val children: Array<(> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (() {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Arrayrope2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(f, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(child: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        ) fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get(tailrec = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

class data private InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

toInt() class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.sealed) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(:, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val sizechild Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: f: (child: Rope) -> Boolean): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(Int) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, children[i]!!> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(Int)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): String = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: Pair<Leaf, Int>) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContainingdata
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val (child, i): String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<null, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { Leaf }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.child.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(viluon, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, val)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    i size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(ropechildren[i]!! i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(,)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if IllegalStateExceptioni < 1) return leafContaining(child, i)
                    false
                }

                throw (()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw val
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    IllegalStateException() size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.(children[i]!!) { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (fiter) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    UInt
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: false
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()} if (f(children[i]!!)) break
    )
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package until.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 me.viluon size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) Int leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: return, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode) :
    Rope((val size: Int, val children: Array<Rope?> = Array(2) { null }) {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> >
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int{ = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]))) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt(!!
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.Leaf.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<viluon, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i, Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf: Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Rope> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Int() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is : -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(fLeaf (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: (i: Int), i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContainingRope: Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Rope() = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Array<Rope?> {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec inline get() = data.length.toUInt() leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        fun
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): length = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.Pair<Leaf, Int>.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class internal inline {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    Rope fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<data, Int> = Rope.leafContaining(this, i)
}

private Leaf class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int)if (f(children[i]!!)) break Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) :
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
})
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() i

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Ropeinline) {
    internal ( fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) Array
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = return leafContaining(child, i)(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed false Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    class
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i i 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[<]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, val data: String> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(Int) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Array<Rope?>): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Int = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until sizetoUInttoInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length..()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, )> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope(Int {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNodetoUInt() :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.(val size: Int, val children: Array<Rope?> = Array(2) { null })
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { size ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val child: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            (child, i) -> {
                rope.iter { child ->
                    if (i < 1) return leafContainingis InnerNode
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContainingirope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[(]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, data> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

Int class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (ropetoUInt() {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.)
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter (

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining{ child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, ))
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Inti: Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i !! 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]<)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            } -> InnerNode
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) inline get() = data.length.toUInt()
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        break
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { Rope }) :
    null() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): PairdataLeaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

< class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException(val
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf() data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw )
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt(IllegalStateException()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, ()
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInti)) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed ( Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUIntclass)
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: toUInt): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.Int()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContainingdata class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

(
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope(child: Rope) -> BooleanleafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: .) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    Leaf object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is companion -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): PairiLeaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[<]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(length!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.children[i].toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) UInt
    }
}

data class Leaf(val data: String) : Rope() {
    val size: break
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, UInt)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: i
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) iter) :
    Rope() {
    internal inline fun { null }(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    (children[i]!!)
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (fif (i < 1) return leafContaining(child, i)
                    false) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        Rope fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<tailrec?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            -> -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) is InnerNode Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class 0 {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in Rope until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                i
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[throw IllegalStateException()]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package Rope().viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    me {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, { null })
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) i) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(:, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val childrenrope Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun :(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val sizeleafContaining UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for breaki in 0 until size.toInt()) if (f(children[i]!!)) (
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: )<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)Array break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in f) if (0 until size.toInt()(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> :) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val sizeBoolean UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw 2()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(IllegalStateException) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) val children: Array<Rope?> = Array(2) { null } leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, return) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.Rope
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: leafContaining(this, i)) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: (val data: String)<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class LeafArray : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) throw
                    false
                }

                return leafContaining(child, i) IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    this


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (val size: Int) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(rope, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt(Rope()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : ) {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<i?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[Rope]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

Rope
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<rope, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(Leaf, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaflength : Rope() {
    val size: UInt
        inline get() = data.(val data: String).toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) if (f(children[i]!!)) break
        for (i in 0 until size.toInt()) {
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if Stringf(children[i]!!)) break
    }
}

data class Leaf(val data: () : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, Rope children: Array<val?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, ()> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : RopeInt {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Array> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Int(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<(f: (child: Rope) -> Boolean), Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iterLeaf {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed child Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { class ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val ?: Array<Ropechildren> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int)) Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope: -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<,, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(thisLeaf i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    Rope
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<if (i < 1) return leafContaining(child, i)
                    false?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, ()> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    RopeInt {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, children)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(i[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i!! Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]:)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: for, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        Int (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter me.viluon.ion

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, val data: String> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(Int) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.!!

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]ion)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: length): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.Int.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(children[i]!!, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(child)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object return leafContaining(child, i)
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) {
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (->) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf rope Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
break

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) // Duplicated bug: KT-14961
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package ,.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leafme Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Boolean() {
    internal inline fun iter(f: (child: Rope) -> Rope) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, :)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(fi (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.UInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: toInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw inline()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        IllegalStateException get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw iter()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun IllegalStateException(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope { null }
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) {) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    f(children[i]!!)
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (if (i < 1) return leafContaining(child, i)
                    false) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i{
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    } Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) :
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): i: Int = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(Pair<Leaf, Int>): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

{ class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) sealed
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, 2)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(i) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Int, i: Int): Pair<Leaf, Rope> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

String class Leaf(val data: data) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContainingRoperope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    (() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Boolean): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Int) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.i { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, iter)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i Int 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, <> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iterdata {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = (f: (child: Rope) -> Boolean).length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i > 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?< = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode. :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size(val size: Int, val children: Array<Rope?> = Array(2) { null })toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Rope<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Array) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = toInt()(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.Array) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in ( until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope0) {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when irope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, ()
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<if (i < 1) return leafContaining(child, i)
                    false, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    Leaf
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is <Leaf, Int> -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): PairLeaf = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: 2<Rope?> = Array(Array) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> )(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)Pair break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child this
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(->, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    toInt


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.}()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.() { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Ropeiter {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1( return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for )i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class toUInt {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.Rope()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.Rope()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : toInt() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining((), i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Ropechild {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

)

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2package me.viluon.ion { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.Rope

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is !! -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]InnerNode)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter IllegalStateException

                throw { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(childrendata!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = [i].length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(:, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) this Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Rope()<Rope?> = Array(2) { null }) :
    Array {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = String
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(rope, i)children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            Leaf
        }
    }


    fun leafContaining(i: Int): Pair<is Leaf -> Pair(rope, i), Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(class[i]!!)) break
    }
}

data children Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array([i]) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children2!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.Rope { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    iter() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, Rope())
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : i {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    ( inline fun iter(f: internalchild: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.((this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (fleafContainingchildren[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter : child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f{ (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: i < 1): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (Int) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    : object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (childcompanion Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package inline get() = data.length.toUInt()

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        me.viluon.ion
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            ( InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateExceptionis)
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < internal inline) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    1 fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, iif
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) ) (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> Leaf
            is {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            } -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yßval data: String
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(// Original bug: KT-37845) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(for, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        child (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    } }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) null
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> Boolean
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> {) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: InnerNode, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class Rope(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<{ null }?> = Array(2) Rope) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            (rope, i)
            is Leaf -> Pair}
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Rope(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Pair() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array({
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}) { null }) :
    Rope() 2

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<(child: Rope) -> Boolean, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: Leaf) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, iRope? Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<:> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    { object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) companion null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContainingRope: Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    (rope: Rope, i: Int)() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    data leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

fun class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): 2<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(Pair) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (inline in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        i get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<), Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }Leaf :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, return leafContaining(child, i)> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) Int
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, data> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = Int.length.toUInt()
}
yß// Original bug: KT-37845
data

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val // Duplicated bug: KT-14961: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is val -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(InnerNode size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i{
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() )
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContainingArray: Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = (i: Int)(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, )> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope(Int {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<)?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)Rope break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Ropedata.length {
    val size: UInt
        inline get() = ().toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> UInt) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: Boolean
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int:: Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child) Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(f, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (this(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (data.length) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = f(children[i]!!).toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    break object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) companion
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = ).leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()Rope if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: ->, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) Rope Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode until {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 -> size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() . data=length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: ( = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (fArray<Rope?>children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: data): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

Int class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) children Boolean) {
        for (i in 0 until size.toInt()) if (f(->[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter )

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt({ child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(val, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(rope data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.size

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until ion.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size) UInt
        inline get() = data.length.toUInt(:
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iterRopef: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : (() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                break.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) rope
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(children) {
        for (i in 0 until size.toInt()) if (f(f: (child: Rope) -> Boolean[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: { null }, val children: Array<Rope?> = Array(2) Int) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope (f: (child: Rope) -> Boolean)
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter{ {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter toInt child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.{()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) String Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: ->) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContainingval data: String
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf((this, i)) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : data {
    val size: UInt
        inline get() = Rope().length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Leaf> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Int(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<break, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) Leaf
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(is InnerNode: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            rope -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    in leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i fun 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (fdata class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}) break
    }
}

(children[i]!!)
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNodef(children[i]!!) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if ((val size: Int, val children: Array<Rope?> = Array(2) { null })) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope(data {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = ).length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    Int
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is Leaf -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is InnerNode -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package )

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!me.viluon.ion) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: String): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: Int) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (UInt(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: f
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int)( Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if :f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> val size: UInt
        inline get() = data.length.toUInt() when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    =
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                Rope
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : throw IllegalStateException()() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in data.length.toUInt() until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = 0
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int)children Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(:[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.Leaf

                throw IllegalStateException()
            }
            is iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                } -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion children {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val object: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> PairArray<Rope?>rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: ( = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): ) = when (ropePair<Leaf, Int> {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (leafContaining) return i < 1(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(val, i)
}

private data class InnerNode(val size: Int, this children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i : 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) < Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (( in 0 until size.toInt()) if (fichildren[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContainingnullchild, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { ( }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            { null } -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) is Leaf) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = .(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = dataArraylength.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        children
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    (() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toIntRope)) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) Rope
    }
}

data class Leaf(val data: String) : if (f(children[i]!!)) break() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(until) {
        for (i in 0 f: (child: Rope) -> Boolean size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaininglength
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.(this, i).toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContainingRopei: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : (() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Ropeval i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(, size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) )
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt({
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { for }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        null (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: :): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) Int
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, ))
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt(i) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        size fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until tailrec.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, toInt()): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.i: Int) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining,: Pair<Leaf, Int> = Rope.leafContaining(this(i: Int) i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (Pair(rope, i)) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> rope
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = {(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) Array
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, ()> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUIntInt
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<size, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val Leaf: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw length()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.IllegalStateException.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, ): Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope(i {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> i Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (= in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int( = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f>children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

leafContaining class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.sealed(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) val size: UInt
        inline get() = data.length.toUInt()) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    { null }
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object i
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[{]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.is

                throw IllegalStateException()
            }
            iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                } Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, :)
        }
    }


    fun leafContaining(i: Int)i Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (length < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.i.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if ((val data: String)) break
    }
}

data class Leaff(children[i]!!) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

: class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, isealed Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContainingthis: Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining((rope: Rope, i: Int), i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Rope?): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Int> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object (val size: Int, val children: Array<Rope?> = Array(2) { null })
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode{ :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int{: Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() )
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class is {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            Rope Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: fun): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline Int iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { Boolean ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> child) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun :(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) leafContaining Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is (val data: String) -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class LeafInnerNode : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int)i Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (: in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode{ :
    Rope() (val size: Int, val children: Array<Rope?> = Array(2) { null })
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, (> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContainingIntchild, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, toInt)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.i()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child inline
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal -> fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

. mepackageviluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }get :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline )() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object =


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    } data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<RopeRope> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : ?() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Pair<Leaf, Int>): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Int = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object Rope


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining((val size: Int, val children: Array<Rope?> = Array(2) { null }), i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNodechild :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(fun, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline this iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluonchildion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (.: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> { Array(2) = null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: get) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline Rope() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is UInt -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: Leaf
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<{
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) Leaf
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<this, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(Leaf, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (Rope()) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : i < 1 {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when Leafrope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is ( -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = ) (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope(when {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(iRope? Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<:> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package i.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, me)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, f> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(Int: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Int<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Pair, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when f(children[i]!!)rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (() break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, Rope)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: i) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: {
    val size: UInt
        inline get() = data.length.toUInt()
}, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() Rope
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun ((i: Int): Pair<Leaf, Int> = Rope.leafContainingleafContainingthis, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContainingdatai: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

( class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<null, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { Leaf }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: child: Rope): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (Int) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Array<Rope?>, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Rope = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package meRopeviluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = ..leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until Rope) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : size.toInt()() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): PairLeaf = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class <Leaf, Int>(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: ), val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> BooleanInt {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child. Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length:toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> toInt()
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.{) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<toUInt(), Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.Leaf
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i,
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope) i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.String

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß:
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i// Original bug: KT-37845 Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): InnerNode<Leaf, Int> = when (rope) {
            is Pair -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    ) (i < 1) return leafContaining(child, iif
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = > (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?when = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope-> i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf , Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<internal, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    Leaf inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package :.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(ropeme Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if () < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException(i
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<i, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, Leaf)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                ()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Ropethrow IllegalStateException() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    Pair<Leaf, Int> object {
        tailrec fun leafContaining(rope: Rope, i: Int): companion = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, size> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until Int.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
toInt

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.// Duplicated bug: KT-14961()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() f(children[i]!!)
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if ({) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array[i]2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children(!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): ()<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : RopePair {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        if (f(children[i]!!)) break fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) tailrec
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i ) 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope(in {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.) { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope(iter {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(ropenull i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { , }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is private data -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

InnerNode class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leafsize Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until ,.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (data < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val i: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope)iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i.
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is { -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() Leaf
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

()

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toIntsealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode() :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt(val size: Int, val children: Array<Rope?> = Array(2) { null })) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i { 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) < null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Rope(val data: String) : Leaf() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope) i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }, :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) UInt
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: :
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size.toInt(): Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) f
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (return leafContaining(child, i)(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

(rope, i)

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pairpackage me.viluon.ion
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Array> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Int<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContainingIntchild, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, (> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Array(2) { null }, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Rope) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, iinline
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        ) get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int{ null } = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) >) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt(:) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size) UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (() {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iterropef: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope{ i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) , null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) leafContaining
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.{(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    Rope


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): i<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(Pair: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(2): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(i: Int) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining)child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int(: Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(Rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(., i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.lengththistoUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.Array<Rope?>

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: ion = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) leafContaining leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.return(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): break<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) Pair
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
(

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if // Duplicated bug: KT-14961i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is Rope() -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    InnerNode {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                val

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                } size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child!! Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]:)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, UInt)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: i
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.{) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() toInt()
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Rope, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Leaf) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair(val data: String)Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf< : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> (this, i)
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining{
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        this fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(tailrec, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package (child, i).viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContainingme
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Rope()): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Int {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining([i], i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(childrenchild!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(ropesize Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until :.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        , fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Inttailrec val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i( Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: :child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(ropeinline get() = data.length.toUInt() Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        :
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Rope = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Pair<Leaf, Int>() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    rope
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<:, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val childrenLeaf Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { data ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

child class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<{, Int> = when (rope) {
            is InnerNode -> Leaf
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size(val data: String) Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf: : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i0 until size.toInt()
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in )) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun Int(i: leafContaining): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = null
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { Rope.leafContaining(this, i) }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Leaf): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Int -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContainingrope
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair((child, i), i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    children[i]!!() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(Rope)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = ..leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = dataRopelength.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    String
}

data class Leaf(val data: internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            Pair InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> is(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) Leaf
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is { -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (break) f(children[i]!!)
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                <.iter { child ->
                    if (i rope 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is size -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until Leaf.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f0 until size.toInt() (child: Rope) -> Boolean) {
        for (i in :) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope(inline {
    internal ) fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) )
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!return leafContaining(child, i)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: ArrayRopeRope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : <() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yßcompanion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    // Original bug: KT-37845


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) <Rope?>
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Arrayreturn leafContaining(child, i) = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        (
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline gettailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }) = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Rope?> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Int> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is Any -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yü// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<A> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: box) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yª// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    {
    val z = Z()
    val c: C<Double> = z
    val b: B<String, Double> = z
    val a: A<String, Int, Double> = z
    return when {
        z.foo("", 0, 0.0) != "Z" -> "Fail #1"
        c.foo("", 0, 0.0) != "Z" -> "Fail #2"
        b.foo("", 0, 0.0) != "Z" -> "Fail #3"
        a.foo("", 0, 0.0) != "Z" -> "Fail #4"
        else -> "OK"
    }
}
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y∑// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Map<String, Boolean>, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≥// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
    val a = A(1, null)
    if("$a" != "A(x=1, z=null)") return "$a"
    return "OK"
}
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: String): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yó// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf() : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(t: T): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y±// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(AssertionError, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Any): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(Any: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<String, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¨// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: IntArray): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : hashCode() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y<// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter {"$a:$b;"}

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Inner, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (x == 2) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¥// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in testValueParameter(Foo(42)) != 42) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is String -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y∞// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) {
        a
    }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    i() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.String.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(12, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until B().foo(1)) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yõ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(1)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(Foo2, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÆ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { (t: T, u: U) ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> UInt) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yû// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Int = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is String -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÃ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { {
    lateinit var str: String
    var i: Int = 0
    try {
        i = str.length
        return "Should throw an exception"
    }
    catch (e: UninitializedPropertyAccessException) {
        return "OK"
    }
    catch (e: Throwable) {
        return "Unexpected exception: ${e::class}"
    }
} }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y“// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    fun box(): String {
    val list1 = ArrayList<Int>()
    val range1 = 8 downTo 3 step 2
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<Int>(8, 6, 4)) {
        return "Wrong elements for 8 downTo 3 step 2: $list1"
    }

    val list2 = ArrayList<Int>()
    val range2 = 8.toByte() downTo 3.toByte() step 2
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<Int>(8, 6, 4)) {
        return "Wrong elements for 8.toByte() downTo 3.toByte() step 2: $list2"
    }

    val list3 = ArrayList<Int>()
    val range3 = 8.toShort() downTo 3.toShort() step 2
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<Int>(8, 6, 4)) {
        return "Wrong elements for 8.toShort() downTo 3.toShort() step 2: $list3"
    }

    val list4 = ArrayList<Long>()
    val range4 = 8L downTo 3L step 2L
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<Long>(8, 6, 4)) {
        return "Wrong elements for 8L downTo 3L step 2L: $list4"
    }

    val list5 = ArrayList<Char>()
    val range5 = 'd' downTo 'a' step 2
    for (i in range5) {
        list5.add(i)
        if (list5.size > 23) break
    }
    if (list5 != listOf<Char>('d', 'b')) {
        return "Wrong elements for 'd' downTo 'a' step 2: $list5"
    }

    return "OK"
}
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    String() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¨// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, String: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 5 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.this { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Int?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yû// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): String = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Anno() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val String: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yö// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (B()) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<T, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = x.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y∏// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : AbstractList<Content>() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¨// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (String(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yõ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return zi(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yY// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

inline class Foo(val z: String)
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(foo, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÕ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(reifiedIs<MutableCollection<*>>(arrayList), i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yï// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: String) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                ok.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≥// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.parseCatalogs(null)) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(x("aaa")[42]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÌ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    fun box(): String {
    A.x += 1
    if (A.x != 1) return "Fail 1: ${A.x}"

    A.x++
    if (A.x != 2) return "Fail 2: ${A.x}"

    ++A.x
    if (A.x != 3) return "Fail 3: ${A.x}"

    return "OK"
}
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val E1: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val Array: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, String> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val foo2: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yù// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in MaxI..MaxI) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yö// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return A(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, String> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class result(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.id.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 0) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.i.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, Float)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(e[e.size - 1]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yí// Original bug: KT-37845
// Duplicated bug: KT-14961



sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.list3 { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yõ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(s)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: A): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.T()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yd// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { a2 ->
                flag = false
            }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yõ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Int = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≠// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<SlashPlayer> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y2// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.foo()

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 3u) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, n : Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y5// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                (i-M).toInt()

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: String, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): a<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¨// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (doTest(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (box: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val Outer: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        private val s: String
        private var s2: String

        init {
            s = "O"
            s2 = "O"
        }

        fun foo() = s

        fun foo2() = s2

        fun bar2() { s2 = "K" }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yì// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw s()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(a: Any?, b: Any?): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yg// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        operator fun Long.component1() = this + 1
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (Outer < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(a: Double?) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> String) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.foo()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Int() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: init_o): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¿// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (val singleContribution: Double = 0.0) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.B { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val result: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÆ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(0.5, 1.toLong())
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÙ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    @Target(AnnotationTarget.EXPRESSION)
@Retention(AnnotationRetention.SOURCE)
annotation object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = kotlin(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: String
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.listOf { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : X() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(x, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÊ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
    private val fld: String = "O"
        get() = { field }() + "K"

    val indirectFldGetter: () -> String = { fld }

    fun simpleFldGetter(): String {
        return fld
    }
}


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yô// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = UInt.MIN_VALUE
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yü// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    object : Foo {
        override fun xyzzy(x: Any?): String {
           (x as? Bar)?.bar()
            return "OK"
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, IFoo)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≠// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(w, "OK") { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¸// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

class C(val x: String) {
    constructor(n: Int) : this(n.toString())
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1u) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = size.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Base, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, Inner)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[OK]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y∏// Original bug: KT-37845
// Duplicated bug: KT-14961

package (-128).toByte().toString().ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y∏// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    AbstractList<Content>() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: String = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yì// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.C()
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y€// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return "fail 3: $invokeOrder != $expectedInvokeOrder or $result != $expectedResult"
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (Child < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y◊// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (sumFunOnParameters(100, *aI, 200) { 2*it } != 612) return "fail: sumFunOnParameters 1"
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until B("O").a("K").v) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
ye// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
            operator fun invoke(i: Int) = i
        }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): String<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yØ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope("<init>") {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≤// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.intArrayOf(1, 2, 3)
}
yΩ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in testGlobalProperties() != "123IcLong(l=4)") if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (a: Int) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¥// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(MyUInt(1), MyUInt(0))
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (null is Nothing?) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yû// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): String = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¨// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                MIN_VALUE.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[T]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yõ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(i, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> A(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    true
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        operator fun Delegate.getValue(t: Any?, p: KProperty<*>): Int = 1
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> result(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¨// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, listOf)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> String(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yî// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.A(0)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.Z { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y∏// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) throw AssertionError()
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is B -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: String) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Factory(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Int, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÆ// Original bug: KT-37845
// Duplicated bug: KT-14961

package v3.contents.size.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y†// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    operator fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: a1): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    internal open object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¨// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, String)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yü// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.String(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { ok() }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yõ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun xx(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yú// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    open fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yj// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode() :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { () ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yø// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) {
        foo("O") + foo()
    }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y∏// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (foo.minus0 != foo.plus0) return "fail 3"
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package Double.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Any?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until obj.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<String, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y∞// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) return "fail1"
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, _)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                D.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yõ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun nn(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y∂// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (Cls().buffer.toString() != "Cls") return "Fail class"
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yï// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return Foo(1)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≠// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { (y: String) ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yû// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f("OK")) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(42) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÄ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
    D().test(10)
    return "OK"
}
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y†// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(null!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<L, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (x != 5) throw AssertionError("$x")
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: test2): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yô// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw Boolean()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val a: Any?) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.A()
}
yö// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.T(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y†// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(1)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yØ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (Foo.a != 1234) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    B() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yñ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (n > 0) rec(n - 1 + k)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(at: String, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> X) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : expected() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (test(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≤// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (explicitParam != defaultRes) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.T { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(String[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y—// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    {
        if (this === a) return "Fail 1"
        if (!(this !== a)) return "Fail 2"
        return "OK"
    }
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: s
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(a: String): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt("OK")
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (x != null) throw AssertionError()
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yü// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

enum class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¨// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): myFlusher<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (shouldReturnFalse()) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y0// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when {
        0 != nx -> "Fail 0"
        1 == nx -> "Fail 1"
        !(0 == nx) -> "Fail 2"
        !(1 != nx) -> "Fail 3"
        x != nx -> "Fail 4"
        y == nx -> "Fail 5"
        !(x == nx) -> "Fail 6"
        !(y != nx) -> "Fail 7"
        0 == nn -> "Fail 8"
        !(0 != nn) -> "Fail 9"
        x == nn -> "Fail 10"
        !(x != nn) -> "Fail 11"
        0 != ax -> "Fail 12"
        1 == ax -> "Fail 13"
        !(0 == ax) -> "Fail 14"
        !(1 != ax) -> "Fail 15"
        x != ax -> "Fail 16"
        y == ax -> "Fail 17"
        !(x == ax) -> "Fail 18"
        !(y != ax) -> "Fail 19"
        bx != ax -> "Fail 20"
        by == ax -> "Fail 21"
        !(bx == ax) -> "Fail 22"
        !(by != ax) -> "Fail 23"
        0 == an -> "Fail 24"
        !(0 != an) -> "Fail 25"
        x == an -> "Fail 26"
        !(x != an) -> "Fail 27"
        bx == an -> "Fail 28"
        !(bx != an) -> "Fail 29"
        else -> "OK"
    }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, FAIL)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.box.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÇ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
    var foo: String
        get() = result
        set(value) { result = value }
}


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: tryZap): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(Int.TopField++)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yp// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        fun box(): String {
    var x = 0
    do x++ while (x < 5)
    if (x != 5) return "Fail 1 $x"
    
    var y = 0
    do { y++ } while (y < 5)
    if (y != 5) return "Fail 2 $y"
    
    var z = ""
    do { z += z.length } while (z.length < 5)
    if (z != "01234") return "Fail 3 $z"
    
    return "OK"
}
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¸// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
    Foo.s.param
    return "OK"
}
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y4// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter {}

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: Int
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Example, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y;// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.joinToString()

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val Boolean: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return f(Outer().Inner())
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(a, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until foo.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(0, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<test, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y†// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class x2(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yû// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.value(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Str) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Inner(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : A {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        abstract get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(a: Int = 1): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≈// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) {
                show()
            }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val list1: UInt
        inline get() = data.length.toUInt()
}
y¨// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(val ok: Boolean, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(xs: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) {
        s += "$a:$b;"
      }
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package T.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.A.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y»// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
  val result = ArrayList<T>()
  for(t in this) {
    if (predicate(t)) result.add(t)
  }
  return result
}
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yü// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is B -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y&// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
        var i = 0
        override fun next() = i++
        override fun hasNext() = i < 5
    }

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yå// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter() {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    x() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÆ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { takeNullable ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Unit<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

abstract class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yê// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in res)
        result += " "
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÆ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(val x: String): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(0) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, res> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (t < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is Float -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yØ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(runInlineExt: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yô// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): T = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: other): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    open inner fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¨// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (b and 0xFF) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<*, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yø// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f("RESERVED_MEMBER_INSIDE_INLINE_CLASS")) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: UInt, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until String.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(1, 2, 3)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.Box<Int>(1)) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class r {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≠// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, element31> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = prefix.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package a.sort().ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (Long(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { String ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<ok, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val Int: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is set -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: box, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: box) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yï// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return test()
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y∆// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, ExperimentalTypeInference::class)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, a)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.getValue()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y†// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    override fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yõ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Int = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≥// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    var property : String
    fun foo()  {
        result = property
    }
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (box < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÑ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, f1: () -> T) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y—// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for ((index: Any, x) in arr.withIndex()) {
        useAny(index)
        s.append("$index:$x;")
    }
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.value.toUInt()
}
y†// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(a[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i != 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (i(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yh// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
    try {
        throw MyThrowable("test")
    } catch (t: MyThrowable) {
        if (t.cause != t) return "fail t.cause"
        if (t.message != "My message: test") return "fail t.message"
        return "OK"
    }

    return "fail: MyThrowable wasn't caught."
}
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÁ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            !(x < y)  -> "Fail !($x < $y)"
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¨// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.component2()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Char() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: x<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val to: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this@bar, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yñ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw Test()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y†// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is ax -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<prop, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(aI[2]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { element ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yí// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        fun foo(block: (String, String, String) -> String): String = block("O", "fail", "K")
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.sorted.toUInt()
}
y«// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    UninitializedPropertyAccessException() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y∂// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(ReadOnlyProperty: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { bar ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(String, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 == size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yò// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw String()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> check1()
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≤// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val r1 = listOf("O", "K", "fail").let {
        (x, y) -> x + y
    }
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Long() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÑ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    {
    return TestClass().test()
}
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) "OK"
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yX// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    operator fun contains(a: Int) = (1..2).contains(a)
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Unit -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(hashCode, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y>// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.ArrayList<UInt>()

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        operator fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yØ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt(from, to)
}
y∂// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Collection<String>): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yQ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    fun <T> T.genericThisRef1() = fun () = this
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) {
      s += "$a:$b;"
    }
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    T() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yÌ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Base("O" + if (i == 23) {
    log += "logged"
    "K"
}
else {
    "fail"
}) {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt("13")
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class M(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.d()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = O.length.toUInt()
}
y‘// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

inline class Id(val id: String)

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val x: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yú// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: () -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, b> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(x, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yå// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (val t1 = peek()) {
        Test.A -> {
            when (
                val t2 = when(val y = peek()) {
                    Test.A -> Test.A
                    Test.B -> Test.B
                    else -> Test.OTHER
                }
            ) {
                Test.A ->
                    when (val t3 = peek()) {
                        Test.A -> "OK"
                        else -> "other 3"
                    }

                else -> "other 2"
            }
        }

        else -> "other 1"
    }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≠// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(deepIsNull, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Any, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yË// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    val a = "OK"
    val b = A.a
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<A, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val fn: () -> String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): equals<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y©// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = scalar.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≠// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.(A::foo)(B())) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y´// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(b: Boolean): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¨// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Companion(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yü// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is Z -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<First?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Any> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Int, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yò// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(val one: Int) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yK// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter {
        ok = "OK"
    }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yü// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    private fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y∑// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, { doSomething() })
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Some() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yï// Original bug: KT-37845
//KT-2206

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: value, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Long?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, "")
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≠// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (indices < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y™// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.String

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y®// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: ULong
        inline get() = data.length.toUInt()
}
yß// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
        }
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
                    if (i < 1) return leafContaining(child, i)
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) 
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y]// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int>= when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yå// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) 
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : () {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException)
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope) {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope:Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

 class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children:Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
     {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yú// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = .toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < ) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() 
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: ): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yû// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, > = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yƒ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope 

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yô// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yô// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return (child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope(){
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, )
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContainingthis, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yû// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)}
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, ): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yã// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = 
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContainingchild, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: ) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = .length.toUInt()
}
yô// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun (i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package .viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
             InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)


private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                .iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y:// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}


y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) 
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int):Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int,  children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
             Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y}// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class (val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data..toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed classRope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> =when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: 
        inline get() = data.length.toUInt()
}
yò// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int):  = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yû// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if ( < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter {  ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is  -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yû// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
     object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yä// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child,i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child 
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf-> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf( data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int):Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if ((children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me..ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(childreni]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: , i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.lengthtoUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: ): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


     leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): <Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) {null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for ( in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    () {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: , val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yí// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw ()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: <Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?>  Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yy// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, ) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun (f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int>  Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yü// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) ) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope,i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

packageme.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yõ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children:  = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, )
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get()  data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() =data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yñ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = ) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f:(child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y†// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
         fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break}
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y†// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> ) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yl// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data  InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yö// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f()) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private  class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt() if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int>  when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1)return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yû// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yû// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is  -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: ) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size:UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: ArrayRope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data classLeaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array() { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y>// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companionobject {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) 
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }}


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline funiter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ionsealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope. { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null ) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yú// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i:Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

dataclass Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this,i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i< 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, > = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yï// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null } :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yü// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f([i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yé
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(valsize: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pairrope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() 
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yö// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y†// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yö// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yõ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

 class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
     size: UInt
        inline get() = data.length.toUInt()
}
y\// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) 
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                ropeiter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt(
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(valdata: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yõ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until ) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0  size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, valchildren: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until .toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): PairLeaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion  {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yö// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()}
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yè// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return 
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yí// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yö// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f:  -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, )
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }


data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for(i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leafval data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yì// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in ) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child:Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> =  (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int: Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope 
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = datalength.toUInt()
}
yï// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yc// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if(f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yû// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec funleafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yò// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int):  = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yö// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> 
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null}) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?>= Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y.// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object 


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y2// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter 

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): <Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yü// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val : String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int,val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i <1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val : UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (fchildren[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()

y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) :  {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if () return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y†// Original bug: KT-37845
// Duplicated bug: KT-14961

 me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) :Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> 
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope)-> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y§// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
         (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt)) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yà// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) 
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¢// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data  Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yñ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false}

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yõ// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
             -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
ye// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() 
yì// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = 
}
y°// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
         get() = data.length.toUInt()
}
yä// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt())  (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internalinline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y≤// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion



private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> (rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNodeval size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yh// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope){
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2){ null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in  until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i:Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y(// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get( = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get()= data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i])) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y¶// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y£// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) {  }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y…// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
y•// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yè// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }


    fun leafContaining(i: Int): Pair<Leaf, Int> = Rope.leafContaining(this, i)
}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: ) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
yY// Original bug: KT-37845
// Duplicated bug: KT-14961

package me.viluon.ion

sealed class Rope {
    companion object {
        tailrec fun leafContaining(rope: Rope, i: Int): Pair<Leaf, Int> = when (rope) {
            is InnerNode -> {
                rope.iter { child ->
                    if (i < 1) return leafContaining(child, i)
                    false
                }

                throw IllegalStateException()
            }
            is Leaf -> Pair(rope, i)
        }
    }



}

private data class InnerNode(val size: Int, val children: Array<Rope?> = Array(2) { null }) :
    Rope() {
    internal inline fun iter(f: (child: Rope) -> Boolean) {
        for (i in 0 until size.toInt()) if (f(children[i]!!)) break
    }
}

data class Leaf(val data: String) : Rope() {
    val size: UInt
        inline get() = data.length.toUInt()
}
ˇˇ