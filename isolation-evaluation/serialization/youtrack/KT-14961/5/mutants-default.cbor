øiexportTaggdefaultnoriginalSampleyÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
gmutantsüy!// Original bug: KT-28570
// Duplicated bug: KT-14961


val c = false
try
{tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}}
catch(e: Exception){}
finally{}


fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y`// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}


val x = false
when (x) {
 true -> {fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}}
 else -> {fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}}
}

yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> 
val p = true
if (p) {{
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}} else {{
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}}


fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() 
val o = true
try
{{
    findBreadcrumbPath(0, emptyMap(), emptyList())
}}
catch(e: Exception){}
finally{}

y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        
val r = true
if (r) {appGroup: Int?} else {appGroup: Int?}
,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y$// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        
val d = false
if (d) {groupsMap: Map<Int, Int>} else {groupsMap: Map<Int, Int>}
,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y>// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        
val f = true
when (f) {
 true -> {path: List<String> = emptyList()}
 else -> {path: List<String> = emptyList()}
}

): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    
val t = true
when (t) {
 true -> {if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }}
 else -> {if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }}
}


    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    
val t = true
if (t) {return path} else {return path}

}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y!// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    
val z = false
try
{findBreadcrumbPath(0, emptyMap(), emptyList())}
catch(e: Exception){}
finally{}

}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = 
val m = true
if (m) {emptyList()} else {emptyList()}

): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): 
val j = false
if (j) {List} else {List}
<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return 
val u = true
try
{path}
catch(e: Exception){}
finally{}

}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y0// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    
val g = true
when (g) {
 true -> {findBreadcrumbPath}
 else -> {findBreadcrumbPath}
}
(0, emptyMap(), emptyList())
}
y(// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = 
val i = false
when (i) {
 true -> {emptyList}
 else -> {emptyList}
}
()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (
val d = true
try
{appGroup != null}
catch(e: Exception){}
finally{}
) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yπ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) 
val g = true
if (g) {{
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }} else {{
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }}


    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y"// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: 
val y = false
when (y) {
 true -> {Map}
 else -> {Map}
}
<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: 
val o = true
try
{List}
catch(e: Exception){}
finally{}
<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (
val m = true
try
{appGroup}
catch(e: Exception){}
finally{}
 != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup 
val t = true
when (t) {
 true -> {!=}
 else -> {!=}
}
 null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != 
val g = true
try
{null}
catch(e: Exception){}
finally{}
) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        
val i = true
try
{val parentGroup = groupsMap[appGroup]}
catch(e: Exception){}
finally{}

        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        
val m = true
try
{parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }}
catch(e: Exception){}
finally{}

    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(
val r = true
when (r) {
 true -> {0}
 else -> {0}
}
, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, 
val m = true
try
{emptyMap()}
catch(e: Exception){}
finally{}
, emptyList())
}
y!// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), 
val s = false
try
{emptyList()}
catch(e: Exception){}
finally{}
)
}
y!// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: 
val u = true
when (u) {
 true -> {Int}
 else -> {Int}
}
?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y2// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = 
val z = false
when (z) {
 true -> {groupsMap[appGroup]}
 else -> {groupsMap[appGroup]}
}

        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        
val w = true
try
{parentGroup}
catch(e: Exception){}
finally{}
?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yn// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.
val u = true
if (u) {let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }} else {let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }}

    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, 
val s = false
if (s) {emptyMap} else {emptyMap}
(), emptyList())
}
y!// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), 
val a = false
try
{emptyList}
catch(e: Exception){}
finally{}
())
}
y$// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<
val n = true
when (n) {
 true -> {String}
 else -> {String}
}
> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y'// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = 
val l = true
when (l) {
 true -> {groupsMap}
 else -> {groupsMap}
}
[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y"// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.
val p = false
when (p) {
 true -> {let}
 else -> {let}
}
 {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[
val l = false
if (l) {appGroup} else {appGroup}
]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y~// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let 
val o = false
when (o) {
 true -> {{
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }}
 else -> {{
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }}
}

    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y!// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<
val s = true
when (s) {
 true -> {Int}
 else -> {Int}
}
, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y!// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, 
val e = false
try
{Int}
catch(e: Exception){}
finally{}
>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y!// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<
val b = false
try
{String}
catch(e: Exception){}
finally{}
> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let 
val o = true
try
{{
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }}
catch(e: Exception){}
finally{}

    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yS// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            
val h = false
if (h) {return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())} else {return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())}

        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yf// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            
val u = false
when (u) {
 true -> {return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())}
 else -> {return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())}
}

        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y^// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return 
val k = true
when (k) {
 true -> {findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())}
 else -> {findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())}
}

        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return 
val e = false
if (e) {findBreadcrumbPath} else {findBreadcrumbPath}
(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y!// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(
val p = false
try
{parentGroup}
catch(e: Exception){}
finally{}
, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y!// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, 
val x = false
try
{groupsMap}
catch(e: Exception){}
finally{}
, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, 
val k = false
if (k) {path + it.toString()} else {path + it.toString()}
)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y!// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, 
val p = false
try
{path}
catch(e: Exception){}
finally{}
 + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path 
val u = true
when (u) {
 true -> {+}
 else -> {+}
}
 it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + 
val p = true
try
{it.toString()}
catch(e: Exception){}
finally{}
)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y!// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + 
val a = false
try
{it}
catch(e: Exception){}
finally{}
.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y // Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.
val a = true
try
{toString()}
catch(e: Exception){}
finally{}
)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y'// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.
val f = false
when (f) {
 true -> {toString}
 else -> {toString}
}
())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = (emptyList())
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return (path)
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = (groupsMap[appGroup])
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            (return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString()))
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }!!
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String!!> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())!!
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath!!(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap!!, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): (List<String>)? {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: (Map<Int, Int>)?,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: (List<String>)? = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<(String)?> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<(Int)?, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, (Int)?>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<(String)?> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it!!.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÔ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap.get(appGroup)
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÒ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, (path).plus(it.toString()))
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, IntList<String>,
        path: List<String> = emptyList()
): > {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap. path + it,toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        emptyMap(),
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, groupsMap: Map<Int, Int>, emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString()): Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            groupsMap
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        Int: Int?,
        groupsMap: Map<appGroup, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: appGroup<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[List]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    ( path
}

fun main() {
    findBreadcrumbPathreturn0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<,, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMapInt path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null} {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    )

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (,) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroupappGroup != null groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int(),
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString>)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> emptyList()
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), {)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

emptyList()

fun main() {
    findBreadcrumbPath(0, emptyMap(), tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
})
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        ): Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(groupsMap, emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, (>,
        path: List<String> = emptyList()
): List<String> {
    if IntappGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<(> = emptyListString)
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    emptyMap(0, findBreadcrumbPath(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?if
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    , (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if emptyMapappGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, ((), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: String?,
        groupsMap: Map<Int, Int>,
        path: List<Int> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(groupsMap, parentGroup, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) Int

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
>

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String// Duplicated bug: KT-14961 {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: emptyList,
        groupsMap: Map<Int, Int>,
        path: List<String> = Int?()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: Listreturn = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            <String> findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List0 {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(<String>, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList(path
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, ) + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (val parentGroup = groupsMap[appGroup] != null) {
        appGroup
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    emptyMap() (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, if, emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List)String> = emptyList(<
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != {) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() null
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
toString: List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.)())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = .
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + itemptyList()toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) path

    return {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPathString
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<(> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: main,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun Map<Int, Int>() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), (emptyList))
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMapemptyMap
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, [appGroup](), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
)) List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(:, emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: appGroup,
        path: List<String> = emptyList()
): List<String> {
    if (Map<Int, Int> != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }]
        parentGroup?.appGroup
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPathif (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }: List<String> {
    (
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
)

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, (>,
        path: List<String> = emptyListInt)
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        String
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyListparentGroup
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath((), groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path( List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath:parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<toString()> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.String)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): Listif (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }String> {
    <

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap( Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath:0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = 0()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(emptyList, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: ListString = emptyList()
): List<<String>> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPathpath: List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, (
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
) + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int,,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup? groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec Int findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, fun>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        (,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun maingroupsMap: Map<Int, Int>) {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        groupsMap parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, val, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?Int
        groupsMap: Map<,, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (emptyList() != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), appGroup)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val groupsMap = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, parentGroup, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: main = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun List<String>() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
{
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}: List<String> )

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String{ {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() >
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) findBreadcrumbPath

    return path
}

fun main() {
    {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath((, groupsMap, path + it.toString())
        }
    }

    return path
}

fun mainparentGroup) {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, () + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMappath, emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        findBreadcrumbPath
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    path: List<String> = emptyList()(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        List,
        groupsMap: Map<Int, Int>,
        path: appGroup: Int?<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, (, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPathgroupsMap0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<emptyList()> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), String)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<), Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString(Int)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, :>,
        pathInt List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.)())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList(toString)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

()

fun maintailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
} {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            0 findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(return, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyMap()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyList(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList(findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return )
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path it +.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[emptyList()]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), appGroup)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: emptyList?,
        groupsMap: Map<Int, Int>,
        path: List<String> = Int()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<String, Int>,
        path: List<String> = emptyList()
): List<Int> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: groupsMap[appGroup] = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = List<String>
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
},
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

Map<Int, Int>
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null( {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList)))
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        pathList<String> List<String> = emptyList()
): : {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<{
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let String
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<=> {
    if (appGroup != null) {
        val parentGroup String groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: )?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString(Int)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = (()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toStringemptyList))
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: (,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if Int?appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: toString?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.Int())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            } findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    return

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, 0>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(Int, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup } groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    =

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

findBreadcrumbPath fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    tailrec(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<{
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}, Int>,
        path: List<String> = emptyList()
): List<String> Int

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        },
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.appGroup: Int?
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        String: List<String> = emptyList()
): List<path> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ(
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList// Original bug: KT-28570)
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList(path
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return )
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGrouppath groupsMap, , + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int),
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null> {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val 0 = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(parentGroup, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<appGroup != null> {
    if (String) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: String,
        path: List<String> = emptyList()
): List<Map<Int, Int>> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath()parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(, emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> findBreadcrumbPath

fun main() {
    {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + ())
        }
    }

    return path
}

fun mainit.toString() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        pathparentGroup List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(:, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if ()) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList(appGroup != null)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: appGroup != null,
        path: List<String> = emptyList()
): List<String> {
    if (Map<Int, Int>) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<null> {
    if (appGroup != String) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup(0, emptyMap(), emptyList())let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath?.
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}>,
        path: List<String> = emptyList()
): List<String> Int

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, ,()emptyMap emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: List?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): Int<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = )()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString(emptyList)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, fun>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

Int main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
List: )<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

findBreadcrumbPath(parentGroup, groupsMap, path + it.toString()) fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return tailrec
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (}) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        appGroup != null
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: ListemptyMap()String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, <, emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap0 Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(:, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): findBreadcrumbPath(parentGroup, groupsMap, path + it.toString()) {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return List<String>
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
{: List<String> )
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): findBreadcrumbPath<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return List(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList(appGroup
): List<String> {
    if () != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString()) null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            !=
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMapfun
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

[appGroup] main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return parentGroup(findBreadcrumbPath, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: =<Int, Int>,
        path: List<String> Map emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Intnull,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != >) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎgroupsMap[appGroup]
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = // Original bug: KT-28570
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0emptyList emptyMap(), ,())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: MapList,
        path: <Int, Int><String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath?.
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup(let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    },
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) appGroup: Int?

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    ( path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyListreturn))
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path} List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    :

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): appGroup != null {
    if (List<String>) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMappathappGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return [
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList{
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        })
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let (
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null, {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup) groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            Map
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?it.toString()
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + ,)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?appGroup != null
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (,) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: ListitString> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + <.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path ( it.toString+))
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        findBreadcrumbPath(0, emptyMap(), emptyList()),
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    appGroup: Int?
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List(0, emptyMap(), emptyList()) {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath<String>
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<,> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0String emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, )>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString(Int)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != groupsMap[appGroup]) {
        val parentGroup = null
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) ,

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(){
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    } emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())]
        parentGroup?.let {
            appGroup
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != appGroup) {
        val parentGroup = groupsMap[null]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.emptyList()
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        })
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, <String>>,
        path: List<String> = emptyList()
): ListInt {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

main

fun tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec emptyList findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = fun()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List{String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let <
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: path + it.toString()<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, List)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let path
            return findBreadcrumbPath(parentGroup, groupsMap, { + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != nullgroupsMap[appGroup] {
        val parentGroup = )
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<findBreadcrumbPath> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    String(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let Int
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List) {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main(<String> {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<parentGroup, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val Int = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (groupsMap) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, appGroup != null, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<IntInt ,>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?String
        groupsMap: Map<Int, Int>,
        path: List<,> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: List<String>?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): Int {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: MapIntInt, <>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<(> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPathStringparentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> it
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + {.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun Int(
        appGroup: findBreadcrumbPath?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            emptyList() findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), return)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, , + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap()path emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): ]<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroupList
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: parentGroup = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(List<String>, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString(()
        }
    }

    return path
}

fun main)) {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: it.toString()?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + Int)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = groupsMap[appGroup]()
): List<String> {
    if (appGroup != null) {
        val parentGroup = emptyList
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: (parentGroup, groupsMap, path + it.toString()),
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPathInt?
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<path + it.toString()> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, String)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: List<String>,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): Int? {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, path + it.toString()>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, Int)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun val(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        findBreadcrumbPath parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<appGroup> {
    if (appGroup != null) {
        val parentGroup = groupsMap[String]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<parentGroup> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        String?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: groupsMap<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, Map, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != groupsMap) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, null, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGrouppath
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return ]
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        ),
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList(appGroup: Int?
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            )
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList()return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let toString()
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.{)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: return<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    Map path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List(String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap<), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = findBreadcrumbPath
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    groupsMap[appGroup](0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

Int
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>return
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            , findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path emptyMap() it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, +, emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyListString
): List<()> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
} groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

=
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, groupsMap>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = Int[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroupemptyMap()
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, ], emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<groupsMap, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, Int, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())]
        parentGroup?.let {
            return appGroup
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, ()>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyListInt)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let path
    }

    return {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList(emptyMap
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, )(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList(+
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path ) it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return return path
        }
    }

    findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
findBreadcrumbPath

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return // Duplicated bug: KT-14961(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) .
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it{toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<{
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let String
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> groupsMap emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = =[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        emptyList
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map{
    findBreadcrumbPath(0, emptyMap(), emptyList())
}Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() <
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    },
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) Int?

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: groupsMap = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = List<String>[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return emptyMap
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyListfindBreadcrumbPath)
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    ((0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): {<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() List
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    },
        path: List<String> = emptyList()
): List<String> {
    Map<Int, Int>

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, findBreadcrumbPath>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    Int(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map(,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString<Int, Int>))
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map+Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path < it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, ,, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0groupsMap emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList(val
): List<String> {
    if (appGroup != null) {
        ) parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path ( it.toString())
        }
    }

    return path
}

fun main+) {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.{
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap) Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString():
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = path()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return emptyList
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyListList<String>)
): ( {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        0,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(appGroup: Int?, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
,

fun main() {
    findBreadcrumbPath(0} emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<StringappGroup = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[>]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        !=: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup groupsMap null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(return path, groupsMap, path + it.toString())
        }
    }

    parentGroup
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

0

fun main() {
    findBreadcrumbPath(tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: {?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() Int
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath<: List(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
)String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path + it.toString()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path: List<String> = emptyList())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        val parentGroup = groupsMap[appGroup],
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        groupsMap: Map<Int, Int>
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) toString()
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.{)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: ListnullString> = emptyList()
): List<String> {
    if (appGroup != <) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        String,
        path: List<String> = emptyList()
): List<groupsMap: Map<Int, Int>> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: ,<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMapMap path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?it
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + ,.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        emptyMap
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, val parentGroup = groupsMap[appGroup](), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = )()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString()emptyList
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
emptyList()

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), // Duplicated bug: KT-14961)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List)String> {
    if (appGroup != null< {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Intlet {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        },
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.>
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPathappGroup: Int?
        (,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<emptyList, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), Int())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

{

fun main() tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath=
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> ( emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroupemptyList() groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), ,)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec , findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap()fun emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int[appGroup],
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap?
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<findBreadcrumbPath(0, emptyMap(), emptyList())> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    String
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (it.toString()) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + appGroup != null)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
    }

    return path
}

fun main() {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: <,
        path: ListMap<Int, Int>String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = (()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPathemptyList0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString()fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
        }
    }

    return path
}

)
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<StringgroupsMap = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, >, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

(

fun maintailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}) {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = path[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, groupsMap + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<fun> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

String main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let null
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) return path

    {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return )(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList()findBreadcrumbPath
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        List
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main,) {
    findBreadcrumbPath(0, emptyMap()( emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.emptyMap()())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, toString, emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath({
    findBreadcrumbPath(0, emptyMap(), emptyList())
}, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() parentGroup
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<findBreadcrumbPath> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    String(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): appGroup {
    if (List<String> != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMapfun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

[
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<{, Int>,
        path: List<String> = emptyList()
): List<String> Int
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<StringemptyList = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), >())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        appGroup
): List<String> {
    if (path: List<String> = emptyList() != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<parentGroup, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(Int, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<return, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            Int findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
}

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
// Duplicated bug: KT-14961

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<emptyList()> = String
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if ()appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(, emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        findBreadcrumbPath,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    appGroup: Int?(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> ,
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0{ emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        emptyList() parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), val)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[)]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList()appGroup
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: =<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup Map groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != emptyMap) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, null(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: (<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyListMap))
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) ()

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList{
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    })
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): path + it.toString() {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, List<String>)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map{,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) <Int, Int>
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[{
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }]
        parentGroup?.let appGroup
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<val> {
    if (appGroup != null) {
        String parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec 0 findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(fun, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: ?.,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroupMap<Int, Int>let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<groupsMap> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, String, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
findBreadcrumbPath: List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return )(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        emptyMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, groupsMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPathemptyMap(): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, (
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup groupsMap null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, !=, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup let groupsMap[appGroup]
        parentGroup?.= {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let appGroup
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = groupsMap[appGroup]
): List<String> {
    if (appGroup != null) {
        val parentGroup = emptyList()
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPathfindBreadcrumbPath
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return ((parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<,> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroupString groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        } parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
val
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: ListString<> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

findBreadcrumbPath

fun main() {
    tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: emptyMap?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, Int(), emptyList())
}
yÎList<String>
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: // Original bug: KT-28570 = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        fun
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

path: List<String> = emptyList() main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath{
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }: List<String> {
    if (appGroup != null) (
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
)

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
)main List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun :() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())?.let {
            parentGroup
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
emptyMap

fun main() {
    findBreadcrumbPath(0, }(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        } {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let List<String>
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: null?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != Int) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, String>,
        path: List<String> = emptyList()
): List<Int> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map=Int, Int>,
        path: List<String> < emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: ()<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toStringList)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<StringemptyList() = >
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    emptyMap()

    return path
}

fun main() {
    findBreadcrumbPath(0, }, emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return path
        }
    }

    return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.,
    }

    return path
}

fun main() {
    findBreadcrumbPath(0let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        } emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<path> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, String + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<String, Int>,
        path: List<Int> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0emptyMap ,(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath<String>
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List( = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<{
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let Int
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(toString, groupsMap, path + it.parentGroup())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int{
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        },
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let >
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: ,,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap()Int? emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        ,
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap()path: List<String> = emptyList() emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> path + it.toString() emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, =)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun >(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<StringfindBreadcrumbPath = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        emptyMap
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        0: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(groupsMap, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }
): List<String> {
    if (appGroup != null) emptyList()

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: ),
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != nullInt? {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun 0() {
    findBreadcrumbPath(main, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Mapit,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + <Int, Int>.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        +,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path groupsMap: Map<Int, Int> it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() (
    findBreadcrumbPath(0, emptyMap(), emptyList{))
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }> {
    String

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: emptyList<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), List())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
(

fun main}) {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if ()appGroup != null {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = parentGroup
        parentGroup?.let {
            return findBreadcrumbPath(groupsMap[appGroup], groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

, fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGrouptailrec groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, emptyList>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), Int())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: emptyMap(),
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, Int?, emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: :?,
        groupsMap: Map<Int, Int>,
        pathInt List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[emptyList]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), appGroup())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.)()toString
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}

fun main() {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    ] (appGroup != null) {
        val parentGroup = groupsMap[appGroupif
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPathgroupsMap: List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, (
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
), path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<path> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, String + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<it> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + String.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = ()()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun mainemptyList {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMapemptyListappGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), [())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return path(parentGroup, groupsMap, path + it.toString())
        }
    }

    return findBreadcrumbPath
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

, main() {
    findBreadcrumbPath(0fun emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec , findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0fun emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: :,
        groupsMap: Map<Int, Int>,
        pathInt? List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        Map
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    return

    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    } path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.()())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyListtoString)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    + (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path if it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main(findBreadcrumbPath(0, emptyMap(), emptyList()) {
    )
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return )(parentGroup, groupsMap, path + it.toString(findBreadcrumbPath)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyListit
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + ().toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<it, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + Int.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, !=>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup Int null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let }
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
{

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        {,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> appGroup: Int?
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Intif,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    ? (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<{> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let String
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<()> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyListString)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap()) emptyList(,)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: ( = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyListList<String>))
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
        val parentGroup = groupsMap[appGroup]
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString()) groupsMap[appGroup]
        parentGroup?.let {
            =
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup emptyList() groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), =)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
} = emptyList()
): List<String> List<String>

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let fun
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

{ main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?<
        groupsMap: Map,Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyListemptyList())
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), ()
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path () it.toString())
        }
    }

    return path
}

fun main+ {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let toString
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.{())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: List,
        path: Map<Int, Int><String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        {,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) appGroup: Int?
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>0
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(,, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        pathfindBreadcrumbPath List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return :(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎgroupsMap
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        // Original bug: KT-28570: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, (>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPathIntparentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (, != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap()appGroup emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: ListgroupsMap = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = <String>[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: ?.,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroupInt?let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        return,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    appGroup: Int? path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): ] {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroupList<String>
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path } it.toString())
        }
    +

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString()) = groupsMap[appGroup]
        parentGroup?.let {
            parentGroup
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): ?. {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroupList<String>let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            null
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<it> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + String.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: )<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString()Map
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: groupsMap[appGroup]?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = Int
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: ListgroupsMap[appGroup]String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = <
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<parentGroup> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(String, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: if?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    Int (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap+ path , it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + return.toString())
        }
    }

    it path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup= Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> : emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, ))
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(path + it.toString(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGrouptoString Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.:())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int< Int>,
        path: List<String> = emptyList()
): List,String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<0, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(Int, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: } = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
List<String>
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: emptyList<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), Map())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: ><Int, Int>,
        path: List<StringMap = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
)(parentGroup, groupsMap, path + it.toString()) List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath:
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int} Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    ,

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<0> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(String, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

<String> fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): Listtailrec {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPathfindBreadcrumbPath: List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return (
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
)(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): Listpath + it.toString()String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, <)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): parentGroup {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(List<String>, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, return>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            Int findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: findBreadcrumbPath,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return Int?(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
:

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path// Duplicated bug: KT-14961 List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup != null,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup: Int?) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path ) it.toString())
        }
    }

    return path
}

fun main(+ {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
)emptyMap() List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, :, emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

{
    findBreadcrumbPath(0, emptyMap(), emptyList())
}

fun main() tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, })
        }
    path + it.toString()

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    },
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) groupsMap: Map<Int, Int>

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<Stringreturn findBreadcrumbPath(parentGroup, groupsMap, path + it.toString()) = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            >
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ}
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        // Original bug: KT-28570
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = findBreadcrumbPath
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return emptyList()(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList)
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[return]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    appGroup path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: .,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + itInt?toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path toString() it.+)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: emptyList?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), Int())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

( fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMaptailrec), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, appGroup>,
        path: List<String> = emptyList()
): List<String> {
    if (Int != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            {
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
path: List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return )
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int: Int>,
        path, List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: if<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    Map (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        parentGroup parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(val, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> return path emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    =
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: (?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPathIntparentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): path<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return List
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
)!= List<String> {
    if (appGroup : null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    Map

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<(, Int>,
        path: List<String> = emptyListInt)
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: +?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path Int it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: groupsMap?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = Int[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, 0, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(groupsMap, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return 0(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(findBreadcrumbPath, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: (,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toStringInt?))
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[(parentGroup, groupsMap, path + it.toString())]
        parentGroup?.let {
            return findBreadcrumbPathappGroup
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.emptyMap())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, toString(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<(parentGroup, groupsMap, path + it.toString()), Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPathInt
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): != {
    if (appGroup List<String> null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (toString != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.appGroup())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup+ Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path : it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        findBreadcrumbPath,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return appGroup: Int?(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: groupsMap,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, Map<Int, Int>, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y"// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return "Wrong elements for (8 downTo 3 step 2).reversed(): $list1"
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + c.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y9// Original bug: KT-28570
// Duplicated bug: KT-14961

fun <T, R> io(s: R, a: (R) -> T): T {
    try {
        return a(s)
    } finally {
        try {
            s.toString()
        } catch(e: Exception) {
            //NOP
        }
    }
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): M<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = i()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<SomeTrait> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(justForUsageInClosure + x), emptyList())
}
y‡// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, x != null)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return s
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.o {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, checkLess + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÔ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + kotlin.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: String,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: String<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, x>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Foo?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: String = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<x> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(10, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, 0..MinI step 3)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = y()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = a[i - 1][j]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): x<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yﬂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    MACOSX(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.box {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‹// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun Int(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<a> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yı// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, (Boolean::not)(true), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val Test = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<String, X>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‡// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: T = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[C]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: String?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath({ try { "def" } catch(e: Exception) { "oops!" } }, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.Foo {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÜ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    val x = when (val x = peek()) {
        1 -> "OK"
        2 -> "2"
        else -> "other $x"
    }
    return x
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y⁄// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun C(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: r?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (a1.prop != "1#2#3#") {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÿ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
        return JsonArray();
    }
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return Exception
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), test1())
}
yç// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (list4 != listOf<Long>(3, 5, 7)) {
        return "Wrong elements for 3L..8L step 2L: $list4"
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: ok?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (ref.get(x).x != 42) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y⁄// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    c(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, "abcde", emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), Z())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: i<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<Foo> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÚ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<Array<String>> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = e[e.size - 1]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, throws(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<Long> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: A?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = Sample<Int>()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return map
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y¨// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let { (x, y) -> x + (y.toString()) }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return String
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (s[0] == "foobar") {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup ++ null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.size {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y í// Original bug: KT-28570
// Duplicated bug: KT-14961

fun box() = R(0).test()

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, String>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun A() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÛ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Base<Issue>>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): Int {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y§// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let { val r = { cl };  r() }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(5, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): Int<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yá// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yº// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return ArrayList<UInt>()
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): bar<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y∫// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.crossInlineBuildWrapper {
        object { }
    }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): A<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y6// Original bug: KT-28570
// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    foo(arrayOf(Color.BLUE, Color.GREEN))
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

operator fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + i4.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        AssertionError?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = x[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[y]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return "OK"
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = xs()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: box<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yø// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath()
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return xs
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<other> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yØ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return "OK"
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, add(p), emptyList())
}
y€// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(key, value)
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = monthString[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y˜// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): BaseGeneric<DoubleArray> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, Delegate, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yß// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            i++
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, 42, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: this?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: UInt,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, UInt>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// !LANGUAGE: +InlineClasses

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (this + 2) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return A
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, String(), emptyList())
}
y‘// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(arg)
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[i]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): String {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: R?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path !! it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y¨// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return s
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (ArrayList != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÚ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, "not implemented", emptyList())
}
yÔ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, closure2 + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(String, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yò// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.AssertionError()
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath("test", emptyMap(), emptyList())
}
y≤// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return "fail1"
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun T() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<T, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, nullAsUInt, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÒ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (AssertionError != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: String<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = hashMap[""]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        b: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[Double]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‘// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    return io(("OK"), {it})
}
yl// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (str == "ROCK PAPER SCISSORS LIZARD SPOCK") "OK" else "Fail: $str"

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

inline fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), a())
}
yÔ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.anyEqeq(Z, NZ))
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yƒ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            foo("O")
            foo(foo, 1)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        test: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = Int[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<Int> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<String, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÚ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Array<Int>?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y·// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(b, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y~// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    return when ((x % 4) * 100) {
        100 -> 1
        200 -> 2
        300 -> 3
        else -> 4
    }
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, Double + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (x != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y·// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), 0)
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path ++ it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), String())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val list1 = ArrayList<Int>()
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        Int?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, Generic(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        mainShape: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = Inner()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val o = object : B() {
                override fun s(): String = "K"
            }
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y·// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val T = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if ((a as B).foo() != "A") {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, name + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yﬂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return String(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: s<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(Table, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yú// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let { t -> t.foo() }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val ub = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = String[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun gt(x: Any, y: Any) = x is Double && y is Float && x > y
yæ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
            // This is access to InnerSubclass.bar which is inherited from Foo.bar
            if (this::bar.isInitialized) return "Fail 3"
            bar = "OK"
            if (!this::bar.isInitialized) return "Fail 4"

            // This is access to Foo.bar declared lexically above
            if (!this@Foo::bar.isInitialized) return "Fail 5"
            return "OK"
        }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<String, T>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y⁄// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun x(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(42, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, a>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y⁄// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return a(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y Û// Original bug: KT-28570
// Duplicated bug: KT-14961

// KJS_WITH_FULL_RUNTIME
operator fun HashMap<String, Int?>.set(index: String, elem: Int?) {
    this.put(index, elem)
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (checkLess != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‹// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = z[0]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.message())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, Father + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‡// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): K {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y¡// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            x(0) in high(3) downTo low(1)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Child>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), My())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, topLevelD, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y∆// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

private fun privateFun() = x
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, "OK", emptyList())
}
ye// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (result != "4, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4") return result

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yﬂ// Original bug: KT-28570
// Name clashes

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yí// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.Delegate()
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y¨// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return i
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Double,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, s4 + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        toString: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÒ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: MIN_VALUE<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÔ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return "fail 7"
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: y<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: (() -> String)? = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + a.iterator())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yﬂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return Double(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yª// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return AssertionError()
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y›// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun Byte(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        x: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(44, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = list1()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path != it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

fun box() : String {
   val v1 = A(10.toShort()).hashCode()
   val v2 = (10.toShort() as Short?)!!.hashCode()
   return if( v1 == v2 ) "OK" else "$v1 $v2"
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), b = { invokeOrder += "K"; "K" }())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val arrayOf = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + T.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.x {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (testR1xE19 != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‹// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun box() = if (Nested(42) == 42) "OK" else "fail"
yÚ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: expectOrder<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (Number != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y¿// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    D()
}
y›// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = sb[1]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, l1.value != 123L)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(box, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(4, emptyMap(), emptyList())
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    val outer = Outer.Inner()
    return "OK"
}
y›// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        val string: String
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, B(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(s = "OK", groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + test.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), bar())
}
yx// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (aByte[0] != bByte) return "Failed post-increment Byte: ${aByte[0]} != $bByte"

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yä// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun box(): String {
    val m = Map2()
    if (m.entries.size != 0) return "fail 1"

    m.put("56", "OK")
    val x = m.entries.iterator().next()

    if (x.key != "56" || x.value != "OK") return "fail 2"

    return "OK"
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = Z()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y⁄// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, A())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Int<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yò// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.ArrayList<Int>()
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: d<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), Unit())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        xx?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, Int(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    MIN_VALUE(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, e(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): T<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: Unit<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yi// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        public var prop: X = X(0)
        get()  {
            counter++; return field
        }
        set(a: X) {
            counter++
            field = a;
        }
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y4// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (0.0F > -0.0F) return "fail 0"
    if (greater1(0.0F, -0.0F)) return "fail 1"
    if (greater2(0.0F, -0.0F)) return "fail 2"
    if (greater3(0.0F, -0.0F)) return "fail 3"
    if (greater4(0.0F, -0.0F)) return "fail 4"

    if (greater5(0.0F, -0.0F)) return "fail 5"

    return "OK"
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<Boolean> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: Exception<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, String + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yﬂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
        s += "$i:${sarr.toList()}"
    }
yí// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let { "" }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, size(), emptyList())
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        String?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun takeClass() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yﬁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath("O", "K", 123)
}
yÔ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), b.inc().toInt())
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        box: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun box(): String {
    // kotlin.Nothing should not be loaded here
    val x = "" is Nothing
    return "OK"
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, l(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), Z(42))
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = add(2)
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‹// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, a = 2)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yö// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        twoThirty?.toByte()?.hashCode()
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y ®// Original bug: KT-28570
// Duplicated bug: KT-14961

fun box() = if (A(42) == 42) "OK" else "fail"

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÙ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, (Int) -> Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, s(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[intArrayOf]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y¸// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + Container().wrapper.runBlock())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        Int: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: T?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÚ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList(-0.0, 0)
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path && it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y’// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        x : String
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.test {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = z[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Boolean,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yñ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {"$a:$b;"}
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, T>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yX// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        return "OK"
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path == it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y·// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(p, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‹// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, value)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = A[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (Z != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

override fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y·// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        A?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): Any? {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), "b")
}
y·// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return IntArray(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// KJS_WITH_FULL_RUNTIME

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        foo: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, x(A()), emptyList())
}
y·// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(z, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÛ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (1 in iarr || 10 !in iarr) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun box(): String {
    var uint1 = 1u
    var uint2 = 2u
    var uint3 = 3u
    val uintSet = mutableSetOf(uint1)
    uintSet.add(uint2);
    {
        uintSet.add(uint3)
        if (!uintSet.contains(1u)) throw AssertionError()
        if (!uintSet.contains(2u)) throw AssertionError()
        if (!uintSet.contains(3u)) throw AssertionError()
    }()
    return "OK"
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, i, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): value<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y›// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    name(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, Byte(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup + null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return my
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return Host
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

// KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Boolean>()
    l.add(true)
    val x = !l[0]
    if (x) return "Fail: $x}"
    return "OK"
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[0]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‹// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = a[0]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y⁄// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun b(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, hasNext(), emptyList())
}
yÓ// !LANGUAGE: +InlineClasses
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y–// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        var s = ""
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        foo?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        append: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(3, emptyMap(), emptyList())
}
yﬁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        vararg e: T,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y⁄// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return s(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÆ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return bar
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÚ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        f: (String) -> String,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y◊// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        a: T,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        i: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÛ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val found = Empty.valueOf("nonExistentEntry")
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        x: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, ext, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, p(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.String {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yﬁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    param(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, i, emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = s()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.b {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(1.toByte(), groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yı// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): InlineNotNullPrimitive {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yW// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun box(): String {
    val s = StringBuilder()
    for ((index, x) in xs.withIndex()) {
        return "Loop over empty list should not be executed"
    }
    return "OK"
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), box())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val box = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.Singleton())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.contains {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÌ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, shortVararg, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        C: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: x<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y·// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(r, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yF// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) "$sorted"

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÔ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + String.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (String != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y·// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        Z?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yﬂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, this + 1)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y›// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        b: Boolean,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (global != 2) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<String>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[String]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return Int
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÓ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(AssertionError, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return value
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y÷// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        val x: Long
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yµ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
        x += "O"
        x += "K"
    }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÏ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, Outer + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (result == "   ") {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
        if (v != null) {
            v
        }
        else {
            b
        }
    }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = String()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y Ã// Original bug: KT-28570
// Duplicated bug: KT-14961

// MODULE: main(lib)
// FILE: main.kt
fun box(): String {
    return A().test()
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÎ// Original bug: KT-28570
        }

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
// Duplicated bug: KT-14961
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())

yﬁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + )
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), ())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: ?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y◊// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, )
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?. {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y€// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if () {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y'// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y´// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return 
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path  it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, (), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + .toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y§// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0,emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}y”// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        ,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup  groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
: List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main) {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(, emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: MapInt, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÀ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y∆// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÿ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = 
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            returnfindBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‡// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yﬂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path:  = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, >,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList()
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup= groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup,groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): <String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
     (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: ListString> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: ,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }}

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString()
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> 
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
) List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList)
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec funfindBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
x{// Original bug: KT-28570
// Duplicated bug: KT-14961



fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup =groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap() emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yœ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString))
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList))
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yŸ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return (parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, , path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main(){
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): ListString> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let{
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path


fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())}
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yﬂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
):  {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec  findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‰// Original bug: KT-28570
// Duplicated bug: KT-14961

 fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != ) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return 
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(),emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup:Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrecfun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = [appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
             findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = ()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup!= null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap,  + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y›// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        ,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let 
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‚// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yŸ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    (0, emptyMap(), emptyList())
}
y=// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) 

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGrouplet {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yà// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath0, emptyMap(), emptyList())
}
yŸ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun (
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‡// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        ?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        : List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÊ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y·// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, , emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
         parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path:List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if(appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yﬁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: ,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap:Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‡// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = 
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPathparentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null){
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0 emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÂ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

     path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yå// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let 
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‡// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    returnpath
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() 
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
):List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yﬁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if ( != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yΩ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup !=null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())}
y// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> 

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÖ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath: List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList)
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y„// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

 main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMapappGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yË// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: <Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList(
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String>  emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main( {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String>= emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y“
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> =emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y·// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‡// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), )
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup  null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y–// Original bug: KT-28570


tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap, emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap,path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÈ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: <String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yµ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() 
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int,Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y™// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}


yÍ// Original bug: KT-28570// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y·// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.)
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
y‡// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val  = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÍ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) 
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun main() {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
yÁ// Original bug: KT-28570
// Duplicated bug: KT-14961

tailrec fun findBreadcrumbPath(
        appGroup: Int?,
        groupsMap: Map<Int, Int>,
        path: List<String> = emptyList()
): List<String> {
    if (appGroup != null) {
        val parentGroup = groupsMap[appGroup]
        parentGroup?.let {
            return findBreadcrumbPath(parentGroup, groupsMap, path + it.toString())
        }
    }

    return path
}

fun () {
    findBreadcrumbPath(0, emptyMap(), emptyList())
}
ˇˇ