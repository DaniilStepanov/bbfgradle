øiexportTaggdefaultnoriginalSampley;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
gmutantsüyq// Original bug: KT-40518
// Duplicated bug: KT-18583


val i = false
try
{sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}}
catch(e: Exception){}
finally{}

yp// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<
val f = false
when (f) {
 true -> {T}
 else -> {T}
}
> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yå// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    
val j = true
if (j) {data class Success<T>(val value: T) : Result<T>()} else {data class Success<T>(val value: T) : Result<T>()}

    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yq// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    
val u = false
try
{data class Failure(val exception: Throwable) : Result<Nothing>()}
catch(e: Exception){}
finally{}


    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y÷// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    
val m = true
when (m) {
 true -> {fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }}
 else -> {fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }}
}

}
y|// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>
val r = true
when (r) {
 true -> {(val value: T)}
 else -> {(val value: T)}
}
 : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yu// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure
val d = true
if (d) {(val exception: Throwable)} else {(val exception: Throwable)}
 : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y∞// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = 
val j = true
if (j) {when (this) {
        is Success -> value
        is Failure -> throw exception
    }} else {when (this) {
        is Success -> value
        is Failure -> throw exception
    }}

}
yo// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<
val t = true
when (t) {
 true -> {T}
 else -> {T}
}
>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y`// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (
val v = false
if (v) {this} else {this}
) {
        is Success -> value
        is Failure -> throw exception
    }
}
yg// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(
val o = true
if (o) {val value: T} else {val value: T}
) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yx// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : 
val e = false
when (e) {
 true -> {Result<T>}
 else -> {Result<T>}
}
()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yt// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(
val y = false
if (y) {val exception: Throwable} else {val exception: Throwable}
) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y~// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : 
val g = false
when (g) {
 true -> {Result<Nothing>}
 else -> {Result<Nothing>}
}
()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
ys// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (
val o = false
when (o) {
 true -> {this}
 else -> {this}
}
) {
        is Success -> value
        is Failure -> throw exception
    }
}
y`// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> 
val t = true
if (t) {value} else {value}

        is Failure -> throw exception
    }
}
yk// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> 
val v = false
if (v) {throw exception} else {throw exception}

    }
}
yd// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw 
val p = true
if (p) {exception} else {exception}

    }
}
yq// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: 
val y = false
try
{T}
catch(e: Exception){}
finally{}
) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yt// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : 
val x = true
when (x) {
 true -> {Result}
 else -> {Result}
}
<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yq// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: 
val y = false
try
{Throwable}
catch(e: Exception){}
finally{}
) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
ya// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : 
val u = true
if (u) {Result} else {Result}
<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yu// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is 
val c = true
when (c) {
 true -> {Success}
 else -> {Success}
}
 -> value
        is Failure -> throw exception
    }
}
yc// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is 
val f = false
if (f) {Failure} else {Failure}
 -> throw exception
    }
}
yp// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<
val g = false
when (g) {
 true -> {T}
 else -> {T}
}
>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yv// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<
val w = false
when (w) {
 true -> {Nothing}
 else -> {Nothing}
}
>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y0// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(() : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw (exception)
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<(Nothing)>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this!!) {
        is Success -> value
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: (T)?) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : (Result<T>)?()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: (Throwable)?) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : (Result<Nothing>)?()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is (Success)? -> value
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is (Failure)? -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<(T)?>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<(Nothing)?>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (}) {
        is Success -> value
        is Failure -> throw exception
    }
this
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : }()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
Result<T>
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    ) class Success<T>(val value: T) : Result<T>(data
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    () class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>data

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: exception) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw Throwable
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val ): T) : Result<T>()
    data class Failure(val exception: Throwablevalue : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<is Failure>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        T -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(fun) : Result<Nothing>()

    val exception: Throwable getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is throw exception -> value
        is Failure -> Success
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>(this

    fun getOrThrow() = when ()) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: () : Result<Nothing>()

    fun getOrThrow() = when Throwablethis) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>getOrThrow)

    fun (() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : is Success -> value<Nothing>()

    fun getOrThrow() = when (this) {
        Result
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Success
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Result<T>() -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(<T> value: T) : Resultval()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        exception
        is Failure -> throw is Success -> value
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed Failure Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is class -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Success<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Result -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data val Success<T>(class value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed is Success -> value Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        class
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    fun class Failure(val exception: Throwable) : Result<Nothing>()

    data getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) ) Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this: {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val Failure: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is exception -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success)T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this< {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success((val value: T) : Result<T>()
    data class Failure<T>val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>throw exception)
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> (
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class ResultResult<T>() {
    data class Success<T>(val value: T) : <T>
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Success>()

    fun getOrThrow() = when (this) {
        is Nothing -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: }) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    Throwable
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class ResultFailure {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is <T> -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<)>()
    data class Failure(val exception: ThrowableT : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class T<T>(val value: T) : Result<Success>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) (val exception: Throwable) Result<T>()
    data class Failure: : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : }()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    Result<Nothing>
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<(>T)
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

T class Result<T> {
    data class Success<T>(val value: T) : Result<sealed>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
is Failure

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        // Duplicated bug: KT-18583 -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class <<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : ResultResultNothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Success<Nothing>()

    fun getOrThrow() = when (this) {
        is Result -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<data class Failure(val exception: Throwable) : Result<Nothing>()>(val value: T) : Result<T>()
    T

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<is Failure -> throw exception>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        T
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class =(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() Failure when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    T
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class ResultSuccess {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is <T> -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: ()) : Result<T>T
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>Success)
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is ( -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (thisis Failure -> throw exception {
        is Success -> value
        )
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>(Success

    fun getOrThrow() = when (this) {
        is ) -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: () : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrowT) = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwablethis : Result<Nothing>()

    fun getOrThrow() = when ()) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    Result<Nothing> class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : data()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>(:
    data class Failure(val exception) Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

value class Result<T> {
    data class Success<T>(val sealed: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<TResult(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : ><Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failurethrow exception : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> (val exception: Throwable)
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val when (this) {
        is Success -> value
        is Failure -> throw exception
    }: Throwable) : Result<Nothing>()

    fun getOrThrow() = exception
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T()(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow> = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: is Failure) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        Throwable -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Failure -> value
        is Success -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result(()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when <T>this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: )) : Result<Nothing>()

    fun getOrThrow(Throwable = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<TT {
    data class Success<T>(val value: T) : Result<>>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    exception class Success<T>(val value: T) : Result<T>()
    data class Failure(val data: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val T: T) : Result<value>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class }<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
Success
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<when (this) {
        is Success -> value
        is Failure -> throw exception
    }>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = T
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<exception>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw T
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class FailureResult<Nothing> : (val exception: Throwable)()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Resultval {
    data class Success<T>(<T> value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class }<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
Result
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<Nothing>()<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: () : Result<T>()
    data class FailureTval exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : throw

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> Result<Nothing>() exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(:) : Result<T>()
    data class Failure(val exception: Throwable) val value: T Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class ResultResult<T>()T> {
    data class Success<T>(val value: T) : <
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<data class Failure(val exception: Throwable) : Result<Nothing>()>()
    T

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>> : Result<T(val value: T)()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class ResultfunT> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    < getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<{
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}> T
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>class)
    data ( Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: Throwable) : Result<T>()
    data class Failure(val exception: T) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<Result<T>> {
    data class Success<T>(val value: T) : T()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: value) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> T
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : ()<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrowResult = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrowSuccess = when (this) {
        is () -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<)>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (thisT {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: <T>) : ResultT()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<Tthis {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (>) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class data<T> {
    data class Success<T>(val value: T) : Result<T>()
    Result class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: ->) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure Throwable throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

< class Result<T> {
    data class SuccesssealedT>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : this<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (Result) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        exception Failure -> throw is
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class SuccessFailureT>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is < -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Success()

    fun getOrThrow() = when (this) {
        is Result<Nothing> -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    Failure class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is data -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T()(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>>

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<is Success>()

    fun getOrThrow() = when (this) {
        Nothing -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>())
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow( = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<is Failure>()

    fun getOrThrow() = when (this) {
        is Success -> value
        Nothing -> throw exception
    }
}
y;sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
// Duplicated bug: KT-18583

// Original bug: KT-40518
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T>()<T> {
    data class Success<T>(val value: T) : Result
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success((val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when <T>this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : when (this) {
        is Success -> value
        is Failure -> throw exception
    }<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = Result
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<is>()

    fun getOrThrow() = when (this) {
        Nothing Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val valueFailure T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is : -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<Result> {
    data class Success<T>(val value: T) : T<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Successthrow(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> <T> exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: )) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (thisT {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class {(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) Failure
        is Success -> value
        is Failure -> throw exception
    }
}
y;data class Success<T>(val value: T) : Result<T>()
// Duplicated bug: KT-18583

sealed class Result<T> {
    // Original bug: KT-40518
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<Nothing>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<T>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<Result<Nothing>()>()
    data class Failure(val exception: Throwable) : T

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (Success) {
        is this -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>(Result
    data class Failure(val exception: Throwable) : )<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<val value: T>(T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<(>(val value: T) : Result<T>()
    data class FailureTval exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<:> {
    data class Success<T>(val valueT T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: throw) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> Throwable exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    T
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result:T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception< Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun this() = when (getOrThrow) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exceptionwhen (this) {
        is Success -> value
        is Failure -> throw exception
    } Throwable) : Result<Nothing>()

    fun getOrThrow() = :
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: Result<Nothing>) : Result<T>()
    data class Failure(val exception: Throwable) : T()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exceptionSuccess Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is : -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
    data class Failure(val exception: Throwable) : Result<Nothing>()

    Result<T>()
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class ResultFailureT> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is < -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() value when (this) {
        is Success -> =
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>Result<Nothing>())
    data class Failure(val exception: Throwable) : (

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: is) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        Throwable Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: is Success -> value) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        T
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data Nothing Failure(val exception: Throwable) : Result<class>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>)
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow(() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>Result : Result<T>()
    data class Failure(val exception: Throwable) : (val value: T)<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success)(val value: T<T> : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class ResultResult<Nothing>T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : <()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow-> = when (this) {
        is Success -> value
        is Failure () throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: Tthis : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when ()) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrowFailure) = when (this) {
        is Success -> value
        is ( -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class FailureNothing : Result<(val exception: Throwable)>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : >
    data class Failure(val exception: Throwable) : Result<NothingResult<T>()()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T><Nothing>val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result(()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is is Failure -> throw exception -> value
        Success
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class SuccessT(val value: <T>) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data T Success<T>(val value: class) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: Failure) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is T -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

class class Result<T> {
    data sealed Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<(>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when Tthis) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val valueSuccess T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is : -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class is Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Resultwhen()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = <T> (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<is>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        T Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(is Success -> value value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        val
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> (
    data class Success<T>(val value: T) : Result<T>{)
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : ResultFailureT>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is < -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

{
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
} class Result<T> sealed
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) ( Result<Nothing>()

    fun getOrThrow() = when :this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data } Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    class
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<Throwable>()
    data class Failure(val exception: T) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val exception: Throwable) : Result<T>()
    data class Failure(val value: T) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<throw exception>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> Nothing
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Nothing()
    data class Failure(val exception: Throwable) : Result<Result<T>>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>(fun
    data class Failure(val exception: Throwable) : Result<Nothing>()

    ) getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Failure()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Result<Nothing> -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>throw exceptionval value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> (
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: () : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when Tthis) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}

// Duplicated bug: KT-18583
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: Result) : T<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is exception -> throw Failure
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(is Failure -> throw exception) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        val exception: Throwable
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure) : Result<Nothing>()

    fun getOrThrow() = when (this(val exception: Throwable) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class SuccessThrowableT>(val value: T) : Result<T>()
    data class Failure(val exception: <) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>Result<Nothing>()val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : (

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data Result Failure(val exception: Throwable) : class<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<Nothing>()()
    data class Failure(val exception: Throwable) : Result<T>

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    when (this) {
        is Success -> value
        is Failure -> throw exception
    }

    fun getOrThrow() = data class Failure(val exception: Throwable) : Result<Nothing>()
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> (
    data class Success<T>(val value: T) : Result<T>()
    data class Failure{val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : this

    fun getOrThrow() = when (Result<Nothing>()) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>((val value: T)

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    value class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> data
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Success

    fun getOrThrow() = when (this) {
        is Result<Nothing>() -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : value<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> Result
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T} : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
)
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> Failure
    data class Success<T>(val value: T) : Result<T>()
    data class {(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: Success) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is T -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is throw -> value
        is Failure -> Success exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<>Nothing()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : ResultdataT>()
    < class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<<>()
    data class Failure(val exception: Throwable) : ResultTNothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data Failure Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is class -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: >) : Result<NothingThrowable()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
T

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<// Duplicated bug: KT-18583>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: when) : Result<Nothing>()

    fun getOrThrow() = Throwable (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: )T : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : (

    fun getOrThrowResult<Nothing>()) = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<is Failure -> throw exception>()

    fun getOrThrow() = when (this) {
        is Success -> value
        Nothing
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : throw<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> Result exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

) class Result<T> {
    data class Success<T>(val value: T) : Result<T>(sealed
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result{
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
} <T>
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<Failure> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is T -> throw exception
    }
}
y;(
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>// Original bug: KT-40518)

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : {()

    fun getOrThrow() = when (this) Result<Nothing>
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>Result<Nothing>
    data class Failure(val exception: Throwable) : ()()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : ->()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success Result<T> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<()> {
    data class Success<T>(val value: T) : Result<T>T
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>(Result<Nothing>()
    data class Failure(val exception: Throwable) : )

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : value

    fun getOrThrow() = when (this) {
        is Success -> Result<Nothing>()
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Result<T>(val value: T) : Success<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : (
    data class Failure(val exception: Throwable) : Result<Nothing>Result<T>())

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : (val exception: Throwable)
    data class FailureResult<T>() : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<Success>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is T -> value
        is Failure -> throw exception
    }
}
y;Nothing
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<// Original bug: KT-40518>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    ( class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when datathis) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>: (val value: T) Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;)
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this// Original bug: KT-40518 {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: is) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        T Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    exception class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw data
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (is Success) {
        this -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<)>()

    fun getOrThrow(Nothing = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>throwval value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> ( exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result:T>()
    data class Failure(val exception< Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

: class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) sealed Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (}) {
        is Success -> value
        is Failure -> throw exception
    this
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val valuethis T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (:) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class ResultResult<T>T> {
    data class Success<T>(val value: T) : <()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(Result<Nothing> value: T) : Result<T>()
    data class Failure(val exception: Throwable) : val()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    is Failure -> throw exception class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        data
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: value) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> Throwable
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>Failure

    fun getOrThrow() = when (this) {
        is Success -> value
        is () -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : ResultNothing()
    data class Failure(val exception: Throwable) : Result<<T>>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: exception) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw T
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<Tdata()
    > class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val this: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (value) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(() : Result<Nothing>val exception: Throwable)

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;()
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>// Original bug: KT-40518
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result->T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure < throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) Nothing Result<:>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class ->(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure Failure throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>dataval value: T) : Result<T>()
    ( class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(is Success -> value) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        val exception: Throwable
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is -> -> value
        is Failure Success throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class FailureThrowableval exception: () : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data T Success<T>(val value: T) : Result<class>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val valueis Failure T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        : -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<:>(val value: T) : Result<T>()
    data class Failure(val exceptionT Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<)>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>(T

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result=T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() < when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Failure()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Result<T> -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class when (this) {
        is Success -> value
        is Failure -> throw exception
    }<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = Result
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result)Nothing>(<

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    Success

    fun getOrThrow() = when (this) {
        is data class Failure(val exception: Throwable) : Result<Nothing>() -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow( = when ()this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothingis Success -> value()

    fun getOrThrow() = when (this) {
        >
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Failure

    fun getOrThrow() = when (this) {
        is Success -> value
        is Result<Nothing>() -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result>()
    data class Failure(val exception: Throwable) : Result<Nothing<T>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>Success
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is () -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed (val exception: Throwable) Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failureclass : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(Success) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is val exception: Throwable -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed T Result<T> {
    data class Success<T>(val value: class) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T:(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) > Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(Result) : val value: T<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun Failure() = when (this) {
        is Success -> value
        is getOrThrow -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data this Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (class) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

T class Result<sealed> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<Success> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is T -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<Tdata class Failure(val exception: Throwable) : Result<Nothing>()(val value: T) : Result<T>()
    >

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: TThrowable : Result<T>()
    data class Failure(val exception: )) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> Failure
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is { -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    value
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> data class Success<T>(val value: T) : Result<T>()
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val >: T) : Result<Tvalue()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>(->

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure ) throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: Result<T>()) : T
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : fun()

    Result<Nothing> getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Failure(val exception: Throwable) : Result<Nothing>() class Success<T>(val value: T) : Result<T>()
    data

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;Success
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class // Original bug: KT-40518<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data throw exception Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> class
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    Result<Nothing>() class Failure(val exception: Throwable) : data

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : exception
    data class Failure(val Result<T>(): Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure=val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() ( when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : is Failure -> throw exception<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        Result
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<Tdata {
    > class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success()T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow< = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : is()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        Result<T> Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Failure) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Throwable -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val ): T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (thisvalue {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<Tval exception: Throwable(val value: T) : Result<T>()
    data class Failure(>) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;T
// Duplicated bug: KT-18583

sealed class Result<// Original bug: KT-40518> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<is>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        T Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<Nothing>()
    data class Failure(val exception: Throwable) : Result<T>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<(>()

    fun getOrThrowNothing) = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Resultwhen (this) {
        is Success -> value
        is Failure -> throw exception
    } {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = <T>
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>T : Result<(val value: T)>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : data
    Result<T>() class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;is Failure -> throw exception
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        // Original bug: KT-40518
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Nothing) : Result<Throwable>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failurethisval exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (() {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> throw
        is Failure -> value exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>)val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this( {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>isval value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        ( Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success>T>(val value: T) : Result<T<()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    Throwable class Failure(val exception: data) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<exception>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw Nothing
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: Tis Failure : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        ) -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>exception
    data class Failure(val (): Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Failure<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Result -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val exception: Throwable)val value: T) : Result<T>()
    data class Failure( : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : this()

    fun getOrThrow() = when (Result<Nothing>) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
(

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when // Duplicated bug: KT-18583this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<value>()

    fun getOrThrow() = when (this) {
        is Success -> Nothing
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<throw exception> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> T
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

{ class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) sealed
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>Result<Nothing> : Result<T>()
    data class Failure(val exception: Throwable) : (val value: T)()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : )()

    fun getOrThrow() = when (thisResult<Nothing> {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        } Success -> value
        is Failure -> throw exception
    }
is
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(this value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (val) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>data : Result<T>()
    (val value: T) class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<}> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    T
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(Result<Nothing>) : val exception: Throwable()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    exception class Failure(val data: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Resultfun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    } {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    <T>
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: data class Failure(val exception: Throwable) : Result<Nothing>()) : Result<T>()
    T

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>Result<Nothing>() : Result<T>()
    data class Failure(val exception: Throwable) : (val value: T)

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class when (this) {
        is Success -> value
        is Failure -> throw exception
    }(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = Failure
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<NothingFailure()

    fun getOrThrow() = when (this) {
        is Success -> value
        is > -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : getOrThrow
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun Result<T>()() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure> : Result<Nothing(val exception: Throwable)()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

exception class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw sealed
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    ( class Failuredataval exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data fun Failure(val exception: Throwable) : Result<Nothing>()

    class getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result(val value: T)T> {
    data class Success<T>< : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>((
    data class Failure)val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Throwable(val exception: Failure) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>this : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when ((val value: T)) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<}>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    T
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Failure>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Nothing -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class ResultResult {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : <T><Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() this when (=) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
Success

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is // Duplicated bug: KT-18583 -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : {<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) Result
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: this) : Result<Nothing>()

    fun getOrThrow() = when (Throwable) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: =) : Result<Nothing>()

    fun getOrThrow() Throwable when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) Success Result<Nothing>()

    fun getOrThrow() = when (this) {
        is : -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data exception Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw class
    }
}
y;(
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>// Original bug: KT-40518val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<>T {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<val exception: Throwable>(val value: T) : Result<T>()
    data class Failure(T) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> Throwable
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: {) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<Nothing> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<T>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    }

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    data class Failure(val exception: Throwable) : Result<Nothing>()
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

) class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow(sealed = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failureis : Result<Nothing>()

    fun getOrThrow() = when (this) {
        (val exception: Throwable) Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = value (this) {
        is Success -> when
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val valueResult<T>() T) : :
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failurethrow : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> (val exception: Throwable) exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>Nothing : Result<T>()
    data class Failure(val exception: Throwable) : Result<(val value: T)>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (is) {
        is Success -> value
        this Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T><Nothing>)
    data class Failure(val exception: Throwable) : Result(()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        Failure -> value
        is is Success -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothingis Success()

    fun getOrThrow() = when (this) {
        > -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Result) : Throwable<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val valueT T) : Result<:>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<Tvalue(val >: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : is Failure
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        Result<T>() -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    this class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (data) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Failure
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Result<T>() -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val this: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (exception) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data is Success -> value Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        class
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>(->
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure ) throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

Success class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is sealed -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Resultthrow exception {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> <T>
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

Failure class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is sealed -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failureexceptionval exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw (
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> Nothing
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<{>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: <Nothing>) : Result<T>()
    data class Failure(val exception: Throwable) : ResultT()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<Throwable> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: T) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<Result<Nothing>()> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : T

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<()> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>T

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result->()

    fun getOrThrow() = when (this) {
        is Success <Nothing> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : when

    fun getOrThrow() = Result<Nothing>() (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
<

sealed class Result// Duplicated bug: KT-18583T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<data>()
    T class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: Nothing) : Result<T>()
    data class Failure(val exception: Throwable) : Result<T>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<when (this) {
        is Success -> value
        is Failure -> throw exception
    }>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = T
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class value(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> Failure
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class SuccessResult(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : <T><Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(is) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        val exception: Throwable Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun throw() = when (this) {
        is Success -> value
        is Failure -> getOrThrow exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<throw>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> Nothing exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow(is = when (this) {
        is Success -> value
        ) Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(Result<T>()) : val value: T
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<getOrThrow>()

    fun Nothing() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class val exception: Throwable<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(Result) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class =<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() Result when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    throw getOrThrow() = when (this) {
        is Success -> value
        is Failure -> fun exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>Throwable
    data class Failure(val exception: ()) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) Success
        is { -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Resultdata {
    data class Success<T>(val value: T) : Result<T>()
    <T> class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: Result) : Result<T>()
    data class Failure(val exception: Throwable) : T<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<Result<T>()> {
    data class Success<T>(val value: T) : T
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure throw -> exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<>> {
    data class Success<TT(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(Failure value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is val -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(>) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothingval value: T()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result< {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<T>Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    exception getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw fun
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T->(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure > throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class )<T> {
    data class Success<T>(val value: T) : Result<T>(Result
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success()(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing><T>

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Failure<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Result -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) is Failure -> throw exception Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        :
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>getOrThrow : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun (val value: T)() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    // Original bug: KT-40518
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : ResultthrowT>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> < exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : this<Nothing>()

    fun getOrThrow() = when (Result) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow(Failure = when (this) {
        is Success -> value
        is ) -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(Throwable value: T) : Result<T>()
    data class Failure(val exception: val) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    Nothing
    data class Failure(val exception: Throwable) : Result<data class Success<T>(val value: T) : Result<T>()>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>->)

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure ( throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> (val exception: Throwable)
    data class Success<T>(val value: T) : Result<T>()
    data class Failure{ : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<Failure>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is T -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<Result<Nothing>>()
    data class Failure(val exception: Throwable) : T()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    is class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        data Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exceptionFailure Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is : -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>val exception: Throwable)
    data class Failure(() : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : when (this) {
        is Success -> value
        is Failure -> throw exception
    }
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = Result<T>()
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val valuewhen (this) {
        is Success -> value
        is Failure -> throw exception
    } T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = :
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> throw exception
        is Failure -> value
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class ResultT {
    data class Success<T>(val value: <T>) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value> T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing:()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    <T> class Successdata(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value-> T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure : throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class FailureSuccessval exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is ( -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : is Failure

    fun getOrThrow() = when (this) {
        is Success -> value
        Result<Nothing>() -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failurethrowval exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> ( exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed Result<T> Result<T> {
    data class Success<T>(val value: T) : class()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class this(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (Failure) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : data()
    Result<T> class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T{
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
} >
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T< : Result)T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) Result<Nothing> Result<T>()
    data class Failure(val exception: Throwable) : :()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<getOrThrow>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun T() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : (val exception: Throwable)()
    data class FailureResult<T> : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<=>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() T when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : (()
    data class Failure(val exception: Throwable) : Result<Nothing>Result<T>)

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) Result<T> :()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

Result<T> class Result<T> {
    data class Success<T>(val value: T) : sealed()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Resultdata {
    <T> class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    Result class Failure(val exception: Throwable) : data<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<Tfun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    >
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class box<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y0// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(x) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y@// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is ArrayList<*> -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class get<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<foo> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (B) {
        is Success -> value
        is Failure -> throw exception
    }
}
y1// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : A
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

open class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Double<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
xR// Original bug: KT-40518
// Duplicated bug: KT-18583

class Box<T>(val value: T)
yK// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(private val x: Long, private val y: Char) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> bar
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<FOO>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y3// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: A) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is A -> value
        is Failure -> throw exception
    }
}
y/// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>() : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Int<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y0// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val x: String) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yf// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        plusZero == minusZero -> {
                return "fail 3"
            }
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<String>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is String -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is String -> value
        is Failure -> throw exception
    }
}
y-// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    open class Player(val name: String)
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y@// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: String) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
ys// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    // KJS_WITH_FULL_RUNTIME
fun box(): String {
    val l = ArrayList<Int>()
    l.add(1)
    val x = l[0] * 2
    if (x != 2) return "Fail: $x}"
    return "OK"
}
}
y@// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: string) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y2// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : String()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y3// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : A()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : A<String>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yP// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: ReadOnlyProperty<Test, String>) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y?// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun AssertionError() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y,// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(t: String) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
xZ// Original bug: KT-40518
// Duplicated bug: KT-18583

inline class S(val string: String)
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    inline class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: Int) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y?// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> operation
        is Failure -> throw exception
    }
}
yà// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: C) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y3// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: p) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y@// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<String>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yC// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<Exception>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Foo({ s })
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: String) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y Ü// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    fun toByteArray() = ByteArray(1) { i.toByte() }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is A.C -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is bar -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: a) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val Inner: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y2// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun b() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y ü// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    fun foo(): String = "foo"

    fun bar(x: String = "default") = "bar:$x"
}
y-// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : B()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun box(): String {
  val e = GameError("foo")
  return if (e.message == "foo") "OK" else "fail"
}
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Int>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Local(true)
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y$// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(i) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y@// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val MutableSet: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y#// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure() : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is retainAll -> value
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

operator class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yI// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Pair<String, Boolean> -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Double -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    open class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : test<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : TestClass<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yZ// Super calls to Throwable properties are not supported
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y<// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>(u)
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yy// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when {
        z.foo("") != "Z" -> "Fail #1"
        b.foo("") != "Z" -> "Fail #2"
        a.foo("") != "Z" -> "Fail #3"
        else -> "OK"
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw reflect
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<T>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : String()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y2// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Father()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y<// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(x: Array<Int>) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val Int: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw box
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is B -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<a>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : foo<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun String() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is A.C -> throw exception
    }
}
y Í// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun box() = R(0).test()
}
y<// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Delegate(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<C>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    private class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val a: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<C>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : equals<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : ("O", { FOO.x })

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y0// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Long()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y@// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    companion class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    class A

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: InlinedBase) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y&//ok
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<exit>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y?// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Comparator<String?>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yC// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : BaseGeneric<List<Int>>(t)

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : bx<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val s: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yP// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : SomeClass(3.14, 42, "No", "OK", "Yes")

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y-// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    inner open class B2(p: String) : A3("B2.param,$p")

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y<// Original bug: KT-40518
// !LANGUAGE: +InlineClasses

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y,// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val z: Z1) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y?// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Collection<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

companion class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is B -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is result -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<ULong>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: toString) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y-// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : A()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y$// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(A) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y0// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val s: String) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y3// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : T()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<Int>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yB// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    public open class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yF// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    public abstract class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yD// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<ResultType>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// KJS_WITH_FULL_RUNTIME

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : String<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yK// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Map.Entry<String, String>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y3// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw e
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Any -> throw exception
    }
}
y5// See also KT-6299
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y<// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<II>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Long>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : UInt()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Test1()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y.// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Tr()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> msg
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<log>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y3// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val a: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yE// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<Array<Byte>>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yZ// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    class A {
    companion object {
        operator fun invoke(i: Int) = i
    }
}
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
  fun Int.foo(a: Int = 1): Int {
      return a
  }

  fun test(): String {
      if (1.foo() != 1) return "fail"
      if (1.foo(2) != 2) return "fail"
      return "OK"
  }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is MAX_VALUE -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is box -> throw exception
    }
}
yC// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val fn: () -> String) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Bar("")
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yB// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Byte.Companion>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw String
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val i: Int) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Pet()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y?// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<out A> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is H -> value
        is Failure -> throw exception
    }
}
yC// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is ArrayWrapper<T> -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<my>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw Byte
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val b: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw notNull
    }
}
y<// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> String
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<Long>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<result>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Your()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val v: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Delegates -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Int) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    open class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y2// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Double()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y<// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val z: String) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y≤// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    class N() : ArrayList<Any>() {
    override fun add(el: Any)  : Boolean {
        if (!super<ArrayList>.add(el)) {
            throw Exception()
        }
        return false
    }
}

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y/// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Int()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y.// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val a: Any?) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<T, Int, V>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y§// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    fun empty() = ""
    fun withParam(a: String) = a
    fun withInlineClassParam(f: Foo) = f.toString()

    fun test(): String {
        val a = empty()
        val b = withParam("hello")
        val c = withInlineClassParam(this)
        return a + b + c
    }

    override fun toString(): String {
        return x.toString()
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<a>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yB// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw AssertionError()
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : C<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<B>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

inline class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// IGNORE_BACKEND: NATIVE
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
xo// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    val method : () -> Unit?
}
yG// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(f: NoiseMaker.() -> Unit) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun box(): String {

  val u: Unit = when(En.A) {
    En.A -> {}
    En.B -> {}
  }

  return "OK"
}
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Foo(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<r>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y Ã// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    class Nested {
        val o = 111
        val k = 222
    }
    
    fun result() = (::Nested)().o + (A::Nested)().k
}
y@// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: downTo) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y3// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: f) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yÜ// Original bug: KT-40518
// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y@// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : ArrayList<Any>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y2// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    interface Base {
    fun result(): Int
}
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y(// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        "two" -> 2
    }
}
y;// Original bug: KT-40518
// !LANGUAGE: +NewInference

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : IFoo, IBar
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class sb(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y<// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Iterator -> throw exception
    }
}
y@// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    protected class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y á// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    companion object {
        fun ok() = "OK"
    }
}
y0// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : T1, T2

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<UInt>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : A<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class flag<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y<// Original bug: KT-40518
// Duplicated bug: KT-18583

private class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : init<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// no local optimizations

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

enum class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y+// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : I

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<name>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class MIN_VALUE(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y2// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun s() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Int()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    class A(
        private val x: String,
        private var y: Double
) {
    fun foo() {
        val r = {
            if (x != "abc") throw AssertionError("$x")
            y = 0.0
            if (y != 0.0) throw AssertionError("$y")
        }
        r()
    }
}
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : bar3<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: A) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y4// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        En.A -> "s1"
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class bar(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<this>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: size) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: Any) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        1 >= 1 -> "OK"
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : super<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y// Original bug: KT-40518
// Duplicated bug: KT-18583

class M {
  operator fun Int.component1() = this + 1
  operator fun Int.component2() = this + 2

  fun doTest(): String {
      var s = ""
      for ((a, b) in 0.rangeTo(2)) {
        s += "$a:$b;"
      }
      return s
  }
}
yW// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(k: String, v: ((String) -> Unit) -> Unit) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y0// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Base()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y)// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure((a, b)) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<y>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : z<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y>// !LANGUAGE: +InlineClasses
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yB// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        MyEnum.VALUE_A -> res = myEnum.value
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Inner3<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y>// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        !eq2(1, 1) -> "Fail 2"
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Base()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Id<Int>
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yf// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(
        val x: String,
        val callback: Callback
) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y=// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : closure1<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Any) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw strSet
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<*>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y3// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: C) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y-// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val i: Int) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y@// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: Float?) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
yK// Original bug: KT-40518
// Duplicated bug: KT-18583

@PublishedApi
internal class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is sum -> value
        is Failure -> throw exception
    }
}
y4// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(ignore: Exception) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun index() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: box) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Int -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583
        is Success -> value
sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {

        is Failure -> throw exception
    }
}
y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }

}y;// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

        is Success -> value
    fun getOrThrow() = when (this) {
        is Failure -> throw exception
    }
}
y;    fun getOrThrow() = when (this) {
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

// Original bug: KT-40518
        is Success -> value
        is Failure -> throw exception
    }
}
y ˚// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y*// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : 

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class <T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure-> throw exception
    }
}
xO// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> 
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data classSuccess<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y2// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: ) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow()= when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
     class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y,// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : ()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y2// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val : Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class SuccessT>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y4// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }

y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    dataclass Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throwexception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> 
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() =  (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class ResultT> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : <T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y,// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> 
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow()  when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y2// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : ()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealedclass Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when () {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success-> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: ) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}y Ê// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = 
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y!// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y
// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this){
        is Success -> value
        is Failure -> throw exception
    }
}
y4// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is  -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failureval exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y2// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw 
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) :Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T>{
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> 
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y ”// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(valexception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y1// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
         -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data classFailure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y4// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is  -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
x8// Original bug: KT-40518
// Duplicated bug: KT-18583


y4// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class <T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y2// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> valueis Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
         Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow( = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y"
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        isSuccess -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure  throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

 class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y4// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class (val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T): Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>)
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y7// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
     class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T)  Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow) = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed classResult<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y1// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
         -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : <Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>( value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y-// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T> : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y1// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun () = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure ->throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>(

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure ->  exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value:T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success  value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>)

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable): Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data  Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(valvalue: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val : T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y0// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : 
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y2// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    dataclass Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y9// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
         Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success ->value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        isFailure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : ResultNothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception}
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data  Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when(this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y2// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this {
        is Success -> value
        is Failure -> throw exception
    }
}
y // Original bug: KT-40518


sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

     getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable)  Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception:Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : ResultT>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y6// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed  Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y(// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        
        is Failure -> throw exception
    }
}
y8// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure( exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() =when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y5// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>()
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) 
        is Success -> value
        is Failure -> throw exception
    }
}
y:// Original bug: KT-40518
// Duplicated bug: KT-18583

sealed class Result<T> {
    data class Success<T>(val value: T) : Result<T>(
    data class Failure(val exception: Throwable) : Result<Nothing>()

    fun getOrThrow() = when (this) {
        is Success -> value
        is Failure -> throw exception
    }
}
ˇˇ