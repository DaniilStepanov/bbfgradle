¿iexportTaggdefaultnoriginalSampleyÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
gmutantsŸy// Original bug: KT-18583
// Duplicated bug: KT-18583

    
val m = true
try
{sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }}
catch(e: Exception){}
finally{}

yû// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<
val y = false
if (y) {T} else {T}
> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        
val s = true
try
{class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()}
catch(e: Exception){}
finally{}

        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y // Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        
val a = true
if (a) {class Yeah<T>(val meat: T) : Maybe<T>()} else {class Yeah<T>(val meat: T) : Maybe<T>()}


        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y // Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        
val g = true
if (g) {fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }} else {fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }}

    }
y?// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>
val b = true
when (b) {
 true -> {(val reasonForLog: String, val reasonForUI: String)}
 else -> {(val reasonForLog: String, val reasonForUI: String)}
}
 : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>
val q = true
when (q) {
 true -> {(val meat: T)}
 else -> {(val meat: T)}
}
 : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y’// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = 
val m = false
if (m) {when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }} else {when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }}

    }
yû// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<
val o = false
if (o) {T} else {T}
>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<
val v = true
try
{T}
catch(e: Exception){}
finally{}
>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (
val h = false
try
{this}
catch(e: Exception){}
finally{}
) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y$// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(
val p = true
when (p) {
 true -> {val reasonForLog: String}
 else -> {val reasonForLog: String}
}
, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y$// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, 
val b = false
when (b) {
 true -> {val reasonForUI: String}
 else -> {val reasonForUI: String}
}
) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : 
val u = false
if (u) {Maybe<T>} else {Maybe<T>}
()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(
val j = false
try
{val meat: T}
catch(e: Exception){}
finally{}
) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : 
val c = true
when (c) {
 true -> {Maybe<T>}
 else -> {Maybe<T>}
}
()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (
val s = true
when (s) {
 true -> {this}
 else -> {this}
}
) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> 
val d = true
if (d) {throw Exception(reasonForLog)} else {throw Exception(reasonForLog)}

            is Yeah -> meat
        }
    }
yþ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> 
val r = false
if (r) {meat} else {meat}

        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw 
val o = false
if (o) {Exception(reasonForLog)} else {Exception(reasonForLog)}

            is Yeah -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw 
val p = false
if (p) {Exception} else {Exception}
(reasonForLog)
            is Yeah -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: 
val j = false
try
{String}
catch(e: Exception){}
finally{}
, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: 
val g = true
when (g) {
 true -> {String}
 else -> {String}
}
) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : 
val c = true
when (c) {
 true -> {Maybe}
 else -> {Maybe}
}
<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: 
val x = true
when (x) {
 true -> {T}
 else -> {T}
}
) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÿ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : 
val i = false
if (i) {Maybe} else {Maybe}
<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yþ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is 
val i = false
if (i) {Nope} else {Nope}
 -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yý// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is 
val a = true
if (a) {Yeah} else {Yeah}
 -> meat
        }
    }
y// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(
val b = true
when (b) {
 true -> {reasonForLog}
 else -> {reasonForLog}
}
)
            is Yeah -> meat
        }
    }
yú// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<
val h = true
if (h) {T} else {T}
>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yú// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<
val c = true
if (c) {T} else {T}
>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : (Maybe<T>)()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }!!
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this!!) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>!!()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: (String)?, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: (String)?) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : (Maybe<T>)?()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: (T)?) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : (Maybe<T>)?()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is (Nope)? -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is (Yeah)? -> meat
        }
    }
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<(T)?>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<(T)?>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>(Yeah
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is ) -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<reasonForLog>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(T)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val (val meat: T): String) : Maybe<T>()
        class Yeah<T>reasonForUI : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙsealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
// Duplicated bug: KT-18583

    // Original bug: KT-18583
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, <T>) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybeval reasonForUI: String()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    this class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (sealed) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: StringMaybe<T>() : )
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : this()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (Maybe<T>) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<)>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: TT : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ(val meat: T)
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>// Original bug: KT-18583 : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>(// <-- Error: Kotlin: [Internal Error]
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          )
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class T<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<Maybe>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<)>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (thisT {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>Yeah : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is (val meat: T) -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>Yeah)
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is ( -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            } Yeah -> meat
        is
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        Yeah Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is class -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: Nope, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is String -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe(reasonForLog)T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception<
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        is Nope -> throw Exception(reasonForLog)
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        Maybe<T>()
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : // <-- Error: Kotlin: [Internal Error]()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          Maybe<T>
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(meat, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> val reasonForLog: String
        }
    }
yÙ>
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T// Original bug: KT-18583(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) } Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        :
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : (reasonForLog)

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw ExceptionMaybe<T>()
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>( : Maybe<T>()
        class Yeah<T>(val reasonForLog: String, val reasonForUI: String)val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: when) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = T (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: T, val reasonForUI: String) : Maybe<T>()
        class Yeah<String>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw ->(reasonForLog)
            is Yeah Exception meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<->>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope T throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        , Nope<T>(val reasonForLog: Stringclass val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: )) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (thisString {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>Yeahval reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class (<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : ()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrapMaybe<T>() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: is Yeah -> meat, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            String
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : throw<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> Maybe Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<reasonForLog>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(T)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            meat
            is Yeah -> is Nope -> throw Exception(reasonForLog)
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : this<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (Maybe) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(Yeah) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is val meat: T -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, meat) : Maybe<T>()
        class Yeah<T>(val val reasonForUI: String: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        ->

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope class Yeah<T>(val meat: T) : Maybe<T>() throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : (()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrapMaybe<T>) = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : T()
        class Yeah<T>(val meat: Maybe<T>) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : MaybereasonForLogT>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(<)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        is Yeah Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            class -> meat
        }
    }
yÙ{
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
// Duplicated bug: KT-18583

    sealed class Maybe<T> // Original bug: KT-18583
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    throw Exception(reasonForLog) class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> sealed
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<is Yeah -> meat>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            T
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<Exception>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw T(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<String> {
        class Nope<T>(val reasonForLog: T, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<(>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrapT) = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>is Nope -> throw Exception(reasonForLog) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            (val meat: T)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<throw>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> T Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI( String) : Maybe<T>()
        class Yeah<T>:val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        T
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) is Nope Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            : -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: reasonForLog) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(T)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val Exception: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw reasonForUI(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (throw Exception(reasonForLog)) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> this
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: StringT : Maybe<T>()
        class Yeah<T>(val meat: )) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe>T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T<()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    <T> class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybesealed()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(Maybe reasonForLog: String, val reasonForUI: String) : val<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>Exception(reasonForLog)val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw (
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class ><T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<TNope(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> Nope
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is { -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<Nope>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is T -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : this

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (Maybe<T>()) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: T) : Maybe<String>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : <()
        class YeahMaybe<T>T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val {: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) reasonForLog          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<TreasonForLog()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(>)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(Nope, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is val reasonForLog: String -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe()T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap< = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Yeah()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Maybe<T> -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed Maybe<T> Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : class()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Nope<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Maybe -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>> : Maybe<T>()
        class Yeah<T(val reasonForLog: String, val reasonForUI: String)(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: :, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) String Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val val meat: T: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(reasonForLog) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun this() = when (unwrap) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Yeah
            is Exception(reasonForLog) -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        Exception

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw class Yeah<T>(val meat: T) : Maybe<T>()(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(is meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            val Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = ) (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLogwhen
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (Nope) {          // <-- Error: Kotlin: [Internal Error]
            is this -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>meat : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> (val meat: T)
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is -> Nope throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>((, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exceptionval reasonForLog: StringreasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    Exception class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw sealed(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<Maybe>(val reasonForLog: String, val reasonForUI: String) : T<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: (, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>Stringval meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: Maybe<T>()) : T

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, throw reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> val Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    } Maybe<T> class
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybewhen (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = <T>
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe(val reasonForLog: String, val reasonForUI: String) {
        class Nope<T><T> : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: StringT val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<,>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        Exception
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class MaybeunwrapT> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun <() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: Stringis Yeah : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            ) -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : // <-- Error: Kotlin: [Internal Error]()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          Maybe<T>
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>Maybeval reasonForLog: String, val reasonForUI: String) : (<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>())

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap( = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Yeah<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Maybe -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class MaybeString {
        class Nope<T>(val reasonForLog: String, val reasonForUI: <T>) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Duplicated bug: KT-18583
// Original bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : T()
        class Yeah<Maybe<T>>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeahthis(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (<T>) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope(T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception<reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>Yeahval meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is ( -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) T Maybe<:>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : throw Exception(reasonForLog)<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> Maybe
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, throw Exception(reasonForLog) reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> val
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> Yeah Exception(reasonForLog)
            is throw -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String: val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat, T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        Yeah

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is class Yeah<T>(val meat: T) : Maybe<T>() -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<Tis(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            > Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeahval meat: T(<T>) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
{
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }

    sealed class Maybe<T> // Duplicated bug: KT-18583
yÙ// Original bug: KT-18583
class

    sealed class Maybe<T> {
        // Duplicated bug: KT-18583 Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>Maybeval meat: T) : (<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLogthis String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (:) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            meat -> throw Exception(reasonForLog)
            is Yeah -> is Nope
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(( reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>val)

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Maybe<T><T>(val reasonForLog: String, val reasonForUI: String) : Nope()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, String reasonForUI: val) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        (
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: >, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<TString()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Yeah -> throw Exception(reasonForLog)
            is Nope -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun Nope() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is unwrap -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(this reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (val) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: Maybe) : String<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val meat: T, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val reasonForLog: String) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(})
            is Yeah -> meat
        reasonForLog
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope,T>(val reasonForLog: String< val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<TMaybe<T>()
        class Yeah<T>(val meat: T) : >()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: reasonForUI, val String: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<is Nope -> throw Exception(reasonForLog)>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            T
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        (reasonForLog)

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exceptionclass Yeah<T>(val meat: T) : Maybe<T>()
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    } class Maybe<T> sealed
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: >, val reasonForUI: String) : Maybe<T>()
        class Yeah<TString(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>->

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah () meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : (Maybe<T>)

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<)>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLogT
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>Maybe<T> : Maybe<T>()
        class Yeah<T>(val meat: T) : (val reasonForLog: String, val reasonForUI: String)()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: this) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (String) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<val meat: T>()
        class Yeah<T>(T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<meat>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> T
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: T) : Maybe<T>()
        class Yeah<T>(val meat: String) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val <T>: String) : MaybereasonForUI()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<is Nope -> throw Exception(reasonForLog)>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            T
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap(Nope = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is ) -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<is Nope>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            T -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = T
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>((

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap)) = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class <<T>(val reasonForLog: String, val reasonForUI: String) : MaybeNopeT>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> Nope
        class {<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<TNope(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is > -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<>>()
        class Yeah<T>(val meat: T) : Maybe<TT()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrapreasonForLog = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(())
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<Tis Nope -> throw Exception(reasonForLog)()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            >
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe->()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope <T> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<(>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>T)

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<Nope>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is T -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>->val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope ( throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe// <-- Error: Kotlin: [Internal Error]()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          <T>
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val {: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) meat          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : }<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    Maybe
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: Maybe<T>) : T()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = ( (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw ExceptionwhenreasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    () class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrapsealed = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val (: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when meatthis) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> is Yeah -> meat Exception(reasonForLog)
            throw
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class YeahthrowT>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> < Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>Maybe<T>() : (val reasonForLog: String, val reasonForUI: String)
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(// <-- Error: Kotlin: [Internal Error] meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          val
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>Yeah : Maybe<T>()
        class (val reasonForLog: String, val reasonForUI: String)<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class MaybeString {
        class Nope<T>(val reasonForLog: <T>, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>Nope)

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is ( -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<Nope>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is T -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: // <-- Error: Kotlin: [Internal Error]) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          String
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        is

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            class Yeah<T>(val meat: T) : Maybe<T>() Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: Tfun : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        ) unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
(

    sealed class Maybe<T> {
        class Nope<T>// Duplicated bug: KT-18583val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    (val meat: T) class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>sealed : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>this : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when ((val meat: T)) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe}()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    <T>
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T{(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) >          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<Exception(reasonForLog)>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw T
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<TYeah()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is > -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<(val meat: T)>T : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Yeah

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Maybe<T>() -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) < Maybe:T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T< {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah>T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : ->()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah Maybe<T> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<Yeah>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is T -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            reasonForLog Nope -> throw Exception(is)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: is Nope, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            String -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed val Maybe<T> {
        class Nope<T>(val reasonForLog: String, class reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class MaybethisT> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (<) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe{T> <
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>() class Maybe<T> {
        sealed
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String(val meat: T) : Maybe<T>()
        class Yeah<T>) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (}) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    this
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, Maybe<T> reasonForUI: String) : val()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<meat>()
        class Yeah<T>(val T: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class )<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (thisMaybe {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : ()<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrapMaybe = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: )) : Maybe<T>(String
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<Yeah>()
        class T<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<Maybe<T>>()
        class Yeah<T>(val meat: T) : T()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<(val meat: T)>()
        class Yeah<T>T : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: is Yeah -> meat) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            T
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>is Nope -> throw Exception(reasonForLog))
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            (
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>}val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        (
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw is(reasonForLog)
            Exception Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah// fun unwrap(): T = when (this) {    // <-- With `: T` it's OKT>(val meat: T) : Maybe<T>()

        <

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe:()
        class Yeah<T>(val meat: T) <T> Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<fun>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        T unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : throw()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> Maybe<T> Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe
        class Yeah<T>(val meat: T) : Maybe<T>()<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }() = unwrap
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Exception(reasonForLog)<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Maybe
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: (val meat: T), val reasonForUI: String) : Maybe<T>()
        class Yeah<T>String : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>Maybe<T>
        class Yeah<T>(val meat: T) : ()()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Yeah(reasonForLog)
            is Exception -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<Tmeat()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> >
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: StringYeah val reasonForUI: String) : Maybe<T>()
        class ,<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) T Maybe<:>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<Maybe<T>> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : T()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap(this = when ()) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>is Yeah -> meat : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            (val meat: T)
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>(Maybe<T>
        class Yeah<T>(val meat: T) : )()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<Exception(reasonForLog)>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw T
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: Yeah) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is T -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (->) {          // <-- Error: Kotlin: [Internal Error]
            is Nope this throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙYeah
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is // Original bug: KT-18583 -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<Yeah>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is T -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>}val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    (
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: )) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLogString
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class NopeMaybe<T>()T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : <

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Nope()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Maybe<T> -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    val class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(sealed meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap( = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception()reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class (reasonForLog)<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw ExceptionMaybe
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is throw Exception(reasonForLog) -> Nope
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class NopeMaybe<T>T>(val reasonForLog: String, val reasonForUI: String) : <()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<>T()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope(T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap<) = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<String>(val reasonForLog: T, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah{T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) <          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: throw, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> String Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: StringreasonForLog val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(,)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>is

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            () Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: is Nope) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            String -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val meat: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> reasonForUI
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        (

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception// fun unwrap(): T = when (this) {    // <-- With `: T` it's OKreasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, Maybe<T>) : Maybe<T>()
        class Yeah<T>(val meat: T) : val reasonForUI: String()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when this() {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat() T) : Maybe<T>:

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>() Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
>

    sealed class Maybe<T> {
        class Nope<T// Duplicated bug: KT-18583(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(is Yeah meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            val -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : is Yeah -> meat()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            Maybe<T>
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() } when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        =
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(<T>, val reasonForUI: String) : Maybeval reasonForLog: String()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : (Maybe<T>)
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T><T>val meat: T) : Maybe(()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<Tis Nope()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            > -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(T) : Maybe<val meat: T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) when Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = : (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<unwrap>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun T() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah(T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap<) = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : )()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLogMaybe<T>
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : ()()
        class Yeah<T>(val meat: T) : Maybe<T>Maybe<T>

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : is()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            Maybe<T> Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class NopeMaybe<T>()(val reasonForLog: String, val reasonForUI: String) : <T>
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(Maybe<T>(), val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : val reasonForLog: String

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>Tval meat: () : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> Maybe<T>
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : {()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class reasonForUI<T> {
        class Nope<T>(val reasonForLog: String, val Maybe: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>Exception(reasonForLog) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw (val reasonForLog: String, val reasonForUI: String)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    Maybe<T> class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : sealed()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
(val reasonForLog: String, val reasonForUI: String)

    sealed class Maybe<T> {
        class Nope<T>// Duplicated bug: KT-18583 : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class T<T>(val meat: Yeah) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = Yeah (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is when -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<is Yeah>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            T -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: (reasonForLog)) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw ExceptionString
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class MaybeMaybe<T>() {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : <T>

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : MaybefunT>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        < unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLogT String, val reasonForUI: String) : Maybe<T>()
        class Yeah<:>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah{(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) <T>          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap(is Nope -> throw Exception(reasonForLog) = when (this) {          // <-- Error: Kotlin: [Internal Error]
            )
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class MaybeMaybe<T>T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : <()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Exception -> throw Nope(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val String: String, val reasonForUI: reasonForLog) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>-> : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope (val reasonForLog: String, val reasonForUI: String) throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>T : Maybe<(val meat: T)>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: ->) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope T throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T(val reasonForLog: String, val reasonForUI: String)> : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val Maybe<T>: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : reasonForLog()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI<T> String) : Maybe:()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<TMaybe<T>(val meat: T) : >()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>class
        () Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: Yeah) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is String -> meat
        }
    }
yÙ// Original bug: KT-18583
<T>

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe// Duplicated bug: KT-18583()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>when : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = (val meat: T) (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(is Nope reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            val -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<(>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw ExceptionTreasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(}) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        val meat: T
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: <) : MaybeStringT>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val ->: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah reasonForLog meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T() {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>>
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    T class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: sealed) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : this<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (Maybe) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class NopeExceptionT>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw <(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: fun) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        T unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: StringT val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: ,) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>Yeah : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is (val reasonForLog: String, val reasonForUI: String) -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : T<Maybe>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: StringT : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<)>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T><T>()
        class Yeah<T>(val meat: T) : Maybe()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> Maybe<T>()
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : {

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLogmeat
            is Yeah -> )
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        { Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) class          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<(val meat: T)> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>T : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<=>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() T when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> :
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat{ T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<Maybe<T>()>()
        class Yeah<T>(val meat: T) : T

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : (()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrapMaybe<T>) = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: Tthrow Exception(reasonForLog) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> )
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when ()) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLogthis
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLogMaybe<T> String, val reasonForUI: String) : :()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ)
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap(// Original bug: KT-18583 = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>whenval meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = ( (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<is Nope -> throw Exception(reasonForLog)>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            T
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }

    // Duplicated bug: KT-18583
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybeclass Yeah<T>(val meat: T) : Maybe<T>()()
        <T>

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<TException(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw >(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>(Nope

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is ) -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        sealed

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        > Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<Tclass()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T// <-- Error: Kotlin: [Internal Error]()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          >
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        T
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: () : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when Stringthis) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        this unwrap() = when (fun) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        Yeah unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is fun -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        throw Exception(reasonForLog)
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>is)
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            ( Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
Maybe<T>

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : // Duplicated bug: KT-18583()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class T<T>(val meat: T) : Maybe<Yeah>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe)T>(<

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class ()<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrapNope = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<->>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah T meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: Maybe<T>(), val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : String

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T>()<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>(Maybe
        class Yeah<T>(val meat: T) : )<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T<(val meat: T) : Maybe>T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>Maybe<T> : (val reasonForLog: String, val reasonForUI: String)()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        meat

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> class Yeah<T>(val meat: T) : Maybe<T>()
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(reasonForLog) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(val reasonForLog: String, val reasonForUI: String)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : MaybereasonForLogT>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(<)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe: {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) <T> Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, T reasonForUI: String) : Maybe<T>()
        class Yeah<val>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) T Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<:>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<Maybe>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : T<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    Maybe<T>() class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : sealed
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, meat) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> val reasonForUI: String
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>Exception(reasonForLog)val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw (
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<,>(val reasonForLog: StringT val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : is()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            Maybe<T> Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : T
        class Yeah<T>(val meat: T) : Maybe<Maybe<T>()>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: Exception(reasonForLog), val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw String
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T{
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    } >
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<Tclass Yeah<T>(val meat: T) : Maybe<T>()()
        >

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String(reasonForLog) val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception,
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : reasonForLog()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(Maybe<T>)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<TYeah(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is > -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: throw Exception(reasonForLog), val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> String
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : <T>()
        class Yeah<T>(val meat: T) : MaybeMaybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val fun: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        reasonForUI unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val Maybe<T>(): String) : reasonForUI
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>Exception(reasonForLog) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw (val meat: T)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
is Nope -> throw Exception(reasonForLog)

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            // Duplicated bug: KT-18583
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<is>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            T Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T(>val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForUI: String, val reasonForLog: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y ´// Original bug: KT-18583
// Duplicated bug: KT-18583

    // KJS_WITH_FULL_RUNTIME
class C(val i: Int) {
  operator fun component1() = i + 1
  operator fun component2() = i + 2
}
y¸// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Base(
            object : Callback {
                override fun invoke() =
                        (object : Callback {
                            override fun invoke() = ok
                        }).invoke()
            }
    )
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is String -> meat
        }
    }
yÚ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Double<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: test3) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<A>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y ‡// Original bug: KT-18583
// Duplicated bug: KT-18583

    enum class Foo(val a: Int = 1, val b: String) {
  B(2, "b"),
  C(b = "b")
}
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: upcast) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÑ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw x(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is B -> meat
        }
    }
yù// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class A {
    val member: String
        get() {
            state += "2"
            return "42"
        }
}
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y³// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val l: Long) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÞ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: String) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val a: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun n() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yò// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (color) {
            Color.RED -> return color
            Color.GREEN -> break@loop
            Color.BLUE -> if (arr.size == 1) return color else continue@loop
        }
    }
yß// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> PsiElement
        }
    }
yÞ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<String>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yæ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Result.ParseError -> meat
        }
    }
xx// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
    open fun foo(t: T, u: U) = "A"
}
y¨// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>() : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<C>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> b
        }
    }
yÎ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>() : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Inner<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<s>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÚ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : String<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÓ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val Double: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    operator class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: t) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val x: Long) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : byteArg<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÒ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw AssertionError()
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> C
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class String<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun result() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y³// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val v: Any?) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Int()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yß// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<String?>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÏ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // System.out.println("bottles of beer on the wall");

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÚ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T?>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yà// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: asResult) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yü// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw AssertionError("$at: expected: $expected, actual: $order")
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Boolean(reasonForLog)
            is Yeah -> meat
        }
    }
yâ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class isInitialized<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yê// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Base(run { { Host.ok() } })

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: Int) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yþ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is (TValue) -> Parser<TInput, TIntermediate> -> meat
        }
    }
yÞ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(s: String = "OK") : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<prop>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : a6<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class foo<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÞ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<string>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is a -> meat
        }
    }
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : plusZero<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : bar<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<Int>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yè// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Base(ints = *ints, s = s)

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yŸ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {

    inner class B(val s: String) {
        val result = value + "_" + s
    }

    fun classReceiver() = B("OK")

    fun newCReceiver() = C("newC").B("OK")
    fun cReceiver(): B {
        val c = C("newC")
        return c.B("OK")
    }

    fun C.extReceiver1() = this.B("OK")
    fun extReceiver() = C("newC").extReceiver1()
}
yÑ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when {
        z.foo(0) != "Z" -> "Fail #1"
        a.foo(0) != "Z" -> "Fail #2"
        b.foo(0) != "Z" -> "Fail #3"
        else -> "OK"
    }
    }
yÙ// IGNORE_BACKEND: NATIVE
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<C>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÛ// SKIP_SOURCEMAP_REMAPPING
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Base({ ok })
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÊ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw result()
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : String()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÓ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw foo(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<V>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class box<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yw// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun box(): String {
    fun <T> foo(t: T) = t

    return foo("OK")
}
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<A>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : this<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : String()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y²// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // KJS_WITH_FULL_RUNTIME

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yå// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: Array<DoubleArray>, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÁ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val a: String, val b: Int) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yº// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            null -> 1
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: size) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yç// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            a.foo("") != "Z" -> "Fail #2"
        }
    }
yá// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T.() -> R>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : T<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yä// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<Test, String>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: i) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val callback: Callback) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Int -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Test -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: T, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÍ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception()
            is Yeah -> meat
        }
    }
yÝ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class MAX_VALUE<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Int -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class B<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y±// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        interface B {
    fun foo(): String
}
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÞ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<String>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : f<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y¤// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw {
            open class B() {
                open fun s() : String = "O"
            }

            val o = object : B() {
                override fun s(): String = "K"
            }

            B().s() + o.s()
        }()
            is Yeah -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Int()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// KJS_WITH_FULL_RUNTIME
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is String -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : reflect<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÒ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(super)
            is Yeah -> meat
        }
    }
yÑ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val Int: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : arg<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÓ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val String: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÏ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val a: Int = 1, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: Any) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw toUShort(reasonForLog)
            is Yeah -> meat
        }
    }
yÞ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> BoolArray
        }
    }
yæ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<String, Double>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÒ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : M()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yå// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: WithCompanion) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÝ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<toInt>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yá// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<reified T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÒ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(operation: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>("K")
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: wrapN, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yè// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T: Comparable<T>> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yõ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : SomeClass(3.14, 42, "No", "OK", "Yes")

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÄ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // KT-4423 Enum with function not compiled

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yã// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is DatabaseEntity -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÒ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : A()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> y
        }
    }
yÓ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val MaxUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: Int, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yß// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<Boolean>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yâ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T : Number> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
x\// Original bug: KT-18583
// Duplicated bug: KT-18583

    abstract class Base(val fn: IFn)
yã// DONT_TARGET_EXACT_BACKEND: JS_IR
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÑ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw A(reasonForLog)
            is Yeah -> meat
        }
    }
yÒ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : C()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÒ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(MaxUI)
            is Yeah -> meat
        }
    }
yß// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: Comment) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yO// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        override fun hashCode() = -42
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            else -> "other"
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<box>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yè// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T: Comparable<T>>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yß// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Collection -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y®// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(a: Any) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : ax<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw predicate(reasonForLog)
            is Yeah -> meat
        }
    }
yÚ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<xs>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Out -> meat
        }
    }
yÑ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : ()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: d, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: Char) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÍ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val x: Long) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yá// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Result.Value -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÓ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(value2)
            is Yeah -> meat
        }
    }
yÚ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T1> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(ArrayList)
            is Yeah -> meat
        }
    }
yâ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Base({ Test.ok() })
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y ÿ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {

    inner class TableColumn(val name: String) {

    }

    fun column(name: String, init: TableColumn.() -> Unit) {
        val column = TableColumn(name).init()
    }
}
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    inline class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is T -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÒ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : I()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is a -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// IGNORE_BACKEND: JS_IR

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<Int>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(public val first: A, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y // Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : A(listOf(1).map { it.toString() }.joinToString())
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Base()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Long -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> T
        }
    }
y&// Auto-generated by org.jetbrains.kotlin.generators.tests.GenerateRangesCodegenTestData. DO NOT EDIT!
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÓ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : A1()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÑ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            a.foo("", 0) != "Z" -> "Fail #2"
            is Yeah -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw obj1(reasonForLog)
            is Yeah -> meat
        }
    }
yá// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            !(ax != y) -> "Fail 19"
        }
    }
yž// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when(foo()) {
    is Season.Warm -> "OK"
    is Season.Cold -> "Fail: Cold, should be Warm"
}
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : V<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yá// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: Ordinaled) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yë// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw AssertionError("Should be executed once")
            is Yeah -> meat
        }
    }
yÑ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(test)
            is Yeah -> meat
        }
    }
yË// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // KJS_WITH_FULL_RUNTIME
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(predicate)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<i>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÝ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<aBcde>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÝ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Exception<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val box: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw index(reasonForLog)
            is Yeah -> meat
        }
    }
yÚ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<fn>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yï// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // This function tells the constructor which cells are alive
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÃ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, i) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÝ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<Outer> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÚ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : String<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÓ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Int(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(ComplexClass)
            is Yeah -> meat
        }
    }
y ò// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
    companion object {
        var a: Int = 42
        private var d by Delegate(0)

        fun d() = d
        fun d(newValue: Int) { d = newValue }
    }
}
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : c<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun a() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : A<Int>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÞ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Exception<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val add: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<this>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Inner()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yã// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Result.Failure -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
x]// Original bug: KT-18583
// Duplicated bug: KT-18583

    data class Box(var value: String)
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<Char>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÄ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val o: String, val k: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÚ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : result<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val AssertionError: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y É// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
    private fun Int.foo(other: Int = 5): Int = this + other

    inner class B {
        fun bar() = 37.foo()
    }
}
yÜ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<UInt>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÑ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(from)
            is Yeah -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Base()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> rhs
        }
    }
yÓ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(String)
            is Yeah -> meat
        }
    }
y‡// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun box(): String {
    class A
    fun A.foo() = "OK"
    return (A::foo)((::A)())
}
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Trait1()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y ‹// Original bug: KT-18583
// Duplicated bug: KT-18583

    class A {
    operator fun component1() = 1
    operator fun component2() = 2
}
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw RuntimeException()
            is Yeah -> meat
        }
    }
yÚ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Array -> meat
        }
    }
yÐ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(add)
            is Yeah -> meat
        }
    }
yÛ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val s: String) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yý// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun box(): String {
    var r = ""
    for (i in 1..1)  {
        try {
            r += "O"
            break
        } finally {
            r += "K"
            continue
        }
    }
    return r
}
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(x: Any) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<c>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is left -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(hasNext)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : HtmlTag()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : R<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÐ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val let: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÎ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(f)
            is Yeah -> meat
        }
    }
yß// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun asResultCtor() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÚ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class other<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÍ// Original bug: KT-18583
// WITH_RUNTIME

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is C -> meat
        }
    }
yÞ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : parentProp<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yl// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        // KJS_WITH_FULL_RUNTIME
class ArrayWrapper<T>() {
    val contents = ArrayList<T>()

    fun add(item: T) {
        contents.add(item)
    }

    operator fun plus(rhs: ArrayWrapper<T>): ArrayWrapper<T> {
        val result = ArrayWrapper<T>()
        result.contents.addAll(contents)
        result.contents.addAll(rhs.contents)
        return result
    }

    operator fun get(index: Int): T {
        return contents.get(index)!!
    }
}

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is A -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is A -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yà// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Foo<String>(), Tr

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : IntRange()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(at: String) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
xU// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
}
yÑ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val foo: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÓ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val value: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yà// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Season.Warm -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class a<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y®// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(x: Int) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583


        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()
    sealed class Maybe<T> {
        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÙ// Original bug: KT-18583
// Duplicated bug: KT-18583
        class Yeah<T>(val meat: T) : Maybe<T>()
    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()


        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when(this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap()  when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) :Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÑ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : ()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÐ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when () {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÌ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T> : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÐ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat}
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>(
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yË// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception
            is Yeah -> meat
        }
    }
yÊ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
         Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fununwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÏ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {// <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÓ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: ) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog:String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog
            is Yeah -> meat
        }
    }
y¦// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T> : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : <T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> 
        }
    }
yÏ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : 
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed  Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÐ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class YeahT>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÐ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw (reasonForLog)
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            isYeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÒ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
             -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is  -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
         Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealedclass Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>)

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw ExceptionreasonForLog)
            is Yeah -> meat
        }
    }
yÓ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: , val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>)
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is  -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            isNope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
x<// Original bug: KT-18583
// Duplicated bug: KT-18583

    
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÂ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw 
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(valreasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap( = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T): Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this)           // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope ->throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class <T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y2// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        
    }
y³// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
             Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>( reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÓ// Original bug: KT-18583
// Duplicated bug: KT-18583sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope-> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y±// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            
            is Yeah -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope ->  Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÀ
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : MaybeT>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

         unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String,val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val : T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() =when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) :Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÓ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun () = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throwException(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI:String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
xR// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> 
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : <T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÎ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val : String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÂ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, ) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah-> meat
        }
    }
yÓ// Original bug: KT-18583
// Duplicated bug: KT-18583

     class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÁ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: ) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap) = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() =  (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class MaybeT> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class <T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÏ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()// fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat:T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : MaybeT>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T)  Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yŒ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÔ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }}
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String): Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this){          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÌ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed classMaybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÕ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class <T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap()= when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String)  Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y¾// Original bug: KT-18583


    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>(

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class NopeT>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, valreasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÒ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
             -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        classYeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y¼// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> 
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah  meat
        }
    }
yÏ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OKfun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>( meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y²// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yA// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = 
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T>{
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
             Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÍ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val : String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yš// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    
yÏ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : 

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yÖ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
y×// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope  throw Exception(reasonForLog)
            is Yeah -> meat
        }
    }
yØ// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]
            is Nope -> throw Exception(reasonForLog)
            is Yeah ->meat
        }
    }
y¥// Original bug: KT-18583
// Duplicated bug: KT-18583

    sealed class Maybe<T> {
        class Nope<T>(val reasonForLog: String, val reasonForUI: String) : Maybe<T>()
        class Yeah<T>(val meat: T) : Maybe<T>()

        // fun unwrap(): T = when (this) {    // <-- With `: T` it's OK

        fun unwrap() = when (this) {          // <-- Error: Kotlin: [Internal Error]

            is Yeah -> meat
        }
    }
ÿÿ