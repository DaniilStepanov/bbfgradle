øiexportTaggdefaultnoriginalSampley‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
gmutantsüy	// Original bug: KT-22959
// Duplicated bug: KT-22270


val f = true
try
{data class Thing(val start: Long, val end: Long)}
catch(e: Exception){}
finally{}


fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yr// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)


val i = false
when (i) {
 true -> {fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}}
 else -> {fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}}
}

y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing
val p = false
try
{(val start: Long, val end: Long)}
catch(e: Exception){}
finally{}


fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y	// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> 
val j = true
when (j) {
 true -> {{
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}}
 else -> {{
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}}
}

y$// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(
val a = false
when (a) {
 true -> {dbEvents: MutableList<Thing>}
 else -> {dbEvents: MutableList<Thing>}
}
, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y	// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, 
val t = true
try
{newEvents: MutableList<Thing>}
catch(e: Exception){}
finally{}
): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y	// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    
val u = true
try
{val res = mutableListOf<Pair<Thing, Thing>>()}
catch(e: Exception){}
finally{}


    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    
val n = false
try
{val baseIter = newEvents.iterator()}
catch(e: Exception){}
finally{}

    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÖ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    
val i = false
if (i) {baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }} else {baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }}

    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    
val o = false
when (o) {
 true -> {return res}
 else -> {return res}
}

}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(
val r = false
try
{val start: Long}
catch(e: Exception){}
finally{}
, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, 
val w = false
try
{val end: Long}
catch(e: Exception){}
finally{}
)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): 
val v = false
try
{List}
catch(e: Exception){}
finally{}
<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y+// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = 
val e = false
when (e) {
 true -> {mutableListOf<Pair<Thing, Thing>>()}
 else -> {mutableListOf<Pair<Thing, Thing>>()}
}


    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y	// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = 
val c = true
try
{newEvents.iterator()}
catch(e: Exception){}
finally{}

    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y˝// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    
val x = false
if (x) {baseIter} else {baseIter}
.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y	// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.
val g = true
try
{forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }}
catch(e: Exception){}
finally{}

    return res
}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return 
val m = false
try
{res}
catch(e: Exception){}
finally{}

}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = 
val t = true
when (t) {
 true -> {mutableListOf}
 else -> {mutableListOf}
}
<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = 
val r = false
when (r) {
 true -> {newEvents}
 else -> {newEvents}
}
.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.
val x = false
when (x) {
 true -> {iterator()}
 else -> {iterator()}
}

    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y˚// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.
val v = true
if (v) {forEach} else {forEach}
 {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: 
val u = false
try
{MutableList}
catch(e: Exception){}
finally{}
<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yˇ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: 
val n = true
if (n) {MutableList} else {MutableList}
<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¸// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.
val d = true
if (d) {iterator} else {iterator}
()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
ys// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach 
val f = true
if (f) {{base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }} else {{base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }}

    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: 
val h = false
when (h) {
 true -> {Long}
 else -> {Long}
}
, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: 
val o = true
when (o) {
 true -> {Long}
 else -> {Long}
}
)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÜ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach 
val r = true
when (r) {
 true -> {{base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }}
 else -> {{base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }}
}

    return res
}
y˘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<
val r = false
if (r) {Pair} else {Pair}
<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y]// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        
val p = false
if (p) {val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }} else {val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }}

    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<
val w = true
when (w) {
 true -> {Pair}
 else -> {Pair}
}
<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y	// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {
val t = true
try
{base}
catch(e: Exception){}
finally{}
 ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        
val j = false
try
{val eventIter = dbEvents.iterator()}
catch(e: Exception){}
finally{}


        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y	// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        
val d = true
try
{plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }}
catch(e: Exception){}
finally{}

    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<
val l = false
when (l) {
 true -> {Thing}
 else -> {Thing}
}
>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<
val p = true
when (p) {
 true -> {Thing}
 else -> {Thing}
}
>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = 
val f = true
if (f) {dbEvents.iterator()} else {dbEvents.iterator()}


        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y˙// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ 
val y = true
when (y) {
 true -> {eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }}
 else -> {eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }}
}

    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = 
val s = false
when (s) {
 true -> {dbEvents}
 else -> {dbEvents}
}
.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y	// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.
val f = true
try
{iterator()}
catch(e: Exception){}
finally{}


        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        
val j = false
try
{plop@}
catch(e: Exception){}
finally{}
 eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ 
val f = true
when (f) {
 true -> {eventIter}
 else -> {eventIter}
}
.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y	// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.
val a = true
try
{forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }}
catch(e: Exception){}
finally{}

    }
    return res
}
y˘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<
val l = true
if (l) {Thing} else {Thing}
, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y˙// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, 
val w = false
if (w) {Thing} else {Thing}
>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.
val v = false
when (v) {
 true -> {iterator}
 else -> {iterator}
}
()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.
val a = true
when (a) {
 true -> {forEach}
 else -> {forEach}
}
 { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y	// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<
val f = true
try
{Thing}
catch(e: Exception){}
finally{}
, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, 
val u = false
when (u) {
 true -> {Thing}
 else -> {Thing}
}
>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÈ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach 
val d = false
when (d) {
 true -> {{ dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }}
 else -> {{ dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }}
}

    }
    return res
}
y	// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach 
val e = true
try
{{ dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }}
catch(e: Exception){}
finally{}

    }
    return res
}
y∆// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            
val v = false
when (v) {
 true -> {if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }}
 else -> {if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }}
}

        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { 
val x = true
when (x) {
 true -> {dbEvent}
 else -> {dbEvent}
}
 ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y≥// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            
val c = false
if (c) {if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }} else {if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }}

        }
    }
    return res
}
y	// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (
val m = true
try
{base.start == dbEvent.start}
catch(e: Exception){}
finally{}
) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) 
val w = false
try
{{
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }}
catch(e: Exception){}
finally{}

        }
    }
    return res
}
yˇ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (
val p = false
if (p) {base.start} else {base.start}
 == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start 
val j = false
when (j) {
 true -> {==}
 else -> {==}
}
 dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == 
val h = false
if (h) {dbEvent.start} else {dbEvent.start}
) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y	// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                
val d = true
try
{res.add(Pair(dbEvent, base))}
catch(e: Exception){}
finally{}

                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                
val l = true
when (l) {
 true -> {baseIter.remove()}
 else -> {baseIter.remove()}
}

                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                
val y = false
when (y) {
 true -> {eventIter.remove()}
 else -> {eventIter.remove()}
}

                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                
val o = true
when (o) {
 true -> {return@plop}
 else -> {return@plop}
}

            }
        }
    }
    return res
}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (
val b = false
try
{base}
catch(e: Exception){}
finally{}
.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y˘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.
val j = true
if (j) {start} else {start}
 == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == 
val v = false
when (v) {
 true -> {dbEvent}
 else -> {dbEvent}
}
.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.
val a = false
when (a) {
 true -> {start}
 else -> {start}
}
) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                
val g = true
when (g) {
 true -> {res}
 else -> {res}
}
.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.
val c = true
if (c) {add(Pair(dbEvent, base))} else {add(Pair(dbEvent, base))}

                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y˝// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                
val s = false
if (s) {baseIter} else {baseIter}
.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.
val r = true
when (r) {
 true -> {remove()}
 else -> {remove()}
}

                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y	// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                
val r = true
try
{eventIter}
catch(e: Exception){}
finally{}
.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.
val w = true
when (w) {
 true -> {remove()}
 else -> {remove()}
}

                return@plop
            }
        }
    }
    return res
}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.
val v = true
when (v) {
 true -> {add}
 else -> {add}
}
(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y˙// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.
val d = true
if (d) {remove} else {remove}
()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.
val y = true
when (y) {
 true -> {remove}
 else -> {remove}
}
()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return
val w = true
when (w) {
 true -> {@plop}
 else -> {@plop}
}

            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(
val o = false
if (o) {Pair(dbEvent, base)} else {Pair(dbEvent, base)}
)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(
val m = false
try
{Pair}
catch(e: Exception){}
finally{}
(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y
// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(
val i = false
try
{dbEvent}
catch(e: Exception){}
finally{}
, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y˘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, 
val a = false
if (a) {base} else {base}
))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¡// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, (newEvents): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y∆// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing((, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<(Thing), Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if ((base.start) == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                (return@plop)
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.(remove)()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res!!
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }!!
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start!!) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }!!
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent!!.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter!!.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()!!
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter!!.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): (List<Pair<Thing, Thing>>)? {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: (MutableList<Thing>)?, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: (MutableList<Thing>)?): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: (Long)?, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: (Long)?)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<(Pair<Thing, Thing>)?> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<(Pair<Thing, Thing>)?>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<(Thing)?>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<(Thing)?>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<(Thing)?, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, (Thing)?>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<(Thing)?, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, (Thing)?>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents!!.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents!!.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base!!.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res!!.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¯// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if ((base.start)?.equals(dbEvent.start) ?: (dbEvent.start === null)) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (Pair(dbEvent, base).start == dbEvent.start) {
                res.add(base)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thingres Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return ,
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun ((dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>matchEvents2)

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<forEach>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.Thing {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res ) mutableListOf<Pair<Thing, Thing>>(=

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                }
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
res.add(Pair(dbEvent, base))
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter start newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.= == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘newEvents
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = // Original bug: KT-22959.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<==> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start Pair<Thing, Thing> dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = dbEvent

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(mutableListOf<Pair<Thing, Thing>>(), base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        })

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach Long
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<@plop, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                returnThing
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(@plop)
                baseIter.remove()
                eventIter.remove()
                returnPair(dbEvent, base)
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEventsThing MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<:, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableListThing): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<<Thing>, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.)()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.startiterator {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>iterator() {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.>
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: Thing<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, MutableList>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            } {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            List<Pair<Thing, Thing>>
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thingreturn res

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    (val start: Long, val end: Long)
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

Pair<Thing, Thing> matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<fun>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
Thing

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, // Duplicated bug: KT-22270>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: newEvents.iterator()<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = MutableList
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.baseIter(Pair(dbEvent, base))
                add.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<=>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter Thing newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Pair<Thing, Thing>, Thing>> {
    val res = mutableListOf<Thing>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach Thing
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    . baseIter = newEventsvaliterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start res dbEvent.start) {
                ==.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val if: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            start (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
val

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    // Duplicated bug: KT-22270 baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<ThingnewEvents, >: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(base, dbEvent))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>forEach {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.> {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data dbEvent Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == class.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, add(Pair(dbEvent, base))>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.Thing
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plopeventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        } @
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

Thing class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<data, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>base.start)

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (( == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
})

val end: Long
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2<dbEvents: MutableList<Thing>, newEvents: MutableList(Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val base: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {end ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>)} List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    :
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<=>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res Thing mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<{base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }>()

    val baseIter = newEvents.iterator()
    baseIter.forEach Pair<Thing, Thing>
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: <)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableListLongThing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<base.start == dbEvent.start>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (Thing) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val ) = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base)baseIter
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, forEach>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.Thing {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }.forEach eventIter
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

} class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            data
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: (<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iteratorMutableList)

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.start {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.forEach) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.return res { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    forEach
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.return()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                iterator@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator->
    baseIter.forEach {base ()
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Longres

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                ).add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: @<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                returnMutableListplop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair,>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent<Thing, Thing> base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, Long end: val)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Longfun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
} val end: Long)

,
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, Pair): List<Pair<Thing, Thing>> {
    val res = mutableListOf<newEvents: MutableList<Thing><Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pairremove)
                baseIter.remove()
                eventIter.(dbEvent, base)()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: iterator)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.Long()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

Thing class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, data>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.remove {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.forEach()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach MutableList
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class ThingforEachval start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.( {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<mutableListOf<Pair<Thing, Thing>>()>): List<Pair<Thing, Thing>> {
    val res = Thing

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing{> >
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<ThingmutableListOf, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = ><Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<{base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach Pair
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(base, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, dbEvents: MutableList<Thing>))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val . = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                resresadd(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

>

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thingdata class Thing(val start: Long, val end: Long)> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, iterator>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.Thing()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): ListPair(dbEvent, base)Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(<)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = baseIter
    newEvents.iterator().forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, base>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, Thing))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun Thing(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, matchEvents2>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { remove ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.dbEvent()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: return@plop, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                Long
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing{

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach (val start: Long, val end: Long) dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

Thing class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<data, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { return res ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    dbEvent
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<ThingdbEvents): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = >.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<ThingThing): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<>, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: base, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (Long.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableListremoveThing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.<()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach Thing
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start add dbEvent.start) {
                res.==(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = base.start<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (mutableListOf == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.return res
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    add(Pair(dbEvent, base))
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

Pair(dbEvent, base) class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(data)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableListdbEvents.iterator()): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = <Thing>

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        ==@ eventIter.forEach { dbEvent ->
            if (base.start plop dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.remove(Pair(dbEvent, base))
                baseIter.add()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): > {
    val res = mutableListOf<Pair<Thing, Thing>List<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: LongdbEvent

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(), base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (start.base == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableListeventIter, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                <Thing>.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        )@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove(plop
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<iterator<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.Pair()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thingadd(Pair(dbEvent, base))): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.>
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<base>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {Pair<Thing, Thing> ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ iterator
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>Pair<Thing, Thing>: List<)> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iteratorreturn@plop)

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                (
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iteratoreventIter.remove()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                ()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
eventIter

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                // Duplicated bug: KT-22270.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res mutableListOf =<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: return, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                Long@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: (, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(PairMutableList<Thing>dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if ({
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }.start == dbEvent.start) base
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        Thing
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}, val end: Long)

Long
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>( newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove,)
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<dbEvents.iterator()<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = Pair

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: plop@, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        MutableList<Thing> eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    baseIter.forEach newEvents.iterator()
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<ThingdbEvent Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { , ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<base>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, Thing))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<{base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach Thing
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<iterator()<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.Pair

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thingbase

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if ((val start: Long, val end: Long).start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOfforEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.<
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, baseeventIter)
                baseIter.remove()
                ).remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: base.start)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (Long == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<(<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iteratorPair)
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): remove() {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.List<Pair<Thing, Thing>>
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    . res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEventvalstart) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing{
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) >
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIterdbEventforEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(., base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, )>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove(Thing
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableListThing<>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = remove().iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.newEvents
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2ThingdbEvents: MutableList<(>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(PairremovedbEvent, base))
                baseIter.remove()
                eventIter.(()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
})

Long
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator.)
    baseIter.forEach {base ->
        val eventIter = dbEvents(iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val endbase.start == dbEvent.start Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (:) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): ,<Pair<ThingList Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long()

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>)

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIterplopremove()
                eventIter.remove()
                return@.
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        return eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    plop@ res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<ThingPair): List<Pair<Thing, Thing>> {
    val res = mutableListOf<><Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val eventIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ baseIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: })

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    Long
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    })

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    Long
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.}) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    start
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    add.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.baseIter(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: =<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter MutableList dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>}()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
>
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: LongPair(dbEvent, base) val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(,)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, mutableListOf<Pair<Thing, Thing>>()>> {
    val res = Thing

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<{ dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach Pair<Thing, Thing>
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair(> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair<Thing, Thing>dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) dbEvent
                res.add(Pair({, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableListplop@Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        < eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iteratorval eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        })
    baseIter.forEach {base ->
        (
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair->> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base <Thing, Thing>
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thingplop@>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        > eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.->
    baseIter.forEach {base iterator()
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(()(dbEvent, base))
                baseIter.removePair
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: List, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): Long<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        Thing
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if ()base.start == dbEvent.start {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(return@plop, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                dbEvents: MutableList<Thing>
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            Pair<Thing, Thing>
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(Long start: Long, val end: val)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(<, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pairval start: LongThing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    start.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.baseIter == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList(), newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove<Thing>
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing<): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair>Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<(>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iteratorThing)
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<val baseIter = newEvents.iterator(), Thing>>()

    Thing
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            } end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) val
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.base
    baseIter.forEach {iterator() ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Thing> {
    val res = mutableListOf<Pair<Thing, Pair<Thing, Thing>>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<val>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        Thing eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.baseIter()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                iterator.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<val eventIter = dbEvents.iterator(), Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        Thing

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>>: List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>)()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long) val end: Long,

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator(add
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.)(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Thing<Thing, Pair>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end) Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator(:
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: List<Thing>, newEvents: MutableList<Thing>): MutableList<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEventsnewEvents MutableList<Thing>, :: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<}>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            Thing
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<List>): Thing<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<base, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {Thing ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thingres

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                (val start: Long, val end: Long).add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<<>): ListThingPair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { } ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            dbEvent
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList{
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) <
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: fun)

Long matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun )(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove(matchEvents2
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(base.start: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (dbEvents == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<mutableListOf>): List<Pair<Thing, Thing>> {
    val res = Thing<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun ((dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.removematchEvents2)
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = base.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, dbEvents))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data Thing Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<class>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>baseIter.remove() {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                >
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing// if I expose the label the compiler crashes with an NPE> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        >
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val startMutableList Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: :<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator((Pair(dbEvent, base))

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        start
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: base.start == dbEvent.start)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (Long) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: Thing<Thing>, newEvents: MutableList<MutableList>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

dbEvents

fun matchEvents2(data class Thing(val start: Long, val end: Long): MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<iterator, Thing>>()

    val baseIter = newEvents.Thing()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.dbEvent {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(forEach, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<->, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent Thing
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                return.remove()
                return@plop
            }
        }
    }
    eventIter res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start eventIter.remove() dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                ==
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<eventIter, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ Thing.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iteratorreturn

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                ()@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<()> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.removePair<Thing, Thing>
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.plop()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        iterator@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thingif (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            >
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    } class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.data
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        Thing
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thingval eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        (val start: Long, val end: Long)
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach start
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res // if I expose the label the compiler crashes with an NPE mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        =
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<PairdbEvents> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = <Thing, Thing>.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘Thing
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<// Original bug: KT-22959, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {baseIter.remove() ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                base
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach if dbEvent ->
            { (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<mutableListOf>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = Thing<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

( class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iteratordata)

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, dbEvents>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = Thing.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): dbEvent {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { List<Pair<Thing, Thing>> ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<(>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(PairThingdbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.@()
                returnremoveplop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

dbEvent matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == fun.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            return
        }
    }
    } res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, )): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.startnewEvents: MutableList<Thing> {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator())
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove(
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<<>): List<PairThingThing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<PairThing> {
    val res = mutableListOf<Pair<<Thing, Thing>, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                return.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    baseIter res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<,<Thing, Thing>> {
    val res = mutableListOf<Pair<ThingPair Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun (dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>)matchEvents2: List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): Thing<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, List>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: forEach, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.Long {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if resbase.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return (
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: Thing): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, MutableList<Thing>>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val endremove Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.:()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    forEach baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.val { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair{base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach <
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: baseIter.remove())

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                Long
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        })

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach val end: Long
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<=>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter Thing newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: dbEvents)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = Long.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: ,Long val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<}<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    Pair
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.forEach()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.iterator { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>((

    val baseIter = newEvents.iterator))
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<(, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.addThingPair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<.<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIterPairremove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = eventIter.remove()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                mutableListOf<Pair<Thing, Thing>>()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>)plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        } List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        :
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val mutableListOf = res<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, ()>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.removeThing
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, )>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, baseThing)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, baseIter end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    val.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>add: List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.)(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents()iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove.
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2<: List<Pair<Thing, Thing>> {
    val res = mutableListOf(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>)Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: <<Thing>): List<PairMutableListThing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<dbEvent>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(Thing, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val {: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) end
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == res) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return dbEvent.start
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.{
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) iterator()
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: add)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.Long(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Longiterator() val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.,
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<}>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            Thing
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<val baseIter = newEvents.iterator()>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    Thing
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}>> Thing
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = res.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                dbEvents.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator}
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            ()
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    base
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (val baseIter = newEvents.iterator().start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Pair<Thing, Thing>>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Thing>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

plop class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@data
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing>

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>(val start: Long, val end: Long)()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<(, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if Thingbase.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<start>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.Thing == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEventsplop MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        :@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

: class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEventsdata MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: Pair<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<MutableList<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair{
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) <
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val starteventIter Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ :.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.@
                returnremove()plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: baseIter, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                MutableList<Thing>.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: LongPair<Thing, Thing>

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<)> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘List<Pair<Thing, Thing>>
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): // Original bug: KT-22959 {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val } = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    baseIter
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}: Long, val end: Long)

start
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Thing)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Long>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class MutableList(val start: Long, val end: Long)

fun matchEvents2(dbEvents: Thing<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<.>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIterThingremove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<mutableListOf> {
    val res = Pair<Thing, Thing><Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<()> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iteratorPair<Thing, Thing>
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                remove().add(Pair(dbEvent, base))
                baseIter.res
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

Thing class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<data>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<ThingThing, newEvents: MutableList<Thing>): List<Pair<>, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator))
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start( {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

base.start

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (data class Thing(val start: Long, val end: Long) == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                remove
                baseIter.res.add(Pair(dbEvent, base))()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair{
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) <
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                baseIter.add(Pair(dbEvent, base))
                res.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableListforEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.<
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: {, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach Long dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            } {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            forEach
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf}()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            <Pair<Thing, Thing>>
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2((, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(PairdbEvents: MutableList<Thing>dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.Thing
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): ListnewEvents.iterator() {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = <Pair<Thing, Thing>>
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, @plop))
                baseIter.remove()
                eventIter.remove()
                returnbase
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val start: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.end == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<List>, newEvents: MutableList<Thing>): Thing<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, dbEvents>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = Thing.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.base { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, forEach))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<val res = mutableListOf<Pair<Thing, Thing>>()>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    Thing

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.remove(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.add()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iteratoreventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ ()
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, ThingdbEvent>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(>, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<}<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        Pair
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter iterator newEvents.=()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ newEvents
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            {
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents(Pair(dbEvent, base))iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add.
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter)remove(.
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>baseIter {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                >.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.start
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.iterator() == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    }
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        val baseIter = newEvents.iterator()
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            Thing
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<plop@, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        Thing eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<add>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.Thing(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    Thing
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: ->, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base MutableList<Thing>
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: baseIter<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                MutableList.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thingbase.start

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if ((val start: Long, val end: Long) == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<{
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> Thing
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        eventIter val = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<return, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    Thing res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class MutableList<Thing>(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: Thing): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        .@ eventIter.forEach { dbEvent ->
            if (base.start == dbEventplopstart) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach val eventIter = dbEvents.iterator()
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<)>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator(Thing

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableListstartThing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.<) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing>

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing(val start: Long, val end: Long)): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        remove eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.plop@()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<ThingThing ,>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<base, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (Thing.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = Pair(dbEvent, base)

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(mutableListOf<Pair<Thing, Thing>>())
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: LongThing val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, ,>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start . dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter==remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach Long
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(Pair, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<val start: Long<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                (.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.removeres)
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop. eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter@remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, remove>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.Thing()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<start>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.Pair<Thing, Thing>) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<), Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base)Thing
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.List
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<(, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if Thingbase.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<dbEvent>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == Thing.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, remove>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.Thing()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.eventIter {base ->
        val forEach = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>val()

    > baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
,

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing// Duplicated bug: KT-22270 Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<(>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.removeThing)
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, baseIter>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    Thing.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEventsThing MutableList<Thing>): List<Pair<:, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair)>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start<Thing, Thing> {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair(dbEvent, base)<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if resbase.start == dbEvent.start) {
                (.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<base<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {Pair ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents> MutableList<Thing>): List<Pair<Thing, Thing:> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.Pair(dbEvent, base) { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(forEach)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<<Thing, Thing>>, newEvents: MutableList<Thing>): List<PairThing> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<(>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.removeThing)
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ List
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            == (base.start if dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thingbase.start>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (> == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<()>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iteratorThing
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, eventIter>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                Thing.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>eventIter.remove())

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                (
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = eventIter.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ newEvents.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iteratorres
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return ()
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>(

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove())
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { Pair(dbEvent, base) ->
            if (base.start == dbEvent.start) {
                res.add(dbEvent)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<}, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    Thing
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEventsforEachiterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.. { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iteratorbase

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (().start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<dbEvent>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { Thing ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<eventIter> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                Pair<Thing, Thing>.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = plop@.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        newEvents eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun ()(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.removematchEvents2
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>Pair(dbEvent, base)

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(())
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.Thing
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<PairdbEvent>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == <Thing, Thing>.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<(dbEvent, base)> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(PairPair<Thing, Thing>)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>{
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            } newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) ,
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res@add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return.plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(Thing: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<dbEvents, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
})

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> Long
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEventsThing MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, :>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<val eventIter = dbEvents.iterator()>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        Thing

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if )base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base)(
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: <Thing>)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableListLong): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<dbEvent.start> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == Pair<Thing, Thing>) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): ><Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>List()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<eventIter.remove(), Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                Thing
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.res) {
                start.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Thing, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Long>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, newEvents.iterator()>>()

    val baseIter = Thing
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: dbEvent, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == Long.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val if: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            end (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<), Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove(Thing
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val endPair<Thing, Thing> Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<:> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(baseIter: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                dbEvents.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: val baseIter = newEvents.iterator()): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    MutableList<Thing>
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.base {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (forEach.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: matchEvents2, val end: Long)

fun Long(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter}remove()
                return@plop
            }
        }
    }
    return res
.
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents{ dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach .
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.()(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.removeadd
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<->>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base Pair<Thing, Thing>
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<newEvents<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = Pair.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): Listbase.start {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (<Pair<Thing, Thing>> == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

{base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    } class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach data
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<dbEvent, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { Thing ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

newEvents.iterator() class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = data
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, ==>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start Thing dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val dbEvents.iterator(): Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = end

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { start ->
            if (base.start == dbEvent.dbEvent) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<newEvents>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = Thing.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ Thing
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach start
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start base dbEvent.start) {
                res.add(Pair(dbEvent, ==))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, res))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return base
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing()> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove>
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
} end: Long)

val
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = )<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.startmutableListOf {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableListListThing>, newEvents: MutableList<Thing>): <<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableListstartThing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.< == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.startres.add(Pair(dbEvent, base)) {
                )
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
iterator()

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.// Duplicated bug: KT-22270

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<baseIter>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val Thing = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘baseIter
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                // Original bug: KT-22959.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>)} List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            :
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<base.start == dbEvent.start, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (Thing) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<@, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                returnThingplop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, (>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if Thingbase.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {( ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.addbasePair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<PairbaseIterThing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                <.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: start, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.MutableList<Thing> == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: .<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIterMutableListremove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
{
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) // Duplicated bug: KT-22270
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: newEvents: MutableList<Thing>, MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Pair<Thing, Thing>>): List<Thing> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList., newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter<Thing>forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pairres.add(Pair(dbEvent, base))Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                <
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val startThing Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, :>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<res, Thing>> {
    val Thing = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList{
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}): List<Pair<Thing, Thing>> <Thing>
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2Thing: List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>), Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, base.start == dbEvent.start>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (Thing) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun .(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventItermatchEvents2remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(Pair<Thing, Thing>: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<dbEvents>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, res>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return Thing
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<<Thing, Thing>>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<PairThing>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: remove<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.MutableList()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<), Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, baseThing)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        eventIter.remove()
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                // if I expose the label the compiler crashes with an NPE
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableListadd(Pair(dbEvent, base))Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.<
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2({base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach dbEvents: MutableList<Thing>
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pairif (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            <
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val start: Long eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: plop@, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        Long eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: eventIter, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ Long.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.Pair
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val iterator = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.baseIter()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class (val start: Long, val end: Long)Thing

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>)} List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        :
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEventsbaseiterator()
    baseIter.forEach {. ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thingbase Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (,.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long<Thing, Thing>

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair)> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach res
    return {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        List
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEventsval eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }iterator()
    baseIter.forEach {base ->
        .
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun Pair(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<matchEvents2<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = }.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
dbEvents
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    =.forEach {base ->
        val eventIter baseIter dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { baseIter ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                dbEvent.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2}: List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    (dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>)
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: (), val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.removeLong
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            } ->
            dbEvent
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator)(
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOfdbEvents.iterator()()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = <Pair<Thing, Thing>>

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing()val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>(

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data matchEvents2 Thing(val start: Long, val end: Long)

fun class(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<base, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {Thing ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: newEvents, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, Long: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: (dbEvent, base)<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(PairMutableList)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Longbase val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (,.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEventsval eventIter = dbEvents.iterator() MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        :

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): )<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove(List
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator((
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove))
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }.start) dbEvent
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator,

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent() base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing.>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents>iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = baseIter

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                dbEvents.iterator().remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun Thing(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<matchEvents2, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEventsstart MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.:) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair(Pair(dbEvent, base))Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add<
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start remove dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.==()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: remove<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.MutableList()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.end
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val endval baseIter = newEvents.iterator() Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    :
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>)remove List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.:()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<return res, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    Thing
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): newEvents.iterator()<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = List
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            iterator
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<)>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>(Thing

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.dbEvent { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(forEach, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent( base))
                baseIter.remove,)
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): =<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter List newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: dbEvents, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = MutableList<Thing>.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<(, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(PairThingdbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: res, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return Long
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        (Pair(dbEvent, base))

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.addval eventIter = dbEvents.iterator()
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<PairThing> {
    val res = mutableListOf<Pair<Thing, <Thing, Thing>>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<base> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, Pair<Thing, Thing>))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing,

fun matchEvents2(dbEvents: MutableList<Thing>(val start: Long, val end: Long) newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(<: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOfdbEventsPair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.() {base ->
        val eventIter = dbEvents.iteratorforEach

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach List
    return res
}
y∑// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            {
  val y = 12
  val op = { x:Int -> (x + y).toString() }

  val op2 : Int.(Int) -> String = { op(this + it) }

  return if("27" == 5.op2(10)) "OK" else "fail"
}
        }
    }
    return res
}
y∏// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = R("OK")

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ x.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÕ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun list4(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, 2))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        {
    val a = Foo(0)
    val b = a.inc().inc()

    if (b.x != 2) return "fail"

    return "OK"
}
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@foo
            }
        }
    }
    return res
}
yô// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y…// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Nothing> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: B)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÿ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return x.box()
}
yÁ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                (10.toShort() as Short?)!!.hashCode()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: inc, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val left: String)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.String()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Any>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<A>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: LongArray<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‹// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == Child().test().work()) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<String, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, String>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == A.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<String>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŸ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                toUShort.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<RGBA<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(42, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y√// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: I, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: UInt, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yˆ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.Box<Int>(1)
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.Z { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<server>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÏ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ foo.bar.baz
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return "OK"
}
y€// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.v { value += it }
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yª// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = IntRange()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, T>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÙ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.doTest(l)
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: i, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: list1<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                list5.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.a == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y˙// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { fld }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == 0.toLong()) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, String>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<MyClass, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¬// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // !LANGUAGE: +ProperIeee754Comparisons
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‚// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {open val v: String ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.ne(ONEL, 1L)
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y√// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Y>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Int>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¬// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    const val M = Int.MIN_VALUE

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (String.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: String, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yP// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.A()
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, D>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { value += it }
    }
    return res
}
yÕ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.C()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                String.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.Abstract()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yˆ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                String.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, Bar: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Long>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == sparse.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y≈// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: Int): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.this()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<UInt>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (A.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.StringCell {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÕ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = String<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y√// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                C().D().foo
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÀ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        var state: String = "Fail"

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<bar>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
ym// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach { line: String -> line }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, ok>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { String ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.String { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return "OK"
            }
        }
    }
    return res
}
y˙// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ Nested().foo().toString()
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<foo>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y…// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = A(23L).s

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<MyEnum>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¬// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): String {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: String)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y˚// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { this }
    }
    return res
}
y∏// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
    val a : Array<String>? = array<String>("Str", "Str2")
    val i : Int? = 1
    return if(a[i] == "Str2") "OK" else "fail"
}
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ a.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¡// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, s2: String): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<downTo<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÿ// Original bug: KT-22959
// Duplicated bug: KT-22270

operator class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (c.prop == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.String(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y»// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = s<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y›// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<TInput, TValue>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¡// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add()
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Outer>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y€// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {
        fun foo(x: String) {
            s += x
        }

        {
            foo(foo, 1)
            foo("K")
        } ()
    }
    return res
}
y // Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (A().foo() == "30") {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<String, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: String<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Long<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.String()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { if (prop == 1) "OK" else "fail" }
    }
    return res
}
y∏// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, i): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<A, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¶// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(var x: String): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                L.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ s.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<BB>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    Companion.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.box()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Int, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y≈// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(null)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val a5: Double? = 1.0.plus(1)

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y⁄// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val x = object {
            init {
                38["Hello!"] = "OK"
            }
        }
        result
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach {
        return@myMap
    }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { i ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): String<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y∫// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = set("OK")

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun toLong(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y·// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        withTwoSupertypes@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Boolean>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y≈// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Int> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {inc ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y⁄// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.isInitialized {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val box = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y√// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val s: String)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, values>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val test: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                list.remove()
                return@plop
            }
        }
    }
    return res
}
yÿ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(toUShort(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.Base == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y≈// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(f(0))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val path: String)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: Outer<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: test, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y∆// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: IBar): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.get == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÕ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.p()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y⁄// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, DoubleArray>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (bar.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yº// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(i: Int)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Boolean>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(a3(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y€// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@innerGetter
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val toByte: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Int>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yµ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        loop@ for (color in arr) {
        when (color) {
            Color.RED -> return color
            Color.GREEN -> break@loop
            Color.BLUE -> if (arr.size == 1) return color else continue@loop
        }
    }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.add()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÕ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.s()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = test.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y∏// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = Class()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (Game.values().size != 3) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {b: B1 ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = String.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y›// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (l != listOf("a", "b", "c", "d", "e")) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y7// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if(test1() != "OK") return "fail"
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach {
        foo("O")
        foo()
    }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.jaggedArray() { x, y, z -> intArrayOf(x + y + z + 1) }
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return call
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                arr.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {old ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yπ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(i, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<UInt>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = bar1.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    Foo.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y∂// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing()

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‹// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>("a", 42u)

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(FIRST: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                a.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    return if ((arrayOf(1, 2, 3)::get)(1) == 2) "OK" else "Fail"
}
y€// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {(x: String) ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ P.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.it()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.Int()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y∆// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Char> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÕ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    r.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<String>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): A<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { A ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Int)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, 0.0))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    Int.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = x.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(a: Array<String>, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.Color(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‚// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        l1@ "s"
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val intRange: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y…// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = A.holder

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y€// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { AssertionError ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yD// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (One().a1[0].fy == "text") "OK" else "fail"
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, value3))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y`// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.myEquals(null, 0.0)
    return res
}
y≈// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                Outer().foo()
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { test ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÕ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(A: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {() ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<SCISSORS, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(c: Char, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yæ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, t: Any?): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.rangeTo(l)
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y5// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (1.foo() != 1) return "fail"
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = a.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val list3 = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y // Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                Foo.D.b
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ M.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.list3()
                return@plop
            }
        }
    }
    return res
}
y√// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<T>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == y.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { list4 ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.t2 { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y«// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: Float, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yƒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                receiver.bar
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.Float(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = add.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@result
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@local
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@T
            }
        }
    }
    return res
}
y#// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
  val s = M().doTest()
  return if (s == "1:2;2:3;3:4;") "OK" else "fail: $s"
}
y˘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
    var t = CustomException("O", Throwable("K"))
    if (t.message != "O" || t.cause?.message != "K") return "fail1"

    t = CustomException(Throwable("OK"))
    if (t.message == null || t.message == "OK" || t.cause?.message != "OK") return "fail2"

    t = CustomException("OK")
    if (t.message != "OK" || t.cause != null) return "fail3"

    t = CustomException()
    if (t.message != null || t.cause != null) return "fail4"

    return "OK"
}
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<A<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yv// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        {return r}
    }
    return res
}
y0// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        loop@ while(true) {
        when (v) {
            1, 2 -> break@loop
        }
    }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (a.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÅ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            {
            if (y < 0.0) throw AssertionError()
            if (y > 0.0) throw AssertionError()
        }
        }
    }
    return res
}
y≈// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Int>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    cl.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¯// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.le(42L, ONEL)
    }
    return res
}
y¡// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    var cycle = true
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.Int) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y»// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = x<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, i>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y // Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = Int<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    Outer.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.ULong { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ r.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = AssertionError<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, result>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¸// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach {o + "K"}
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, A>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(value: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// !LANGUAGE: +InlineClasses

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ ltDD.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Int>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return "Wrong elements for (5u.toUByte() downTo 3u.toUByte()).reversed(): $list2"
}
y√// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        var field: Int = 0

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÎ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { (c: Comparable<T>, element: T) ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ head.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@rangeTo
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.T()
                return@plop
            }
        }
    }
    return res
}
y // Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = Foo<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Host>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y€// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                ShortArray.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.A { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y // Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = Any<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(A(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.test()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yd// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {res+="O"; "O"}
    return res
}
yÕ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.A()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y…// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (ss == "a;b;c;d;") {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                toString.remove()
                return@plop
            }
        }
    }
    return res
}
yÓ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        {
    if (3.compareTo(2) != 1) return "Fail #1"
    if (5.toByte().compareTo(10.toLong()) >= 0) return "Fail #2"
    return "OK"
}
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.C == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { foo ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y // Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: y<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÁ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.byteArrayOf(10, 20, 30, 40)
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator(i)

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ rec.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<ULong>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŸ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {b: Float? ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<B, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                a.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    mspf.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start ++ dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y≈// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(val p: String, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¬// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, msg: String): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val inner = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<A>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y«// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = compareTo(0.toShort())

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŸ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, () -> Unit>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@x
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val x: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y»// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Target>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, val delegate: Interface): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y»// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<String>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.s == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val Exception = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y»// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: String, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                5.toShort()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return E
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(T(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<other, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‹// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<runInlineExt<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yˆ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ (E::ordinal).get(E.I)
    }
    return res
}
y◊// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return String
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Int, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, f: () -> T)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yõ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
    val capture = "O"

    class Local {
        val captured = capture

        open inner class Inner(val d: Double = -1.0, val s: String, vararg val y: Int) {
            open fun result() = "Fail"
        }

        val obj = object : Inner(s = "K") {
            override fun result() = capture + s
        }
    }

    return Local().obj.result()
}
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                String.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val box = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.box()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŸ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Identifier>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Bar<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y·// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<MyProducerScope<E>>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y’// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                ArrayList.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@B
            }
        }
    }
    return res
}
y∑// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // !LANGUAGE: +InlineClasses
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.C()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { () ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == U.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: A, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(x(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÿ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<compareTo>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y˛// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return if (s == "1:2;2:3;3:4;") "OK" else "fail: $s"
}
y…// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<*>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÂ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, fn: (String, String) -> String)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y÷// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ runNoInline.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: foo)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Long>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        @A eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y‘// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()


    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()
    val baseIter = newEvents.iterator()
        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y√// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): <Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator(
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: )

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÕ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<PairThing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    valres = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
     res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¬// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: ): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y«// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == ) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if(base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

dataclass Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, >>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                @plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>: List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, >> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÕ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter. {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, ))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¬// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    returnres
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter  dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res  mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
         eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents:MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÛ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach 
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y«// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start){
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter= dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
     res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        valeventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    .forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yU// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach 
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter= newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing> newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator(

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yD// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove)
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thingval start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIterremove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¬// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: , newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¥// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start  dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y«// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = <Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = .iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                returnplop
            }
        }
    }
    return res
}
yÕ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == .start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>) List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y√// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base. == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yß// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y∆// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent,base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res =mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y “// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> 
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter =dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach { ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¬// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add((dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¿// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) 
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yø// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y≈// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÀ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                .remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base 
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yl// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        
    }
    return res
}
y¬// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y¡// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = 

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y√// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y√// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y…// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: <Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent 
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>(

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÀ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ .forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base)
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÀ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

 matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                .add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableListThing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>)

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach  dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                resadd(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y // Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach{ dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y…// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: <Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
xj// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)


yŒ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

     baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            
        }
    }
    return res
}
y7// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) 
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yπ// Original bug: KT-22959


data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yó// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2: List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<PairThing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove)
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIterremove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: , val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÕ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter. { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yº// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>):  {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yõ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long,  end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÃ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val  = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, valend: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start== dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res

y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    valbaseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y // Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if ( == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>>{
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÕ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y€// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end:Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res= mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yM// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEventstart) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach{base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÀ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }}
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableListThing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

funmatchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y∆// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÀ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPEplop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y·// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ 
    }
    return res
}
yÀ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = .iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yœ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class (val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y–// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        @ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>,newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y±// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = 

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data classThing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yÀ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val  = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> 
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEventsiterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents:MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove(
                return@plop
            }
        }
    }
    return res
}
y“// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter =newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y∑// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, ): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter  newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOfPair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y—// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
         eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
yπ// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@ eventIter.forEach { dbEvent ->
            if () {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
y”// Original bug: KT-22959
// Duplicated bug: KT-22270

data class Thing(val start: Long, val end: Long)

fun matchEvents2(dbEvents: MutableList<Thing>, newEvents: MutableList<Thing>): List<Pair<Thing, Thing>> {
    val res = mutableListOf<Pair<Thing, Thing>>()

    val baseIter = newEvents.iterator()
    baseIter.forEach {base ->
        val eventIter = dbEvents.iterator()

        // if I expose the label the compiler crashes with an NPE
        plop@eventIter.forEach { dbEvent ->
            if (base.start == dbEvent.start) {
                res.add(Pair(dbEvent, base))
                baseIter.remove()
                eventIter.remove()
                return@plop
            }
        }
    }
    return res
}
ˇˇ