øiexportTaggdefaultnoriginalSampley:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
gmutantsüy5// Original bug: KT-23681
// Duplicated bug: KT-17554


val g = true
if (g) {fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}} else {fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}}


enum class Enum {
  ONE, TWO, THREE
}
yí// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}


val r = true
when (r) {
 true -> {enum class Enum {
  ONE, TWO, THREE
}}
 else -> {enum class Enum {
  ONE, TWO, THREE
}}
}

yo// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) 
val k = true
try
{{
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}}
catch(e: Exception){}
finally{}


enum class Enum {
  ONE, TWO, THREE
}
yÅ// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(
val m = false
when (m) {
 true -> {args: Array<String>}
 else -> {args: Array<String>}
}
) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yÖ// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  
val s = true
when (s) {
 true -> {var increaseMe: Long = 0}
 else -> {var increaseMe: Long = 0}
}

  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yÅ// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  
val j = false
when (j) {
 true -> {val enum = Enum.ONE}
 else -> {val enum = Enum.ONE}
}


  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y…// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  
val d = false
if (d) {@Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }} else {@Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }}


  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
ym// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  
val z = true
if (z) {println(increaseMe)} else {println(increaseMe)}

}

enum class Enum {
  ONE, TWO, THREE
}
yp// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  
val r = false
try
{ONE,}
catch(e: Exception){}
finally{}
 TWO, THREE
}
yr// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, 
val r = false
when (r) {
 true -> {TWO,}
 else -> {TWO,}
}
 THREE
}
yo// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, 
val x = true
try
{THREE}
catch(e: Exception){}
finally{}

}
y\// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 
val v = false
if (v) {0} else {0}

  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yu// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = 
val g = true
when (g) {
 true -> {Enum.ONE}
 else -> {Enum.ONE}
}


  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yo// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  
val i = true
try
{when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }}
catch(e: Exception){}
finally{}


  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yu// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  
val z = false
when (z) {
 true -> {println}
 else -> {println}
}
(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y^// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = 
val k = true
if (k) {Enum} else {Enum}
.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yp// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.
val j = false
try
{ONE}
catch(e: Exception){}
finally{}


  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yu// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @
val b = true
when (b) {
 true -> {Suppress}
 else -> {Suppress}
}
("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yr// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (
val c = false
when (c) {
 true -> {enum}
 else -> {enum}
}
) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yp// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: 
val l = false
try
{Array}
catch(e: Exception){}
finally{}
<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y_// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: 
val f = false
if (f) {Long} else {Long}
 = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yf// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> 
val e = true
if (e) {increaseMe++} else {increaseMe++}

    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yo// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> 
val u = true
try
{increaseMe++}
catch(e: Exception){}
finally{}

  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yp// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(
val k = false
try
{increaseMe}
catch(e: Exception){}
finally{}
)
}

enum class Enum {
  ONE, TWO, THREE
}
yp// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(
val r = false
if (r) {"NON_EXHAUSTIVE_WHEN"} else {"NON_EXHAUSTIVE_WHEN"}
)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yo// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    
val u = true
try
{Enum.ONE}
catch(e: Exception){}
finally{}
 -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
ye// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> 
val e = false
if (e) {increaseMe} else {increaseMe}
++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yp// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe
val z = false
try
{++}
catch(e: Exception){}
finally{}

    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yv// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    
val g = false
when (g) {
 true -> {Enum.TWO}
 else -> {Enum.TWO}
}
 -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yp// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> 
val t = false
try
{increaseMe}
catch(e: Exception){}
finally{}
++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yo// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe
val m = true
when (m) {
 true -> {++}
 else -> {++}
}

  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yp// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @
val b = false
try
{Suppress}
catch(e: Exception){}
finally{}
("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yr// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    
val c = false
when (c) {
 true -> {Enum}
 else -> {Enum}
}
.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y^// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.
val m = false
if (m) {ONE} else {ONE}
 -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y^// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    
val u = true
if (u) {Enum} else {Enum}
.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y]// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.
val l = true
if (l) {TWO} else {TWO}
 -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yt// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<
val o = false
when (o) {
 true -> {String}
 else -> {String}
}
>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y(// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  (

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  (@Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  })

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> (increaseMe++)
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    (Enum.TWO) -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array!!<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++!!
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe!!++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress!!("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: (Array<String>)?) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: (Long)? = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @(Suppress)?("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<(String)?>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y>// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe.inc()
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y>// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe.inc()
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: ONE = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  Long, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = (
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println0increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(++) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMeargs: Array<String>
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

THREE main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, fun
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = ONE,

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  Enum.ONE TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  ++
  when (enum) {
    Enum.ONE -> increaseMe@Suppress("NON_EXHAUSTIVE_WHEN")
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe, Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO: THREE
}
y:{
// Duplicated bug: KT-17554

fun main(args: Array<String>) // Original bug: KT-23681
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> TWO++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, increaseMe, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> ,++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWOincreaseMe THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

Long main(args: Array<String>) {
  var increaseMe: fun = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  Array<String>

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = TWO
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, 0, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  TWO
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.@Suppress("NON_EXHAUSTIVE_WHEN") -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<NON_EXHAUSTIVE_WHEN>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("String")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = ,.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWOEnum THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>THREE {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, )
}
y:// Original bug: KT-23681
enum

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

// Duplicated bug: KT-17554 class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  TWO

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.val enum = Enum.ONE -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("increaseMe++")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> NON_EXHAUSTIVE_WHEN
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun mainincreaseMeargs: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> (++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @THREE("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, Suppress
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  println enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  val(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = TWO,.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, Enum THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  Enum.TWO

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    val enum = Enum.ONE -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main:args: Array<String>) {
  var increaseMe( Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  TWO,, ONE THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long ONE 0
  val enum = Enum.=

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  ONE,(increaseMe)
}

enum class Enum {
  println TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  ++ increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMevar
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  -> enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE val increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum Enum.TWO Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    = -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (Enum.ONE) {
    enum -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: enum = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (Long) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) ,

enum class Enum {
  ONE{
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
} TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main{
  ONE, TWO, THREE
} {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum (args: Array<String>)
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Suppress<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Array("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: ++ = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMeLong
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @increaseMe++("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> Suppress
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Enum("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Suppress.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = THREE.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, Enum
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  Long increaseMe: var = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:0
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = // Original bug: KT-23681
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  Array

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(=: Array<String>) {
  var increaseMe: Long args 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Arraywhen) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  <String> (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<Long>) {
  var increaseMe: String = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMeval Long = 0
  : enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>++ {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe)
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = ".ONE

  @Suppress(EnumNON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

ONE,

enum class Enum {
  fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
} TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.++ -> increaseMe++
    Enum.TWO -> increaseMeONE
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun ONE(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.main -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.++ -> increaseMeTWO
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun mainLongargs: Array<String>) {
  var increaseMe: ( = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMeclass Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum : Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ArrayenumString>) {
  var increaseMe: Long = 0
  val < = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:++
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe// Original bug: KT-23681
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  println(increaseMe)

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: var<String>) {
  Array increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Enum.TWO = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Long -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.increaseMe

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> ONE++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

ONE

enum class Enum {
  fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  ONE
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.var increaseMe: Long = 0 -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (increaseMe) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> enum++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(Enum.TWONON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    " -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<when>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  String (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = }

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
Enum.ONE
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(argsTHREE Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, :
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO ++ increaseMe->
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  Enum.TWO
  when (enum) {
    Enum.ONE -> increaseMe++
    @Suppress("NON_EXHAUSTIVE_WHEN") -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMeprintln
  }

  ++(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  )Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe@
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = TWO.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.Enum -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<)>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enumString {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @increaseMe("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> Suppress++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @println("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  Suppress(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @println(increaseMe)("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  Suppress
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) Enum.ONE -> increaseMe++
    {
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: { = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) Long
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
@Suppress("NON_EXHAUSTIVE_WHEN")

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  // Duplicated bug: KT-17554
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

Enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args) Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe:
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @SuppressONE,"NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ( TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

( main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when funenum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> ++
    Enum.TWO -> increaseMeincreaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    {
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum Enum.ONE -> increaseMe++
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN"THREE
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, )
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  )
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN"var increaseMe: Long = 0
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(++)
  when (enum) {
    Enum.ONE -> increaseMe"NON_EXHAUSTIVE_WHEN"
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @ONE("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.Suppress -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> ->++
    Enum.TWO increaseMe increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  {
  ONE, TWO, THREE
}
}

enum class Enum println(increaseMe)
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array") {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(<String>NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:ONE
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.// Original bug: KT-23681 -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun mainprintln(increaseMe)args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  (
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  ONE, increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  var TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress->"NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO ( increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN"(
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println)increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.{

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) ONE
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<{
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}>) String

enum class Enum {
  ONE, TWO, THREE
}
y:fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}
// Duplicated bug: KT-17554

// Original bug: KT-23681

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = ("NON_EXHAUSTIVE_WHEN").ONE

  @SuppressEnum
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(Array<String>: args) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) ++
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe{
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  Enum.TWO increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    var -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Enum) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Array<String>.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  ONESuppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  @, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun println(increaseMe)(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  main
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @increaseMe("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(Suppress)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = enum class Enum {
  ONE, TWO, THREE
}
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

0
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: <ArrayString>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.TWO -> increaseMe++.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) enum
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when ({) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  enum class Enum {
  ONE, TWO, THREE
}

  println(increaseMe)
}

when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

Enum main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = fun.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (++) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMeenum
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    increaseMe.ONE -> increaseMe++
    Enum.TWO -> Enum++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(String: Array<args>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
THREE

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, // Duplicated bug: KT-17554
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    }.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
Enum
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) ++
    Enum.ONE -> increaseMe{
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ,) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONEArray<String> TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> println
    Enum.TWO -> increaseMe++
  }

  increaseMe++(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(argsincreaseMe Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> :++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN"when
  ) (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE enum class Enum {
  ONE, TWO, THREE
} increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

->
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  THREE(increaseMe)
}

enum class Enum {
  ONE, TWO, println
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum {
  ONE, TWO, THREE
} Enum class
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @SuppressincreaseMe
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(("NON_EXHAUSTIVE_WHEN"))
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: enum = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

Long class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  Suppress enum = Enum.ONE

  @val("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<Enum.TWO>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    String -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: {<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) Array
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

ONE main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.fun

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("Enum")
  when (enum) {
    NON_EXHAUSTIVE_WHEN.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    -> -> increaseMe++
    Enum.TWO Enum.ONE increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:Enum
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = // Original bug: KT-23681.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<class>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum String Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<++>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMeString
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ONE<String>) {
  var increaseMe: Long = 0
  val enum = Enum.Array

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = ++
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe0
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMeenum
  }

  println(increaseMe)
}

++ class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  Array<String>

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<)>String {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  increaseMe++ increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> var
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) var increaseMe: Long = 0
  {
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    TWO -> increaseMe++
    Enum.Enum.ONE -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Suppress) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Array<String>("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMeincreaseMe
    Enum.TWO -> increaseMe++
  }

  println(++)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args= Array<String>) {
  var increaseMe: Long = 0
  val enum : Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

,

enum class Enum {
  ONE, TWOfun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
} THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main. {
  var increaseMe: Long = 0
  val enum = Enum(args: Array<String>)ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  increaseMe++
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> var increaseMe: Long = 0
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe{
  ONE, TWO, THREE
} Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum :
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    increaseMe -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(Enum.ONE)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Enum.TWO("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Suppress -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  println(increaseMe)

  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    increaseMe.ONE -> Enum++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<Enum>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    String.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.ONE.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("increaseMe++")
  when (enum) {
    Enum.ONE -> NON_EXHAUSTIVE_WHEN
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  Enum.ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @class("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum Suppress Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(:: Array<String>) {
  var increaseMeargs Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun mainEnum.ONEargs: Array<String>) {
  var increaseMe: Long = 0
  val enum = (

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.++

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMeONE
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String.) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum>TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  Enum.TWO -> increaseMe++ (enum) {
    Enum.ONE -> increaseMe++
    when
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var Enum: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    increaseMe.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(argsincreaseMe Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> :++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>enum class Enum {
  ONE, TWO, THREE
} {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

)
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = )
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN"0
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @{("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum Suppress
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<}>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  String

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    TWO, -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, Enum.ONE THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>NON_EXHAUSTIVE_WHEN {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(")")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @,("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONESuppress TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(++)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe"NON_EXHAUSTIVE_WHEN"
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<Stringenum class Enum {
  ONE, TWO, THREE
}) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

>
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: println) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  Array<String>(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: var increaseMe: Long = 0<String>) {
  Array
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    TWO.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, Enum, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = NON_EXHAUSTIVE_WHEN
  val enum = Enum.ONE

  @Suppress("0")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  increaseMe
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> var increaseMe: Long = 0++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @SuppressTWO
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.("NON_EXHAUSTIVE_WHEN") -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(Enum.ONE)
  when (enum) {
    "NON_EXHAUSTIVE_WHEN" -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(Enum.ONE -> increaseMe++: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    args
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  enum

  println(increaseMe)
}

@Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  } class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> println++
    Enum.TWO -> increaseMe++
  }

  increaseMe(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE Enum.TWO increaseMe++
    -> -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:Enum
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    // Original bug: KT-23681.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<.>) {
  var increaseMe: Long = 0
  val enum = EnumStringONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @}("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  Suppress

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: println<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  Array(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, THREE TWO,
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = ..ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    EnumEnumONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

increaseMe main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> fun++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @"NON_EXHAUSTIVE_WHEN"(Suppress)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<">) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHENString)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(ONE)
  when (enum) {
    Enum."NON_EXHAUSTIVE_WHEN" -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = )

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enumEnum.ONE {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  increaseMe enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> val++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

enum

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
} class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when .enum) {
    Enum.ONE -> increaseMe++
    Enum(TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<increaseMe>) {
  var String: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun Enum.TWO(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    main -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) Enum.ONE
    { -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) increaseMe
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println({)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
Suppress

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @// Duplicated bug: KT-17554("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = (

  @SuppressEnum.ONE"NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE println increaseMe++
    Enum.TWO -> increaseMe++
  }

  ->(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

Enum

enum class fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
} {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(->)
  when (enum) {
    Enum.ONE "NON_EXHAUSTIVE_WHEN" increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum -> increaseMe++
    Enum.ONE.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  Enum.ONE
  when (enum) {
    @Suppress("NON_EXHAUSTIVE_WHEN") -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array}String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
<

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum."NON_EXHAUSTIVE_WHEN"

  @Suppress(ONE)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<0>) {
  var increaseMe: Long = String
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val TWO = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.enum -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: println = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  Long(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.Enum -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class ONE {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    increaseMe.TWO -> increaseMe++
  }

  println(Enum)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val increaseMe = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(enum)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: increaseMe = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(Long)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<enum>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

String class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    println.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  Enum(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = EnumEnumONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    ..ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  enum class Enum {
  ONE, TWO, THREE
}(increaseMe)
}

println
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long Enum.ONE 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    = -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @,("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWOSuppress THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(})
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
"NON_EXHAUSTIVE_WHEN"

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
++

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe// Duplicated bug: KT-17554
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: increaseMe++ = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> Long
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Enum.TWO) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Array<String> -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    ++.TWO -> increaseMeEnum
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) Long
  var increaseMe: { = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(ONE,: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  args TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (() {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  printlnenumincreaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe,
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE++ TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) @
  var increaseMe: Long = 0
  val enum = Enum.ONE

  {Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> }++
    Enum.TWO -> increaseMe++
  increaseMe

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:Enum.TWO -> increaseMe++
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    // Original bug: KT-23681
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<enum>) {
  var increaseMe: Long = 0
  val String = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println("NON_EXHAUSTIVE_WHEN")increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args0 Array<String>) {
  var increaseMe: Long = :
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:>
// Duplicated bug: KT-17554

fun main(args: Array<String// Original bug: KT-23681) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    ->.TWO Enum increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @SuppressONE
  when (enum) {
    Enum.("NON_EXHAUSTIVE_WHEN") -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ArrayclassString>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum < Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @enum class Enum {
  ONE, TWO, THREE
}("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

Suppress
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val @ = Enum.ONE

  enumSuppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMeprintln Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  :(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("++")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMeNON_EXHAUSTIVE_WHEN
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  ( enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when valenum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: increaseMe++<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> Array
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun mainEnumargs: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    (.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
:

fun main(args// Duplicated bug: KT-17554 Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(argsONE Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  :, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ArrayTWOString>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.< -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: ( = 0
  val enum = Enum.ONE

  @SuppressLong"NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  enum

  println(increaseMe)
}

when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  } class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ArrayEnum.ONE -> increaseMe++) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    <String>
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    enum -> increaseMe++
  }

  println(increaseMe)
}

Enum.TWO class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = "NON_EXHAUSTIVE_WHEN"
  val enum = Enum.ONE

  @Suppress(0)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long println 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  =(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<>String) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: } = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  Long

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(enum)
  when ("NON_EXHAUSTIVE_WHEN") {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(("NON_EXHAUSTIVE_WHEN")) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppressargs: Array<String>
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) enum class Enum {
  ONE, TWO, THREE
}

{
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<println(increaseMe)>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  String
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    TWO.Enum -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun Long(args: Array<String>) {
  var increaseMe: main = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = ++.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMeEnum
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ONE) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  Array<String>, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun :(argsmain Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @.("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    EnumSuppressONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
ONE

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.// Duplicated bug: KT-17554 -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ONE<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.Array -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @enum("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

Suppress class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> ONE,
  }

  println(increaseMe)
}

enum class Enum {
  increaseMe++ TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array"NON_EXHAUSTIVE_WHEN") {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(<String>)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppressenum"NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

( class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(when: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  args (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  var increaseMe: Long = 0

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum ++ Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe=
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.Enum

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class ONE {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<@>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  StringSuppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Enum = 0
  val enum = Long.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:when
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  // Original bug: KT-23681 (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun Array<String>(args: main) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(=: Array<String>) {
  var increaseMe: Long = 0
  val enum args Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  ) enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enumval {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    ..ONE -> increaseMe++
    EnumEnumTWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @++("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMeSuppress
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: increaseMe) {
  var Array<String>: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @}("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
Suppress
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.Suppress

  @ONE("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> Enum.TWO -> increaseMe++
    increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<(increaseMe)>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  printlnString
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @ONE("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  Suppress, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun mainONE,args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ( TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("when")
  NON_EXHAUSTIVE_WHEN (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = EnumenumONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

. class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(0: Array<String>) {
  var increaseMe: Long = args
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) .
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum{TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.@Suppress("NON_EXHAUSTIVE_WHEN")

  ONE
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHENprintln(increaseMe))
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  "
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    increaseMe.TWO -> Enum++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMeincreaseMe++
    Enum.TWO -> ++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun increaseMe++(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> main
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    EnumTWO. -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when increaseMeenum) {
    Enum.ONE -> (++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun Enum.TWO -> increaseMe++(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    main
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: " = 0
  val enum = Enum.ONE

  @Suppress(LongNON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(TWO)
}

enum class Enum {
  ONE, increaseMe, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var .: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    EnumincreaseMeTWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("enum")
  when (NON_EXHAUSTIVE_WHEN) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(enumNON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

" class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress({
  ONE, TWO, THREE
})
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum "NON_EXHAUSTIVE_WHEN"
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMeincreaseMe
    Enum.TWO -> ++++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<Stringwhen) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  > (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @NON_EXHAUSTIVE_WHEN("Suppress")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Arraywhen (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  <

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(argsString Array<:>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

// Duplicated bug: KT-17554

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  printlnTWOincreaseMe)
}

enum class Enum {
  ONE, (, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<TWO>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.String -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<}>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
String
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ArrayincreaseMe++) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> <String>
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun THREE(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, main
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  @Suppress("NON_EXHAUSTIVE_WHEN") enum = Enum.ONE

  val
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<println>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  String(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = ++.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMeEnum
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:@Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  // Original bug: KT-23681

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: NON_EXHAUSTIVE_WHEN) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("Array<String>")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(enum)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

"NON_EXHAUSTIVE_WHEN" class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun mainNON_EXHAUSTIVE_WHEN {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("(args: Array<String>)")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) TWO

enum class Enum {
  ONE, {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = (
  val enum = Enum.ONE

  @Suppress0"NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: NON_EXHAUSTIVE_WHEN<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("Array")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when }enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
(
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ArrayincreaseMe) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(<String>)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  "

  @Suppress(val enum = Enum.ONENON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(++) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMeargs: Array<String>
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  class
}

enum println(increaseMe) Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }")
  NON_EXHAUSTIVE_WHEN

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: THREE = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, Long
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.TWO

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, ONE, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN",
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO) THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("println(increaseMe)")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  NON_EXHAUSTIVE_WHEN
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var Suppress: Long = 0
  val enum = Enum.ONE

  @increaseMe("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
Array<String>

fun main(args: // Duplicated bug: KT-17554) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

String main(args: Array<fun>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enumTHREE {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, )
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Suppress = 0
  val enum = Enum.ONE

  @Long("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Long<String>) {
  var increaseMe: Array = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array@Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  <

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
.

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum// Duplicated bug: KT-17554TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ,, TWOONE THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) enum
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

{ class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array,) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO<String> THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: when<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  Array (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  val enum = Enum.ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: "NON_EXHAUSTIVE_WHEN"<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(Array)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHENTHREE)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, "
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>++ {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe)
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: TWO = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, Long, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Enum.ONE("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Suppress -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: val enum = Enum.ONE = 0
  Long

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe{
  ONE, TWO, THREE
}
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum ++
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> {++
  }

  println(increaseMe)
}

enum class Enum increaseMe
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var ): Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMeincreaseMe
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ArrayEnum.TWO) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    <String> -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) ->
    Enum.ONE -> increaseMe++
    Enum.TWO { increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(increaseMe) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> args: Array<String>++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("class")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum NON_EXHAUSTIVE_WHEN Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(ONE)
}

enum class Enum {
  increaseMe, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum++ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe.
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = )
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum0 {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<->>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE String increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<++>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMeString
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  enum enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

val class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array(String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when <enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: NON_EXHAUSTIVE_WHEN = 0
  val enum = Enum.ONE

  @Suppress("Long")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: increaseMe) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> Array<String>++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    println -> increaseMe++
  }

  Enum.TWO(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> (increaseMe)++
  }

  printlnincreaseMe
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(Enum.ONE: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    args -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
"

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(// Duplicated bug: KT-17554NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

, class Enum {
  ONE, TWOenum THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Arrayprintln(increaseMe)) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  <String>
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ArrayprintlnString>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  <(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main@Suppress("NON_EXHAUSTIVE_WHEN") {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  (args: Array<String>)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum.ONE {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array@Suppress("NON_EXHAUSTIVE_WHEN")String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  <
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<increaseMe++>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> String
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: ONE = 0
  val enum = Enum.Long

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:Enum.TWO
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    // Original bug: KT-23681 -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(->) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE args: Array<String> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = Enum
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    0.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun .(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    EnummainTWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ArrayincreaseMeString>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> <++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<StringONE) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.> -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

args: Array<String> main(fun) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  Suppress
  val enum = Enum.ONE

  @var increaseMe: Long = 0("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:increaseMe
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> // Original bug: KT-23681++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = (.ONE

  @SuppressEnum"NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<Suppress>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @String("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  TWO,
}

enum class Enum {
  ONE, println(increaseMe) THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<increaseMe>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> String++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: ++ = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMeLong
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  enum (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

when class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
class

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum // Duplicated bug: KT-17554 Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(()
  when "NON_EXHAUSTIVE_WHEN"enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = TWO

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.Enum.ONE -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: ("NON_EXHAUSTIVE_WHEN") = 0
  val enum = Enum.ONE

  @SuppressLong
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @++("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMeSuppress
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum ) Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN"=
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = increaseMe++.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> Enum
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    increaseMe++ -> Enum.ONE
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) "NON_EXHAUSTIVE_WHEN"
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress({)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:->
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE // Original bug: KT-23681 increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: THREE<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, Array
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: increaseMe) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(Array<String>)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ArrayEnum) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    <String>.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var ++: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMeincreaseMe
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<increaseMe++>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> String
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args{ Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) :
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.++ -> increaseMeONE
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Enum = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Long.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe}
  }

  println(increaseMe)
++

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

Enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<increaseMe>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(String)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    class -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum Enum.ONE Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    EnumincreaseMeONE -> increaseMe++
    Enum.TWO -> .++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enumprintln {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  )(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @.("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    EnumSuppressTWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.} -> increaseMe++
    Enum.TWO -> increaseMe++
  ONE

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when ((increaseMe)) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  printlnenum
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<StringEnum) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    >.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

,

enum class Enum {
  ONEfun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
} TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}(args: Array<String>) main

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = )

  @Suppress("NON_EXHAUSTIVE_WHEN"Enum.ONE
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("println")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  NON_EXHAUSTIVE_WHEN(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    ++ -> increaseMeEnum.TWO
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  ,

  println(increaseMe)
}

enum class Enum {
  ONE@Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  } TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array++String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe<
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Enum.TWO<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Array -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
increaseMe

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(// Duplicated bug: KT-17554)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long ) 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN"=
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  } (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
when
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(argsEnum.ONE Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    : -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  ,
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWOvar increaseMe: Long = 0 THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum++ {
    Enum.ONE -> increaseMe)
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:++
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe// Original bug: KT-23681
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    } -> increaseMe++
    Enum.TWO -> increaseMe++
  Enum.ONE

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    ++ -> increaseMeEnum.ONE
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

THREE class Enum {
  ONE, TWO, enum
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ArraySuppress) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @<String>("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ArrayLongString>) {
  var increaseMe: < = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: enum class Enum {
  ONE, TWO, THREE
}<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

Array
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(")")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMeNON_EXHAUSTIVE_WHEN
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = ONE.Enum

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.TWO

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.ONE -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array"String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(<NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @enum("NON_EXHAUSTIVE_WHEN")
  when (Suppress) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:)
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum// Original bug: KT-23681 {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.@

  ONESuppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<StringLong) {
  var increaseMe: > = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.{ -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum ONE
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(:) {
  var increaseMeargs: Array<String> Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  "NON_EXHAUSTIVE_WHEN" enum = Enum.ONE

  @Suppress(val)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(TWO: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, args, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  {(increaseMe)
}

enum class Enum println
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun mainEnum.ONE {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    (args: Array<String>) -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @SuppressEnum.TWO -> increaseMe++"NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    (
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (Enum.TWO -> increaseMe++) {
    Enum.ONE -> increaseMe++
    enum
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  TWO,(increaseMe)
}

enum class Enum {
  ONE, println THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> enum class Enum {
  ONE, TWO, THREE
}
  }

  println(increaseMe)
}

increaseMe++
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: (<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @SuppressArray"NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMeEnum
}

enum class ) {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(""NON_EXHAUSTIVE_WHEN)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) ,
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE{ TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum., -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONETWO TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<enum>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (String) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = println.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  Enum(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    {.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum Enum
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.TWO,

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, ONE THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe@ Long = 0
  val enum = Enum.ONE

  :Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: {<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum Array
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMeSuppress Long = 0
  val enum = Enum.ONE

  @:("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    THREE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, Enum.ONE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  , enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWOval THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHENenum)
  when (") {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = println
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  0(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long , 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE= TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

{

enum class Enum fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @SuppressEnum"NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    (.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = (.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  printlnEnumincreaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  0

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(Enum.TWO -> increaseMe++)
  when (enum) {
    Enum.ONE -> increaseMe++
    "NON_EXHAUSTIVE_WHEN"
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.NON_EXHAUSTIVE_WHEN

  @Suppress("ONE")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(argswhen (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  } Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  :

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(.NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum"ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>Long {
  var increaseMe: ) = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.C

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> bByte--
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Test.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, A,
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = a.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y°// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

public abstract class BaseClass() {
    open val kind : String = "BaseClass "

    fun getKindValue() : String {
        return kind
    }
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Double("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y@// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    inFloat(0.0) -> "Fain inFloat"
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y/// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("fail 2: ")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y_// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    nullDouble -> {
                return "fail 1"
            }
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y2// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y)// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("OK")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    i.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y&// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(0)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// !LANGUAGE: +InlineClasses

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yZ// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("SECONDARY_CONSTRUCTOR_WITH_BODY_INSIDE_INLINE_CLASS")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y3// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(box)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: B<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @String("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Array = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y Ÿ// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
    var s = ""
    for ((a, b) in C(0)..C(2)) {
        s += "$a:$b;"
    }
    return s
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(My: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: test1 = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: String = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yR// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Z.Z1.foo("")                != "Z1" -> "Fail #1"
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 1u
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, ONE, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  contains(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yE// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  val Int.test: String get() = "test"
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  x, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = p.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y Ÿ// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Annotation v

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y1// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(i)
}

enum class Enum {
  ONE, TWO, THREE
}
y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(array)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.String

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<Int>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class y {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.x -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.aLong -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y?// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val l = ArrayList<Int>()

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y3// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: String) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(box: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y&// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(a)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y4// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(list)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Derived.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.Outer -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y0// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println()
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @ULong("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val A = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
xy// Original bug: KT-23681
// Duplicated bug: KT-17554

abstract fun foo(): String

enum class Enum {
  ONE, TWO, THREE
}
y(// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("O")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<l>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val Double = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.log -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yE// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    ::bar.isInitialized -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y2// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> xi++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y]// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  UNDEFINED(code = 56, nameTemplate = 3), TWO, THREE
}
y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  a3(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y?// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    b.foo("") != "Z" -> "Fail #4"
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y€// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, X {
        val x = "OK"

        inner class Inner {
            fun foo() = this@X.x
        }

        val z = Inner()

        override val test = z.foo()
    }; THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, V
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe>
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y3// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    in (1..3) -> "OK"
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (iterate) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y3// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> foo++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y2// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> it++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (Boolean) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.toInt -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// IGNORE_BACKEND: JVM_IR

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @ArrayList("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.Double -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  add, TWO, THREE
}
y`// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  E1 {
        override fun f() = "O"
    }, TWO, THREE
}
y3// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @X("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yF// Original bug: KT-23681
// !LANGUAGE: +ProperIeee754Comparisons

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.range4 -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y £// Original bug: KT-23681
// Duplicated bug: KT-17554

fun box(): String {
    when {}
    when (A.X1) {}
    return "OK"
}

enum class Enum {
  ONE, TWO, THREE
}
y%// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress()
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
    val x = foo(A("O", "K")) { i, (x, y), v -> i.toString() + x + y + v }

    if (x != "1OK#") return "fail 1: $x"

    return "OK"
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, p, THREE
}
y>// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val hashCode = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    String.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class box {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @innerFun("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yQ// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @file:UseExperimental(ExperimentalTypeInference::class)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yE// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    B().visit("K", "O") -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y>// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    a.foo(0) != "Z" -> "Fail #2"
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (arrayOf) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @this("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (a) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, WINTER, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, test
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> String++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y4// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var IFoo: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y2// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> Z2++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y@// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @A<Int, Number>("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    arrayOf.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y3// Original bug: KT-23681
// !API_VERSION: 1.0

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> Child++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(set: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(y: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// KJS_WITH_FULL_RUNTIME

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: A<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.s -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(l, "OK")
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Foo.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (En) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y@// Original bug: KT-23681
// Note the covariant return type

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<E>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y2// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  Exception()
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<ULong>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Int("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when(En.A) {
    En.A -> {}
    En.B -> {}
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe!=
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (IFn) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y-// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  val o = "O"
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y1// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(x)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> wrapN(42)!!.z!!
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    boxed.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    z.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, index
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

open class Enum {
  ONE, TWO, THREE
}
y3// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Season) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// KJS_WITH_FULL_RUNTIME
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.inner

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.list -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y/// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("fail get")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  Out, TWO, THREE
}
y'// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y(// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("9")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Father.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (box) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe+
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val result = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y1// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> y++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, to
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: My = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y,// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  b(2L)
}

enum class Enum {
  ONE, TWO, THREE
}
yR// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = delegate.subSequence(start, end)

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: String<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y1// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> c++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Outer<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.n

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// !LANGUAGE: +InlineClasses
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y'// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main() {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y4// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> Base++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yÇ// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when {
        z.foo("") != "Z" -> "Fail #1"
        b.foo("") != "Z" -> "Fail #2"
        a.foo("") != "Z" -> "Fail #3"
        else -> "OK"
    }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y4// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  y(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
    val a: A = A.C()
    val b: Boolean
    when (a) {
        A.B -> b = true
        is A.C -> b = false
    }
    return if (!b) "OK" else "FAIL"
}

enum class Enum {
  ONE, TWO, THREE
}
y>// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val children = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ax, TWO, THREE
}
y@// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Comparable {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Base("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y3// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @w("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yG// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (s) {
        is String -> s
        is Int -> "$s"
        else -> return ""
    }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Int = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y0// WITH_RUNTIME
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yç// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, B {
        override val value = "OK"

        override val test = ::value.get()
    }; THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.x -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.foo -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    "B" -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.this -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    cause.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: p1<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Boolean = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y'// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @PublishedApi
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe!=
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

inline class Enum {
  ONE, TWO, THREE
}
y4// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(thisRef: Any?) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> BooleanArray++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    !ne(ONE, 2) -> "Fail 3"
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y-// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress({ TEST })
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.result -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(String)
}

enum class Enum {
  ONE, TWO, THREE
}
yR// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  val x: Outer.Nested<String> = Outer.Nested("OK")
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(a: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Byte.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y3// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(foo)
}

enum class Enum {
  ONE, TWO, THREE
}
y0// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Test.A -> "OK"
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y1// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> k++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  Foo(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yH// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    C1().toString() != "C" -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y>// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, X("asd"),
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, Double
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun Outer(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yé// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
    companion object {
        val bar: String

        init {
            bar = "OK"
        }
    }
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.String -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: y = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yF// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
    fun foo(t: T, u: U) = "B"
}
y1// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(p)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe..
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y@// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Test().outer() -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    an == true -> "Fail 24"
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  changeLong(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y4// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @ok("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yR// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(inlineFunctionWithDefaultArguments)
}

enum class Enum {
  ONE, TWO, THREE
}
y∆// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (i) {
        1 -> {
            print(1)
            print(2)
            print(3)
            print(4)
            print(5)
        }
       else -> {
            monthString = "Invalid month"
        }
    }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
    val f1 = Foo("a")
    val f2 = Foo("b")
    val a = A(f1)
    val b = a.copy(f2)
    if (b.a.a == "b") {
        return "OK"
    }
    return "fail"
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: x<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y1// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> a++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.get -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    ONE.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    0.0F -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  Base(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y@// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    1.unaryMinus() -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    list4.size -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun box(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yP// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (value) {
        0 -> {}
        1 -> when (value) {
            2 -> false
        }
    }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val pr = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = bInt.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yE// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    B().visit("K", "O") -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: () -> String) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> InClass++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.result

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y4// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  T(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y>// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

abstract class Enum {
  ONE, TWO, THREE
}
y1// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(A)
}

enum class Enum {
  ONE, TWO, THREE
}
y1// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> A++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @value("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y/// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  result()
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = box.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class field {
  ONE, TWO, THREE
}
y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<T>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y&// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when(x) {
    0 -> true
    else -> throw Exception()
}

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y1// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var f: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Rgba("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yP// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> Outer(null).Inner().fn?.invoke()!!
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val d = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.j -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    '1' == nx -> "Fail 1"
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y2// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(val x: Long) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
yA// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, MyIterator, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    foo2.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<Long>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    ls.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Foo<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y3// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(arr)
}

enum class Enum {
  ONE, TWO, THREE
}
y1// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var k: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    ((true)) -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  B {
        val value2 = "K"

        val anonObject = object {
            val value3 = "O" + value2

            override fun toString(): String = value3
        }

        override val value = anonObject.toString()
    }; TWO, THREE
}
y'// Original bug: KT-23681
// Duplicated bug: KT-17554

fun box(): String {
    0.valProp
    false.valProp
    '0'.valProp
    0.0.valProp
    0.0f.valProp
    0.toByte().valProp
    0.toShort().valProp
    0.toLong().valProp

    A()()

    return "OK"
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  toString(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y(// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("K")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y(// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(i) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y?// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.receiver -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y// Original bug: KT-23681
// Duplicated bug: KT-17554

fun test3(str: String): String {
    var xx = ""
    data class A(val x: Int) {
        fun foo(): String { xx = str; return xx }
    }
    return A(0).copy().foo()
}

enum class Enum {
  ONE, TWO, THREE
}
y+// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(p: T) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe+
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: bar = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y?// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.Iterator -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    k.ok -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y/// MODULE: lib
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y2// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(it)
}

enum class Enum {
  ONE, TWO, THREE
}
y4// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  d(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y(// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(L) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val String = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y-// Original bug: KT-23681
//WITH_RUNTIME

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(B: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: B = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y<// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ENTRY

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    !eq4(1, 1) -> "Fail 4"
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.test

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: a<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = list5.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = x.d

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (R) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, FOO {
        // FOO referenced from inner class constructor with initialized 'this'
        inner class Inner {
            val fooFoo = FOO.foo()
        }

        val z = Inner()

        override fun foo() = "OK"

        override fun bar() = z.fooFoo
    }
}
y0// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  Derived()
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> String++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y=// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    p == "test" -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun ok(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    doBar.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.Int

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y>// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @getFromClass("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> kotlin++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y ñ// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
        value = o
    }

enum class Enum {
  ONE, TWO, THREE
}
y>// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.Boolean -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (set) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  String(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, A, THREE
}
y// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @A
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y1// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

inline class Z(val int: Int)
y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(Short)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, X1, THREE
}
y˙// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when {
        Z.foo("")  != "Z" -> "Fail #1"
        o.foo("")  != "o" -> "Fail #2"
        zb.foo("") != "Z" -> "Fail #3"
        ob.foo("") != "o" -> "Fail #4"
        za.foo("") != "Z" -> "Fail #5"
        oa.foo("") != "o" -> "Fail #6"
        else -> "OK"
    }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun bar(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y;// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Float = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  @Suppress("NON_EXHAUSTIVE_WHEN")
  val enum = Enum.ONE

  var increaseMe: Long = 0
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}
enum class Enum {

  ONE, TWO, THREE
}
y:// Original bug: KT-23681
// Duplicated bug: KT-17554


  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
fun main(args: Array<String>) {y%// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum 
y.// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> 
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y2// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = 

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, , THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE@Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe:  = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {ONE, TWO, THREE
}
y"// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    EnumONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y// Original bug: KT-23681


fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args:Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum  Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

 main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
   (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = EnumONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum. -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y'// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enumclass Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum =Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y0// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> ++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE,  THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE-> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y Ô// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

 class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun (args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y Ã// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, 
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO  increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
   enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE,TWO, THREE
}
y#// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    EnumTWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum. -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE

y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE  increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when(enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) 
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y2// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
     -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y"// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum= Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y0// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> ++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
x}// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) 

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val  = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress(NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
x_// Original bug: KT-23681
// Duplicated bug: KT-17554



enum class Enum {
  ONE, TWO, THREE
}
y-// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO-> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long =0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when () {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: ArrayString>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress"NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y.// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> 
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y.// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  valenum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y2// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
     -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y3// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  (increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO,THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  , TWO, THREE
}
y"// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y4// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe:Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y%// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String> {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum){
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  varincreaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++}

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = .ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)


enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun mainargs: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) 
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum classEnum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN)
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>){
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum 
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    .TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

funmain(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    .ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y'// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}


y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y2// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y7// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
   increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  printlnincreaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe
}

enum class Enum {
  ONE, TWO, THREE
}
y5// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: <String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y6// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class  {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum  Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE ->increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y8// Original bug: KT-23681
// Duplicated bug: KT-17554fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y9// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++
    Enum.TWO ->increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")
  when (enum) {
    Enum.ONE -> increaseMe++

  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
y+// Original bug: KT-23681
// Duplicated bug: KT-17554

fun main(args: Array<String>) {
  var increaseMe: Long = 0
  val enum = Enum.ONE

  @Suppress("NON_EXHAUSTIVE_WHEN")

    Enum.ONE -> increaseMe++
    Enum.TWO -> increaseMe++
  }

  println(increaseMe)
}

enum class Enum {
  ONE, TWO, THREE
}
ˇˇ