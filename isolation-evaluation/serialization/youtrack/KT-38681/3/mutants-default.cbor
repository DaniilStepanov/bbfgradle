øiexportTaggdefaultnoriginalSampleyf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
gmutantsüyú// Original bug: KT-30495
// Duplicated bug: KT-38681


val x = false
try
{open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}}
catch(e: Exception){}
finally{}


class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}


val o = false
when (o) {
 true -> {class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}}
 else -> {class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}}
}


fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yõ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}


val z = true
try
{fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}}
catch(e: Exception){}
finally{}

yõ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() 
val x = true
try
{{
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}}
catch(e: Exception){}
finally{}

yõ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<
val t = true
try
{T}
catch(e: Exception){}
finally{}
> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yú// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    
val f = false
try
{open fun testFun(a: T, b: Boolean = false) { }}
catch(e: Exception){}
finally{}

}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y›// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    
val m = true
when (m) {
 true -> {override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }}
 else -> {override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }}
}

}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yõ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    
val s = true
try
{SubTest().testFun(true)}
catch(e: Exception){}
finally{}
 // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yõ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    
val y = true
try
{SubTest().testFun(true, false)}
catch(e: Exception){}
finally{}
 // -> Works
}
yù// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) 
val f = false
when (f) {
 true -> {{ }}
 else -> {{ }}
}

}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yß// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : 
val z = false
when (z) {
 true -> {Test<Boolean>}
 else -> {Test<Boolean>}
}
() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y±// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) 
val g = false
when (g) {
 true -> {{ super.testFun(a, b) }}
 else -> {{ super.testFun(a, b) }}
}

}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yê// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    
val v = false
if (v) {SubTest()} else {SubTest()}
.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y¶// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().
val g = true
when (g) {
 true -> {testFun(true)}
 else -> {testFun(true)}
}
 // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yê// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    
val k = false
if (k) {SubTest()} else {SubTest()}
.testFun(true, false) // -> Works
}
yú// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().
val b = false
try
{testFun(true, false)}
catch(e: Exception){}
finally{}
 // -> Works
}
yõ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(
val z = true
try
{a: T}
catch(e: Exception){}
finally{}
, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y¨// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, 
val v = false
when (v) {
 true -> {b: Boolean = false}
 else -> {b: Boolean = false}
}
) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yë// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(
val q = false
if (q) {a: Boolean} else {a: Boolean}
, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y§// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, 
val c = false
when (c) {
 true -> {b: Boolean}
 else -> {b: Boolean}
}
) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y¨// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { 
val p = true
when (p) {
 true -> {super.testFun(a, b)}
 else -> {super.testFun(a, b)}
}
 }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yç// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    
val r = true
if (r) {SubTest} else {SubTest}
().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yõ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().
val w = true
try
{testFun}
catch(e: Exception){}
finally{}
(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y†// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    
val v = true
when (v) {
 true -> {SubTest}
 else -> {SubTest}
}
().testFun(true, false) // -> Works
}
y†// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().
val w = true
when (w) {
 true -> {testFun}
 else -> {testFun}
}
(true, false) // -> Works
}
yõ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = 
val q = true
try
{false}
catch(e: Exception){}
finally{}
) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yå// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { 
val t = false
if (t) {super} else {super}
.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yî// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.
val y = false
if (y) {testFun(a, b)} else {testFun(a, b)}
 }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yä// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : 
val p = true
if (p) {Test} else {Test}
<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yõ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { 
val z = true
try
{super}
catch(e: Exception){}
finally{}
.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yú// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.
val a = false
try
{testFun}
catch(e: Exception){}
finally{}
(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yã// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(
val m = false
if (m) {true} else {true}
) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yû// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(
val x = false
when (x) {
 true -> {true}
 else -> {true}
}
, false) // -> Works
}
yã// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, 
val n = true
if (n) {false} else {false}
) // -> Works
}
yõ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: 
val v = false
when (v) {
 true -> {T}
 else -> {T}
}
, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yõ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: 
val p = true
try
{Boolean}
catch(e: Exception){}
finally{}
 = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y†// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: 
val n = true
when (n) {
 true -> {Boolean}
 else -> {Boolean}
}
, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yé// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: 
val f = false
if (f) {Boolean} else {Boolean}
) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yõ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(
val g = true
try
{a}
catch(e: Exception){}
finally{}
, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yõ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, 
val n = true
try
{b}
catch(e: Exception){}
finally{}
) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y†// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<
val j = true
when (j) {
 true -> {Boolean}
 else -> {Boolean}
}
>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    (SubTest)().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true)!! // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }!!
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest()!!.testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest!!().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super!!.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun!!(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true!!, false) // -> Works
}
yi// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : (Test<Boolean>)?() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yi// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: (T)?, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yi// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: (Boolean)? = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yi// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: (Boolean)?, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yi// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: (Boolean)?) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yi// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<(Boolean)?>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, ()) { super.testFun(a, b) }
}

fun mainb: Boolean {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().false(true) // -> Code Generation Error
    SubTest().testFun(true, testFun) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = falsetrue { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(), false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: ()) { super.testFun(a, b) }
}

fun mainBoolean {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    SubTest().testFun(true, false) fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    override // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T(true) b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun, // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.(true, false)(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFuntestFun // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : testFun() {
    override fun testFun(a: Boolean, b: Boolean) { super.Test<Boolean>(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFuntestFuntrue) // -> Code Generation Error
    SubTest().((true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<fun> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override T testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) Test<Boolean>() }
}

class SubTest : { {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

testFun

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(false, b: Boolean = a: T) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, }) { super.testFun(a, b) }
b: Boolean

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) {
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() { }
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b. Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest():testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}, b) }
}

a
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: () { super.testFun(a, b) }
}

fun main() {
    SubTest().testFunBooleantrue) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(true, b) }
}

fun main() {
    SubTest().testFun(a) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : override {
    Test<Boolean>() fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : ( {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFunTest<Boolean>()true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun) // -> Code Generation Error
    SubTest((true).testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun() { super.testFun(a, b) }
}

fun main(a: Boolean, b: Boolean) {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Boolean() {
    override fun testFun(a: Test<Boolean>, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, Test<Boolean>()) { }
}

class SubTest : b: Boolean = false {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf(
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun// Original bug: KT-30495true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: testFun(a, b), b: Boolean) { super.Boolean }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFunBooleana: (, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: {, b: Boolean) Boolean super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

testFun SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().class(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : ) {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest(Test<Boolean>().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super{
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}testFun(a, b) }
}

fun main() .
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

Test SubTest : class<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) } {
    Test<Boolean>()
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) ( }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest{).testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFuna { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun((a: T, b: Boolean = false), b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

(true) SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFunclass // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = falseoverride fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) } { }
}

class SubTest : Test<Boolean>() {
    )
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFunfalse { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, (a: T, b: Boolean = false)) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = testFun) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().false(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(true, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(a: Boolean) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
true

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(// Duplicated bug: KT-38681) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: // -> Code Generation Error, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) T
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(aSubTest b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    ,().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    false fun testFun(a: T, b: Boolean = open) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<(true, false)> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFunT // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() (
    SubTest().testFun(true) // -> Code Generation Error
    SubTest{).testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>( {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main()) {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

, main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(truefun false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { supertestFuntestFun(a, b) }
}

fun main() {
    SubTest()..(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean super.testFun(a, b) false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { = }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(): Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main(a {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

,

class SubTest : Test<Boolean>() {
    override fun testFun(a: Booleanopen class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
} b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: } = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) Boolean
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFuntruetrue) // -> Code Generation Error
    SubTest().testFun((, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, btestFun Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().:(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class b: Boolean = false<T> {
    open fun testFun(a: T, Test) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, main) }
}

fun b() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: testFun(a, b) = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.Boolean }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test(Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun<a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: Boolean, b: Boolean = false) { }
}

class SubTest : Test<T>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) ( }
}

class SubTest : Test<Boolean>() {
    override fun testFun{a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>SubTest() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    ().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b() Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest:.testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) SubTest().testFun(true, false)
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    { } // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<Boolean> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: T) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

main SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun class() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFunfalsetrue) // -> Code Generation Error
    SubTest().testFun(true, () // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: )) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest(Boolean.testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

testFun(true) SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().class // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
} = false) { }
}

Boolean

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(,a b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : b() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, Test<Boolean>) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { testFun(a, b).super }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> (a, b)

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun{
    open fun testFun(a: T, b: Boolean = false) { }
} }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : true<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(Test, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(}, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) a: T
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

> class Test<Topen {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    Boolean fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<open>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: . = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest()BooleantestFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<false>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, Boolean) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class true : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(SubTest, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    Test<Boolean>() fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : open {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) true
}

fun main() {
    SubTest().testFun(}) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> Test<Boolean>

class SubTest : {
    open fun testFun(a: T, b: Boolean = false) { }
}() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun mainfalse {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, ()) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, SubTest(): Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    b.testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFunmain }
}

fun (a, b)() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>testFun {
    override fun ()(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<>Boolean() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, {: Boolean = false) b }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

. class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { superopentestFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: } = false) { }
Boolean

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, {) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) b: Boolean = false super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, {) b: Boolean super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<fun>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

Boolean main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open false testFun(a: T, b: Boolean = fun) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(aSubTest() T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    :.testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test{
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
} {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() <T>

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: true, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(T, false) // -> Works
}
yftestFun
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().// Original bug: KT-30495(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    }().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
SubTest
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<Ta {
    open fun testFun(>: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

{
    open fun testFun(a: T, b: Boolean = false) { }
} class Test<T> open

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    false.testFun(true, SubTest()) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

(

class SubTest : Test<Boolean>() {
    override fun testFunopen class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Boolean() {
    override fun testFun(a: Boolean, b: Test<Boolean>) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<SubTest>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    Boolean().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : testFun(true, false)<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().Test // -> Works
}
yf// Original bug: KT-30495
<Boolean>

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test// Duplicated bug: KT-38681() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

Boolean class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<open>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { a.testFun(super, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Boolean<Test>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) super }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { {.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest(testFun(a, b).testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun)a, b( }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<super>() {
    override fun testFun(a: Boolean, b: Boolean) { Boolean.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTestSubTest.testFun(true) // -> Code Generation Error
    ()().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: }, b: Boolean = false) { T
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false// -> Works )
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(true, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(a, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>super) {
    override fun testFun(a: Boolean, b: Boolean) { (.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
(

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun}a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(asuper T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { :.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(Boolean, b: Boolean = false) { }
}

class SubTest : Test<a: T>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class a<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(Test: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : )() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest(Test<Boolean>.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(): Boolean, b: Booleana { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : ()() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTestTest<Boolean>.testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    override fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    open fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: true) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(Boolean) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override testFun(true, false) testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().fun // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: BooleanSubTest().testFun(true, false) b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    , // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { ) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, falsesuper.testFun(a, b) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open Boolean Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<class>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun((), b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTesta: Boolean.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun mainSubTest) {
    (().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yfa
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(// Original bug: KT-30495, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(<, b: Boolean = false) { }
}

class SubTest : Testa: TBoolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: SubTest(), b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    T.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test, {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true<T> false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class {
    open fun testFun(a: T, b: Boolean = false) { }
}<T> Test

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun maintestFun {
    SubTest().()(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<Test<Boolean>()> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : T {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(aSubTest Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    :().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test)T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest(<.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

{ class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) open super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class true<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(Test, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    ,
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Booleanopen fun testFun(a: T, b: Boolean = false) { } b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = true) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(false) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : true() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(Test<Boolean>) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    true.testFun(SubTest(), false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    () // -> Code Generation Error
    SubTestSubTest().testFun(true).testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(testFun, b: Boolean) { super.a: Boolean(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, Boolean: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: b) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = falsesuper { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { ).testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(aSubTest().testFun(true) Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    : // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open Boolean testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<fun>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: )Boolean { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T(true, false) b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun, // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, { super.testFun(a, b) }: Boolean) b
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    false().testFun(true, SubTest) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class TestbT> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, <) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) testFun super.testFun(a, b) }
}

fun main() {
    SubTest().{(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf{
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() // Original bug: KT-30495
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun a(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(testFun, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, bSubTest Boolean) { super.testFun(a, b) }
}

fun main() {
    :().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest()(testFun(true) // -> Code Generation Error
    SubTest.).testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: ) = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, falseBoolean // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<)>(Boolean {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFuntestFun }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().(a, b)(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : super.testFun(a, b) {
    override fun testFun(a: Boolean, b: Boolean) { Test<Boolean>() }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: testFun, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().Boolean(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, bSubTest().testFun(true) Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    : // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: ), b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(trueT // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(}: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
a

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    true fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(override) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Testclass SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

<

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, Boolean) { }
}

class SubTest : Test<b: Boolean = false>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = () { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFunfalsetrue, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    : fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(aopen Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: Tb b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, ,: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Boolean<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Test, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: TBoolean b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: ,) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest testFun Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().:(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: BooleanSubTest() { super.testFun(a, b) }
}

fun main() {
    ).testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(SubTest(), b) }
}

fun main() {
    a.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    testFun().testFun(true) // -> Code Generation Error
    SubTest().SubTest(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { super
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { }.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun ,() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(truemain false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: Ttrue b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(,) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<{
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() T
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: (, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFunBooleantrue, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun super(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { testFun.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}> {
    open fun testFun(a: T, b: Boolean = false) { }
}

T

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: fun, b: Boolean) { super.testFun(a, b) }
}

Boolean main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, () }
}

fun mainb) {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: testFun, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().T(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    ) fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest(override.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super,testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true. false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: false, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, Boolean) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<true>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(Boolean, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(testFun, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().a(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open Boolean testFun(a: T, b: fun = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = falsetestFun { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().)(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun.a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest()(testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: false = Boolean) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) true
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun({ }) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    SubTest fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    open().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

(a: Boolean, b: Boolean)

class SubTest : Test<Boolean>() {
    override fun testFunopen class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
} { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: // -> Code Generation Error) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) Boolean
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest()testFuntestFun(true) // -> Code Generation Error
    SubTest()..(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
testFun

fun main() {
    SubTest().}(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

Boolean SubTest : Test<class>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<b: Boolean>() {
    override fun testFun(a: Boolean, Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun((, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFuna: Ttrue) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() (

fun main{
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}) {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<)>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest(Boolean.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean( { super.testFun(a, b) }
}

fun main)) {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() b
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    testFun fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().override(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFunsuper.testFun(a, b)a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { ( }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open b Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, class) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test=T> {
    open fun testFun(a: T, b: Boolean < false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(Boolean: T, b: Boolean = false) { }
}

class SubTest : Test<a>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(,: Booleana b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest ( Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun:true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<b>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, Boolean) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun()) // -> Code Generation Error
    SubTest(true.testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
} testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>a {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun((), b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

()

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTestopen class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}.testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = .) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest()falsetestFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(main, b: Boolean) { super.testFun(a, b) }
}

fun a: Boolean() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.((a, b) }
}

fun maintestFun) {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = testFun(a, b)) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.false }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = falsetestFun { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().)(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { // -> Code Generation Error }
}

fun main() {
    SubTest().testFun(true) super.testFun(a, b)
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
Test<Boolean>

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : // Duplicated bug: KT-38681() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { :
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b} Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFuntestFun(true, false) // -> Code Generation Error
    SubTest().(true) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
:

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b} Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class TestSubTest {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    <T>().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

class SubTest : Test<Boolean>() {
    }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class TestBoolean {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: <T>, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
{
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() // Duplicated bug: KT-38681

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open } testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
fun

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() true

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun({
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> (

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main{
    open fun testFun(a: T, b: Boolean = false) { }
}) {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, (true)) }
}

fun main() {
    SubTest().testFunb // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { ().testFun(a, b) }
}

fun mainsuper {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> (
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun{true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, true) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(b: Boolean) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, SubTest()) { super.testFun(a, b) }
}

fun main() {
    b: Boolean.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : ()() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun mainTest<Boolean> {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: b, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, T) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>true {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun((), false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

open fun testFun(a: T, b: Boolean = false) { }
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<Boolean>T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: ()) { super.testFun(a, b) }
}

fun main() {
    SubTestBoolean.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    { fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() override
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : SubTest {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    Test<Boolean>()().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

} class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) open
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b{ }
}

fun main() )
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.true(a, b) }
}

fun main() {
    SubTest().testFun(testFun) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun maintestFun) {
    SubTest().((true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(SubTest().testFun(true): T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    a // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Booleana { super.testFun(), b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(atrue b) }
}

fun main() {
    SubTest().testFun(,) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a. T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest():testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>,) {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true( false) // -> Works
}
yfTest<Boolean>
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : // Original bug: KT-30495() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(b, a) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf(
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest// Original bug: KT-30495).testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    : fun testFun(aoverride Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: super) { Boolean.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open ) Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, bclass }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>testFun) {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().((true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T} b: Boolean = false) { ,
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<a> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(T, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yfSubTest().testFun(true, false)
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    // Original bug: KT-30495 // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(SubTest, b: Boolean = false) { }
}

class a: T : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(super.testFun(a, b): T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { a }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, true) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(b: Boolean, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open Boolean Test<T> {
    open fun testFun(a: T, b: class = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun b(a: Boolean, b: Boolean) { super.testFun(a, testFun) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, Boolean: Boolean = false) { }
}

class SubTest : Test<b>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: // -> Code Generation Error, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) Boolean
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<TtestFun(true) {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().> // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, override) { }
}

class SubTest : Test<Boolean>() {
    b: Boolean = false fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Testtrue {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(<T>) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest SubTest().testFun(true) Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    : // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<TBoolean {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: >) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun, { super.testFun(a(a: Boolean, b: Boolean) b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().false // -> Code Generation Error
    SubTest().testFun(true, testFun(true)) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Booleana b: Boolean) { super.testFun(,, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: , = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(trueBoolean false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, SubTest) { }
}

class b: Boolean = false : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<testFun>() {
    override fun testFun(a: Boolean, b: Boolean) { super.Boolean(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf{
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() // Original bug: KT-30495
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean( { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun)true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: { } = false) Boolean
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: ( = false) { }
}

class SubTest : Test<Boolean>Boolean) {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(SubTest, b) }
}

fun main() {
    a().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    false fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, open) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: }, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
T

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
}

{ super.testFun(a, b) }
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class TesttestFun(true) {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().<T> // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> Boolean
    open fun testFun(a: T, b: { = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(Boolean: a, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) // -> Code Generation Error
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) { }
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean // -> Code Generation Error false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) =
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: Test<Boolean>, b: Boolean = false) { }
}

class SubTest : T() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { // -> Code Generation Error
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) }
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: ) = falseBoolean { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(false: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, a) // -> Works
}
yf// Original bug: KT-30495
b: Boolean = false

open class Test<T> {
    open fun testFun(a: T, // Duplicated bug: KT-38681) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun ()() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTestmain.testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Booleantrue() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(>) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFunBoolean { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: (a: T, b: Boolean = false)) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open SubTest() testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    fun.testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
true

fun main() {
    SubTest().testFun(}) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : a {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(Test<Boolean>(), b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: }, b: Boolean) { super.testFun(a, b) Boolean
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: Test<Boolean>(), b: Boolean = false) { }
}

class SubTest : T {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(<: T, b: Boolean = false) { }
}

class SubTest : TestaBoolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, false) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, b: Boolean) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: Boolean, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: T, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, (): Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun mainb {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : .<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest()TesttestFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = Boolean) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: false) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}.testFun(a, b) }
}

fun main() super
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open false testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, fun) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: main, b: Boolean) { super.testFun(a, b) }
}

fun Boolean() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : SubTest<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    Test().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}

fun main() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}
yf// Original bug: KT-30495
,

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true// Duplicated bug: KT-38681 false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b( Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest:).testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, true) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(b: Boolean = false, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open ( Test<T> {
    open fun testFunclassa: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
T

open class Test<// Duplicated bug: KT-38681> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(() // -> Code Generation Error
    SubTesttrue).testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(b: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, a: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false(a, b) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a) Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest(:.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest(}.testFun(true, false) // -> Works
)
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<)>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, bBoolean }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFunSubTest().testFun(true, false) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    (a, b) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    )().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, falseSubTest // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : testFun(a, b) {
    override fun testFun(a: Boolean, b: Boolean) { super.Test<Boolean>() }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    testFun
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().open fun testFun(a: T, b: Boolean = false) { }(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: testFun(true), b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().T // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: SubTest().testFun(true, false), b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    Boolean // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, bSubTest Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    :().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    testFun(true, false)
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) } // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, () }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTestb).testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> testFun
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().{(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: ), b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: BooleanT { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : (true)<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFunTest // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    ()
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTestopen fun testFun(a: T, b: Boolean = false) { }.testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = falsetestFun(true, false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test,T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a< b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>true) {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun((, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    . fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest()opentestFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    (().testFunSubTesttrue, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class TesttestFun(true, false)T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().< // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(true) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(a: T, b: Boolean = false) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: super = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { Boolean.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : TestSubTest().testFun(true, false)() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    <Boolean> // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun( { super.testFun(a: Boolean, b: Boolean)a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun true(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(testFun, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(}, b) a
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, (true, false)) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFunb: Boolean // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : ()() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTestTest<Boolean>.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    ).testFun(trueSubTest() // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    true fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(open) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun() }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest(a, b).testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<// -> Code Generation Error>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) Boolean
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : ()<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTestTest.testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

false
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = a) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(false: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Testa {
    open fun testFun(<T>: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

{
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    testFun fun testFun(a: Boolean, b: Boolean) { super.override(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<super> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { T.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : TestSubTest() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    <Boolean>().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open } Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
class
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean Test<Boolean> false) { }
}

class SubTest : =() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().true(true) // -> Code Generation Error
    SubTest().testFun(testFun, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<Boolean> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<T>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<SubTest().testFun(true)>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    Boolean // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> Boolean
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<{>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : b<Boolean>() {
    override fun testFun(a: Boolean, Test: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun mainSubTest() {
    SubTest().testFun(true) // -> Code Generation Error
    ().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: b = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, Boolean: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a(true) Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun: // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(override: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    a fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: ), b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, falseBoolean // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>true {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(()) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(false, true) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}) }
}

fun main() b
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>super.testFun(a, b)) {
    override fun testFun(a: Boolean, b: Boolean) { ( }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest (a: Boolean, b: Boolean) Test<Boolean>() {
    override fun testFun: { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    (true, false)().testFun(true) // -> Code Generation Error
    SubTest().testFunSubTest // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

testFun
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> (a: Boolean, b: Boolean)
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun{ { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(SubTest().testFun(true, false), b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    a // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>b: Boolean {
    override fun testFun(a: Boolean, ()) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) Boolean }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: {) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Testa: Boolean {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(<T>, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    testFun().SubTest(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : TestBoolean<>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open testFun Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().class(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<{
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() Boolean
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) // -> Works
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) { }
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, bfun }
}

) main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun// -> Workstrue) // -> Code Generation Error
    SubTest().testFun(true, false) (
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    () fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>open {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class (<T> {
    open fun testFunTesta: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

Test<Boolean> SubTest : class() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { b.testFun(a, super) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { testFun
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().}(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Testtrue {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(<T>, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : <Boolean>Test() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) .
}

fun main() {
    SubTest(){ super.testFun(a, b) }testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFuntestFun(a, b)a: Boolean, b: Boolean) { super.( }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: class = false) { }
}

Boolean SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b) { super.testFun(a, b: Boolean) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open () testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTestfun.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, fun: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override b testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

()

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTestclass SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}.testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.,(atestFun b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, () }
}

fun main() {
    SubTestb).testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().((true) // -> Code Generation Error
    SubTesttestFun).testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(), b: Boolean) { super.testFun(a, ba: Boolean }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    a fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(open, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: (, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTestT).testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : , {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(trueTest<Boolean>() false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { true.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(super, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: ), b: Boolean = false) { }
}

class SubTest : Test<Boolean>(T {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) b super.testFun(a, {) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, Boolean: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: b, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTestfalse.testFun(true, ()) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: ., b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest()TtestFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) <Boolean> }
}

class SubTest : Test{() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : b {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, Test<Boolean>()) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { supertestFun(true, false)testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().. // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    Test<Boolean>
}

class SubTest : open fun testFun(a: T, b: Boolean = false) { }() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override true testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(fun) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun({, b: Boolean) { super.testFun(a, b) }
}

fun main() a: Boolean
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFuntrue { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun((a: T, b: Boolean = false)) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().(true, false)testFun // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, super: Boolean) { b.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> super
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { {.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override ( testFun(a: Boolean, b: Boolean) { super.testFunfuna, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(trueSubTest // -> Code Generation Error
    )().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
true

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(// Duplicated bug: KT-38681, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(Boolean, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: a: T) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<(>() {
    override fun testFunBooleana: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a} T, b: Boolean = false) { :
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test{ super.testFun(a, b) }Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) <
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: false) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, Boolean) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = a: Boolean) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(false, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Booleansuper b: Boolean) { ,.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: .) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest()BooleantestFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    list2().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    super().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yZ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : A() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: a) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    thrown().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.typeName(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

inline class UInt(private val value: Int) {
    fun asInt() = value
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.toLong(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yQ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
        val result = "OK"
    }

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().let { it } // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: T = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yj// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest(Foo2).testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : set<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yn// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) it + value2
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    Int().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun String() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yP// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun() { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().checkLess(a, b) // -> Works
}
yj// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    operator fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yk// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(string: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<String>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yw// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) {
    log.append(msg)
    return value
}
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// KJS_WITH_FULL_RUNTIME
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    A().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(C: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yj// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    override fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y\// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { A().bar() }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, desc: KProperty<*>) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : String() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: OverBase) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yj// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(L(1234L)) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.o(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: t, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yk// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    inner class B(val s: String) {
        val result = value + "_" + s
    }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yj// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: arrayListOf, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    getx().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

const class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: v, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) {
    val a1 = A(null)
    val a2 = A("")
    if (a1 == a2 || a2 == a1) return "Fail 1"

    val b1 = B(null)
    val b2 = B("")
    if (b1 == b2 || b2 == b1) return "Fail 2"

    return "OK"
}
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yÖ// Original bug: KT-30495
// Duplicated bug: KT-38681

class Outer private constructor(val s: S) {
    class Nested {
        fun test(s: S) = Outer(s)
    }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yi// !LANGUAGE: +InlineClasses
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: String = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yj// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class Test {
    val Int.foo: String
        get() = "OK"

    fun test(): String {
        return 1.foo
    }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: String) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Array<T>>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : SuperFoo() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yT// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    0.toDouble() // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun("OK") }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: BK = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun Boolean(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    enum fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class C<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : UseExperimental() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yC// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    fun foo(): Season = Season.Warm()
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, A::foo) // -> Works
}
yq// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(val value : Int, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y0// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class P2(x : Int, yy : Y) : X(x), Abstract, Y by yy {}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : foo<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class pr<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y	// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() Z(xx.int + 1)
yk// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : quicksort<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ys// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, AssertionError: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(add, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, true) // -> Works
}
yc// Original bug: KT-30495
// KJS_WITH_FULL_RUNTIME

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().l(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: hasNext, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y\// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().M() // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(0) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun() }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<this>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yX// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : B {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: String, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Int>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, f) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().equals3(-0.0F, 0.0F) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    b().testFun(true, false) // -> Works
}
yi// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun("OK", b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yw// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // !LANGUAGE: +InlineClasses
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    foo().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testR1xE0() // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class MyObject : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun Any() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yZ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : B() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: x = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : A<Int>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y\// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().D() // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ys// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // !LANGUAGE: +FunctionTypesWithBigArity
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().c(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(false) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yÈ// Original bug: KT-30495
// Duplicated bug: KT-38681

class Outer {
    class Nested {
        fun fn(): String  {
            s = "OK"
            return s
        }
    }

    companion object {
        public var s = "fail"
            private set
    }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    Int().testFun(true, false) // -> Works
}
yk// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: String, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y“// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    var x = 0

    operator fun get(i1: Int, i2: Int, i3: Int): Int = x

    operator fun set(i1: Int, i2: Int, i3: Int, value: Int) {
        x = value
    }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yT// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(y: Int) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yk// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: A<Int>, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yV// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    C().foo // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yU// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().M() // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: i = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yy// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>(ints = *ints, s = s) {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    operator fun Long.set(i: Int, newValue: Long) {}
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ym// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { "123456"?.get(0)!!.toInt() }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun("OK", false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(foo, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class a<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yO// Original bug: KT-30495
// Duplicated bug: KT-38681

interface A<T> {
    fun foo(t: T, u: Int) = "A"
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(s, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : String<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y[// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun() // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun Class(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(a = 2, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().ZImpl2() // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: A) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yo// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(Int.MIN_VALUE) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, name: String) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ym// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().AssertionError(true, false) // -> Works
}
yX// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : A {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    X().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : super<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun Int(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: i, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().str(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yk// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, String: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.sortedBy(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: A = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    bug().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().text2(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, a) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y{// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun("Should be executed once") // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(args: Array<String>) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(D, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yM// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    Impl().bar = false
    if (!Impl().bar) return "Fail get"
    return "OK"
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun test() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class doTest<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // KJS_WITH_FULL_RUNTIME
    SubTest().testFun(true, false) // -> Works
}
yœ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) {
    val x: A<String> = A()
    val y: A<A<String>> = A()
    val b = B()

    return b.foo(x) + b.foo(y)
}
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(42, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().a(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    baz().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class box<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().Int(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yl// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(strings: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    B().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.listOf(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yk// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.deepInterfaceFun() }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yl// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<MIN_SURROGATE>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Any = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yj// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(x: Outer, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y^// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : A(`in`) {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun("OK") // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun Test() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yi// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(test: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Float?) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yj// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun("Fail 4") // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = true) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    B().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().MAX_VALUE(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { g.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yu// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(bar: Bar.() -> Unit, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun() // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ys// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // KJS_WITH_FULL_RUNTIME
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: A, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : A<Int> by a {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<B>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yj// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<DoubleArray>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(i, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yk// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: KProperty<*> = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(t: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, j: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y.// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    fun box(): String {
    val list1 = ArrayList<UInt>()
    for (i in 5u downTo 5u) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(5u)) {
        return "Wrong elements for 5u downTo 5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    for (i in 5u.toUByte() downTo 5u.toUByte()) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(5u)) {
        return "Wrong elements for 5u.toUByte() downTo 5u.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    for (i in 5u.toUShort() downTo 5u.toUShort()) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(5u)) {
        return "Wrong elements for 5u.toUShort() downTo 5u.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    for (i in 5uL downTo 5uL) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(5uL)) {
        return "Wrong elements for 5uL downTo 5uL: $list4"
    }

    return "OK"
}
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().test(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    z().testFun(true, false) // -> Works
}
y4// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    fun test(): String
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: box, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(1) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yi// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(Bar.ONE) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Short = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<T>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yj// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, value) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    list1().testFun(true, false) // -> Works
}
yl// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: String?, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.B("K") }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Int, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ym// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, Delegate) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { String.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y
h// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun box(): String {
    // D = 1101 C = 1100
    // 6 = 0110 5 = 0101
    var iarg1: Int = 0xDC56DC56.toInt()
    var iarg2: Int = 0x65DC65DC
    var i1 = iarg1 and iarg2
    var i2 = iarg1 or  iarg2
    var i3 = iarg1 xor iarg2
    var i4 = iarg1.inv()
    var i5 = iarg1 shl 16
    var i6 = iarg1 shr 16
    var i7 = iarg1 ushr 16

    if (i1 != 0x44544454.toInt()) return "fail: Int.and"
    if (i2 != 0xFDDEFDDE.toInt()) return "fail: Int.or"
    if (i3 != 0xB98AB98A.toInt()) return "fail: Int.xor"
    if (i4 != 0x23A923A9.toInt()) return "fail: Int.inv"
    if (i5 != 0xDC560000.toInt()) return "fail: Int.shl"
    if (i6 != 0xFFFFDC56.toInt()) return "fail: Int.shr"
    if (i7 != 0x0000DC56.toInt()) return "fail: Int.ushr"


    // TODO: Use long hex constants after KT-4749 is fixed
    var larg1: Long = (0xDC56DC56L shl 32) + 0xDC56DC56 // !!!!
    var larg2: Long = 0x65DC65DC65DC65DC
    var l1 = larg1 and larg2
    var l2 = larg1 or  larg2
    var l3 = larg1 xor larg2
    var l4 = larg1.inv()
    var l5 = larg1 shl 32
    var l6 = larg1 shr 32
    var l7 = larg1 ushr 32
    
    if (l1 != 0x4454445444544454) return "fail: Long.and"
    if (l2 != (0xFDDEFDDEL shl 32) + 0xFDDEFDDE) return "fail: Long.or"
    if (l3 != (0xB98AB98AL shl 32) + 0xB98AB98A) return "fail: Long.xor"
    if (l4 != 0x23A923A923A923A9) return "fail: Long.inv"
    if (l5 != (0xDC56DC56L shl 32)/*!!!*/) return "fail: Long.shl"
    if (l6 != (0xFFFFFFFFL shl 32) + 0xDC56DC56) return "fail: Long.shr"
    if (l7 != (0x00000000L shl 32) + 0xDC56DC56.toLong()) return "fail: Long.ushr"

    var sarg1: Short = 0xDC56.toShort()
    var sarg2: Short = 0x65DC.toShort()
    var s1 = sarg1 and sarg2
    var s2 = sarg1 or  sarg2
    var s3 = sarg1 xor sarg2
    var s4 = sarg1.inv()
    
    if (s1 != 0x4454.toShort()) return "fail: Short.and"
    if (s2 != 0xFDDE.toShort()) return "fail: Short.or"
    if (s3 != 0xB98A.toShort()) return "fail: Short.xor"
    if (s4 != 0x23A9.toShort()) return "fail: Short.inv"

    var barg1: Byte = 0xDC.toByte()
    var barg2: Byte = 0x65.toByte()
    var b1 = barg1 and barg2
    var b2 = barg1 or  barg2
    var b3 = barg1 xor barg2
    var b4 = barg1.inv()
    
    if (b1 != 0x44.toByte()) return "fail: Byte.and"
    if (b2 != 0xFD.toByte()) return "fail: Byte.or"
    if (b3 != 0xB9.toByte()) return "fail: Byte.xor"
    if (b4 != 0x23.toByte()) return "fail: Byte.inv"

    return "OK"
}
y?// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
        prop += "${x}#int"
        sideEffects += "#fourth"
    }
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class IFoo<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    bar().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y\// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    it.toString() // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yi// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun("first") // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yN// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun() { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y^// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.foo() }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    UInt().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Int<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yn// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(if (3 > 2) a else b) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(A: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y^// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : IFoo<Z> {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: x, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, T: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yo// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(thisRef: Any?, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { g.x.isString() }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yl// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
  inner class B {
      var prop: Int by Delegate(1)
  }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { Outer.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yk// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: FunctionNode) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: A, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

inner class E {
        val bar: String
            get() = super<A>@B.bar + super@B.bar + super@B.baz
    }

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class doit : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun String(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yp// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    inline fun <T> T.runInlineExt(fn: T.() -> String) = fn()
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(x: Any, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yi// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(Base, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yo// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    fun box() : String {
    return ClassB().value.aValue
}
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun hasNext(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yk// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(equals, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: T) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, 0) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun C() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Base) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yi// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(hashMap) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().test2(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Unit<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class box : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(10, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, a1) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y5// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    fun f1(a : Any?) {}
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yZ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : One {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.sb(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yl// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: Boolean, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().Delegate() // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, Z: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y\// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().foo("", 0) // -> Works
}
yn// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, MAX_VALUE: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.O(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    ZImpl2().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(to) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yî// Original bug: KT-30495
// Duplicated bug: KT-38681

class B {
    class D {
        init {
            A().bar {
                this.foo()
            }
        }
    }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    list4().testFun(true, false) // -> Works
}
y∂// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    final override fun toString() = "OK"
    final override fun hashCode() = 42
    final override fun equals(other: Any?) = false
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.M(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.x(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yl// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    Exception3("K").testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yC// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) {
    val a1: Byte? = 1.unaryMinus()
    val a2: Short? = 1.unaryMinus()
    val a3: Int? = 1.unaryMinus()
    val a4: Long? = 1.unaryMinus()
    val a5: Double? = 1.0.unaryMinus()
    val a6: Float? = 1f.unaryMinus()

    if (a1!! != (-1).toByte()) return "fail 1"
    if (a2!! != (-1).toShort()) return "fail 2"
    if (a3!! != -1) return "fail 3"
    if (a4!! != -1L) return "fail 4"
    if (a5!! != -1.0) return "fail 5"
    if (a6!! != -1f) return "fail 6"

    return "OK"
}
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yk// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // FILE: util.kt
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    a().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<ULong>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y”// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    fun box() : String {
   val v1 = A(-10.toLong()).hashCode()
   val v2 = (-10.toLong() as Long?)!!.hashCode()
   return if( v1 == v2 ) "OK" else "$v1 $v2"
}
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yï// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

// KJS_WITH_FULL_RUNTIME
fun box () : String {
    val s = ArrayList<String>()
    s.add("foo")
    s[0] += "bar"
    return if(s[0] == "foobar") "OK" else "fail"
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(d, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : ULong<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    val i1: Int = Int.MAX_VALUE
    val i2 = i1 + 1
    if (i2 > i1) return "fail: Int.MAX_VALUE + 1 should overflow to negative."

    val i3: Int = Int.MIN_VALUE
    val i4 = i3 - 1
    if (i4 < i3) return "fail: Int.MIN_VALUE - 1 should overflow to positive."

    return "OK"
}
yk// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, String) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y6// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    public override val size: Int get() = storage.size

    override operator fun iterator() = TODO()
    override fun contains(element: UInt): Boolean = TODO()
    override fun containsAll(elements: Collection<UInt>): Boolean = TODO()
    override fun isEmpty(): Boolean = TODO()
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yZ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class P {
    var x : Int = 0
        private set

    fun foo() {
        ({ x = 4 })()
    }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: eee) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().toString(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Int) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun T(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, 2) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    Outer("O").testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, A) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yk// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(Str("OK")) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(x: String, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.Foo(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun("$rem") }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    KeySpan("1").matches("3") // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.Nested2(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y’// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    fun <T> ArrayList<T>.findAll(predicate:  (T) -> Boolean): ArrayList<T> {
  val result = ArrayList<T>()
  for(t in this) {
    if (predicate(t)) result.add(t)
  }
  return result
}
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yô// Auto-generated by GeneratePrimitiveVsObjectEqualityTestData. Do not edit!
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yp// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    companion object {
        var prop: Int = 1
            get() = field++
    }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    Z(800).testFun(true, false) // -> Works
}
yi// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    isNullable().testFun(true, false) // -> Works
}
y[// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    fun box(): String {
    return Outer.Nested().foo("OK")
}
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yl// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, Boolean: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().s(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class ai<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y]// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, a: Double) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yY// box unbox
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y∂// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Base(
            object : Callback {
                override fun invoke() = ok
            }) {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yt// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(val string: String, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    get().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(i: Int, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Double = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: s2 = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y6// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    fun result(): String
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y≥// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) {
        return "Wrong elements for (8.toByte() downTo 3.toByte() step 2).reversed(): $list2"
    }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yT// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) x + y
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yJ// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

data class A(val x: Int) {
  override fun equals(other: Any?): Boolean = false
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(A, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(value: Int, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(r) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// !LANGUAGE: +InlineClasses

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yi// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(List: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yk// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(String, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yh// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(i: Int, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yg// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(id: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y]// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testR1xE3() // -> Works
}
y9// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    createAnonObject().foo()
    createAnonObject().qux()
}
ym// Original bug: KT-30495
// Duplicated bug: KT-38681

public open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yá// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) {
    number(true)
    return "OK"
}
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
class SubTest : Test<Boolean>() {

}
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
open class Test<T> {

// Duplicated bug: KT-38681
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
}
    open fun testFun(a: T, b: Boolean = false) { }

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yf// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }


fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
}ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>(){
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: , b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a:Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yM
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yY// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : () {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T,b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y]// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun () {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a:T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true,false) // -> Works
}
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: , b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y Ò// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}


yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest.testFun(true, false) // -> Works
}
y]// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    .testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

 class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation ErrorSubTest().testFun(true, false) // -> Works
}
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class  : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y8// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, ) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>) {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false){ }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main( {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFuna, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

openclass Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { .testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean= false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun (a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yR// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest(). // -> Works
}
y ˙// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}



fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b)}
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open classTest<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest()testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open  Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean  false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

 main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) 
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    ().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b:  = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: ) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFuntrue, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> 
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yW// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest :  {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : TestBoolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y^// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
     fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, ) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFuna: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    ().testFun(true, false) // -> Works
}
y"// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest).testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest  Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y]// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    .testFun(true, false) // -> Works
}
yT// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, ) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a,b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y ¸// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() 
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yH// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
     // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
     fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) 
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true)// -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

 SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) {}
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean){ super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yK// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) 
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean)  super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() 
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest()testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false)  }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yL// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean> {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, : Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    openfun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>( {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun (a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

funmain() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T>{
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y_// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yS// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) {  }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }


class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest: Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest :Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y\// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, ) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main(){
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() 

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

classSubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y\// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y`// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    overridefun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean =false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { 
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yY// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super. }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y0// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> 

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override funtestFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open  testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class TestT> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yd// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = ) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) {super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFuntrue) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b:Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean,b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { supertestFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open funtestFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yc// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override  testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }


fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yO// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) 
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest).testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}yO// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
     // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : <Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yb// Original bug: KT-30495
// Duplicated bug: KT-38681

open class <T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest(.testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yY// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest(). // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yK// Original bug: KT-30495


open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b:Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works

ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main) {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
yN// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ya// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest(.testFun(true, false) // -> Works
}
y[// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) 
}
ye// Original bug: KT-30495
// Duplicated bug: KT-38681

open class Test<T> {
    open fun testFun(a: T, b: Boolean = false) { }
}

class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
y// Original bug: KT-30495
// Duplicated bug: KT-38681



class SubTest : Test<Boolean>() {
    override fun testFun(a: Boolean, b: Boolean) { super.testFun(a, b) }
}

fun main() {
    SubTest().testFun(true) // -> Code Generation Error
    SubTest().testFun(true, false) // -> Works
}
ˇˇ