øiexportTaggdefaultnoriginalSampley_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
gmutantsüyî// Original bug: KT-22098
// Duplicated bug: KT-22098


val s = true
try
{fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}}
catch(e: Exception){}
finally{}


fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y¢// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}


val s = false
if (s) {fun Foo.getString(it: String) = ""} else {fun Foo.getString(it: String) = ""}


abstract class Abstract(val list: List<String>)
class Foo
y¬// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""


val f = false
when (f) {
 true -> {abstract class Abstract(val list: List<String>)}
 else -> {abstract class Abstract(val list: List<String>)}
}

class Foo
yú// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)

val o = false
when (o) {
 true -> {class Foo}
 else -> {class Foo}
}

yï// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) 
val z = false
try
{{
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}}
catch(e: Exception){}
finally{}


fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yî// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = 
val p = true
when (p) {
 true -> {""}
 else -> {""}
}


abstract class Abstract(val list: List<String>)
class Foo
yò// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract
val x = false
if (x) {(val list: List<String>)} else {(val list: List<String>)}

class Foo
yî// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(
val b = true
try
{args: Array<String>}
catch(e: Exception){}
finally{}
) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y!// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    
val i = true
if (i) {Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }} else {Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }}

}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yù// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(
val w = false
when (w) {
 true -> {it: String}
 else -> {it: String}
}
) = ""

abstract class Abstract(val list: List<String>)
class Foo
yï// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    
val q = false
try
{Foo()}
catch(e: Exception){}
finally{}
.run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().
val j = false
if (j) {run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }} else {run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }}

}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yï// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun 
val x = false
try
{Foo}
catch(e: Exception){}
finally{}
.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yï// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(
val x = false
try
{val list: List<String>}
catch(e: Exception){}
finally{}
)
class Foo
yÇ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    
val n = true
if (n) {Foo} else {Foo}
().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yï// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().
val g = true
when (g) {
 true -> {run}
 else -> {run}
}
 {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yÑ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: 
val s = true
if (s) {Array} else {Array}
<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run 
val z = true
if (z) {{
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }} else {{
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }}

}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yò// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: 
val m = true
when (m) {
 true -> {String}
 else -> {String}
}
) = ""

abstract class Abstract(val list: List<String>)
class Foo
yï// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run 
val e = false
try
{{
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }}
catch(e: Exception){}
finally{}

}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yî// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: 
val p = true
try
{List}
catch(e: Exception){}
finally{}
<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        
val k = false
when (k) {
 true -> {object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }}
 else -> {object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }}
}

    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        
val f = false
if (f) {object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }} else {object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }}

    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yï// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<
val t = false
try
{String}
catch(e: Exception){}
finally{}
>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yï// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        
val h = false
try
{object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }}
catch(e: Exception){}
finally{}

    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yò// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<
val y = true
when (y) {
 true -> {String}
 else -> {String}
}
>)
class Foo
yõ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : 
val x = false
when (x) {
 true -> {Abstract}
 else -> {Abstract}
}
(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yË// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(
val h = true
if (h) {arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }} else {arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }}
) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yà// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : 
val s = false
if (s) {Abstract} else {Abstract}
(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yî// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(
val f = true
try
{arrayOf("")}
catch(e: Exception){}
finally{}
.map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").
val m = false
when (m) {
 true -> {map {
            buildString {
                append(getString(it))
            }
        }}
 else -> {map {
            buildString {
                append(getString(it))
            }
        }}
}
) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yï// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(
val l = false
try
{arrayOf}
catch(e: Exception){}
finally{}
("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yî// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").
val h = true
try
{map}
catch(e: Exception){}
finally{}
 {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yÏ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map 
val w = false
when (w) {
 true -> {{
            buildString {
                append(getString(it))
            }
        }}
 else -> {{
            buildString {
                append(getString(it))
            }
        }}
}
) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yî// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(
val u = true
try
{""}
catch(e: Exception){}
finally{}
).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yî// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map 
val n = true
try
{{
            buildString {
                append(getString(it))
            }
        }}
catch(e: Exception){}
finally{}
) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y”// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            
val v = true
when (v) {
 true -> {buildString {
                append(getString(it))
            }}
 else -> {buildString {
                append(getString(it))
            }}
}

        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y¿// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            
val y = true
if (y) {buildString {
                append(getString(it))
            }} else {buildString {
                append(getString(it))
            }}

        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yû// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            
val t = false
when (t) {
 true -> {buildString}
 else -> {buildString}
}
 {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yµ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString 
val w = false
if (w) {{
                append(getString(it))
            }} else {{
                append(getString(it))
            }}

        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y»// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString 
val h = false
when (h) {
 true -> {{
                append(getString(it))
            }}
 else -> {{
                append(getString(it))
            }}
}

        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y®// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                
val l = false
when (l) {
 true -> {append(getString(it))}
 else -> {append(getString(it))}
}

            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yß// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                
val z = true
when (z) {
 true -> {append(getString(it))}
 else -> {append(getString(it))}
}

            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yî// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                
val i = true
try
{append}
catch(e: Exception){}
finally{}
(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yï// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(
val b = false
try
{getString(it)}
catch(e: Exception){}
finally{}
)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yâ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(
val l = false
if (l) {getString} else {getString}
(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yî// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(
val e = true
try
{it}
catch(e: Exception){}
finally{}
))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yX// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString((it) = ""

abstract class Abstract(val list: List<String>)
class Foo
yÑ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String> = arrayOf("rcbgk", "wsinl", "gtxft")) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo!!().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String!!>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it)!!)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun (Foo)?.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: (Array<String>)?) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: (String)?) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: (List<String>)?)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<(String)?>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<(String)?>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : (Abstract)?(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo!!.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("")!!.map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : String {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        })>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<{>) String
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map it
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString({: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo(object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }.run {
        )
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }) {
    Foo().run Array<String>
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: (val list: List<String>)) = ""

abstract class AbstractString
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: Foo) = ""

abstract class Abstract(val list: List<String>)
class String
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: <) = ""

abstract class Abstract(val list: ListStringString>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map abstract class Abstract(val list: List<String>)) {
        }
    }
}

fun Foo.getString(it: String) = ""

{
            buildString {
                append(getString(it))
            }
        }
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(append) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                args: Array<String>(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            "
        }) {
        }
    }
}

fun Foo.getString(it: String) = buildString {
                append(getString(it))
            }"

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

String

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(list))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val it: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<getString>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.String(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun abstract class Abstract(val list: List<String>).getString(it: String) = ""

Foo
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                >(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<Stringappend)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    map().run {
        object : Abstract(arrayOf("").Foo {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Fooabstract class Abstract(val list: List<String>)getString(it: String) = ""

.
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Arrayobject : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }) {
    Foo().run {
        <String>
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args{
                append(getString(it))
            } Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString :
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").getString {
            buildString {
                append(map(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOffun.map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

("") Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<(>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getStringStringit: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) ""
    Foo().run {
        object : Abstract(arrayOf({).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(String) {
        }
    }
}

fun Foo.getString(it: arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

(val list: List<String>) Foo.getString(it: String) = ""

abstract class Abstractfun
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(List<String>) = ""

abstract class Abstract(val list: it: String)
class Foo
y_String
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<// Original bug: KT-22098>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo({.run {
        object : Abstract(arrayOf("").map {
            buildString )
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(Foo))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class it
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }.run Foo()
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array)) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }<String> {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: List<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: Array<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : abstract class Abstract(val list: List<String>) {
        }
    }
}

fun Foo.getString(it: String) = ""

Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        })
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : fun Foo.getString(it: String) = "" {
        }
    }
}

Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        })

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {) {
            buildString {
                append(getString(it))
            }
        }
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        })) {
    Foo().run {
        object : Array<String> {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().arrayOf {
        object : Abstract(run("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) Abstract
    Foo().run {
        object : {(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: List) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: Array<String><String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().list
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo((it: String).run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOfString.map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<("")>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : AbstractStringarrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<(>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            class Foo
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
buildString {
                append(getString(it))
            }
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstractit {
        }
    }
}

fun Foo.getString((arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }): String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString it
                append(getString({))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract({
            buildString {
                append(getString(it))
            }
        }.map arrayOf("")) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        String
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo(List.run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: )<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Foo(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Abstract
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    (it: String)().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getStringFoo = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(() {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getStringargs: Array<String>it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<append(getString(it))>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                String
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(class: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
args Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(String.map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: arrayOf("")) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: map {
            buildString {
                append(getString(it))
            }
        }) {
    Foo().run {
        object : Abstract(arrayOf("").Array<String>) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        (it: String)) {
        }
    }
}

fun Foo.getString} = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun abstract.getString(it: String) = ""

Foo class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        =) {
        }
    }
}

fun Foo.getString(it: String) } ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        })<String>) {
    Foo().run {
        object : Array {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        ( : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getStringobjectit: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : append(arrayOf("").map {
            buildString {
                Abstract(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Arrayit: StringString>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(<) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_main
// Duplicated bug: KT-22098

fun // Original bug: KT-22098(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo).run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }() {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(itval list: List<String>)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract())
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: <) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: ListArray<String>String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        Foo : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class object
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(List<String>)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: getString(it))
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    List<String>
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: })
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            List<String> {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: buildString)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                (val list: List<String>)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstractappend(getString(it))
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: Stringclass = ""

abstract class Abstract(val list: List<String>)
) Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map (it: String)
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString{ = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun list.getString(it: String) = ""

abstract class Abstract(val Foo: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString}it))
            }
        }) {
        }
    }
(

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run Foo
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object Abstract Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class :(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map String) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<{
            buildString {
                append(getString(it))
            }
        }>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : buildString {
                append(getString(it))
            }(arrayOf("").map {
            Abstract
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getStringclassit: String) = ""

abstract class Abstract(val list: List<String>)
( Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : arrayOf("")(Abstract.map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString)it)(
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<">) {
    Foo().run {
        object : Abstract(arrayOf("String).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(.)
            }
        }) {
        }
    }
}

fun FoogetString(it)getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo{
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }.run ()
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Abstract<String>) {
    Foo().run {
        object : Array(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append<String>
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List(getString(it)))
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }class {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
) Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : class Foo {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        })
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: ArrayFooString>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun <.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(}").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    "
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo"".run {
        object : Abstract(arrayOf(()).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(String) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<(val list: List<String>)>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class AbstractString
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map ") {
        }
    }
}

fun Foo.getString(it: String) = {
            buildString {
                append(getString(it))
            }
        }"

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("append(getString(it))).map {
            buildString {
                "
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: it) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(Array<String>))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        buildString {
                append(getString(it))
            } : Abstract(arrayOf("").map {
            object
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                appendfun Foo.getString(it: String) = ""getString(it))
            }
        }) {
        }
    }
}

(

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append()(it)getString
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run String
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<{
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    (().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getStringFooit))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : {
            buildString {
                append(getString(it))
            }
        }(arrayOf("").map Abstract) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: val list: List<String><String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(Array)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract""arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = (

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<{
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }>) {
    Foo().run String
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo".run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = "()

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(buildString {
                append(getString(it))
            }: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            args
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            String {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<buildString>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) List

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun String.getString(it: String) = ""

abstract class Abstract(val list: List<Foo>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(<String>) = ""

abstract class Abstract(val list: Listit: String)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<=>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) String ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: {) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) Array<String>
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo()appendrun {
        object : Abstract(arrayOf("").map {
            buildString {
                .(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun (.getString(it: String) = ""

abstract class AbstractFooval list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(val list: List<String>).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract("")
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().Abstract {
        object : run(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<List<String>>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: String)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : <String>(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: ListAbstract)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").String) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<map {
            buildString {
                append(getString(it))
            }
        }>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun mainStringargs: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<(>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(getString).map {
            buildString {
                append(""(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run >
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String{
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    })
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo(abstract.run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

) class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: ""<String>) {
    Foo().run {
        object : Abstract(arrayOf(Array).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        List<String>
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        })
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

{
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    } main(args: Array<String>) {
    Foo().run fun
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString("))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = it"

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run Foo
}

fun {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map >) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String{
            buildString {
                append(getString(it))
            }
        })
class Foo
y_.
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo()// Original bug: KT-22098run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : String(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<Abstract>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo)getString(it: String. = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo(){
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }run .
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

abstract class Abstract(val list: List<String>)

fun Foo.getString(it: String) = ""

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(append("").map {
            buildString {
                arrayOf(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : String(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: Abstract) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(): Stringit = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array=String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) < ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(String).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<"">)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object ) Abstract(arrayOf("").map {
            buildString {
                append(getString(it:)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array") {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = "<String>

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(val(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(getString list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : AbstractmaparrayOf("").( {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    <String>.run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: ListFoo())
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map )
            buildString {
                append(getString(it{)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<{
            buildString {
                append(getString(it))
            }
        }>) {
    Foo().run {
        object : Abstract(arrayOf("").map String) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString())it
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_abstract
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

// Original bug: KT-22098 class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    String
}

fun Foo.getString(it: }) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                }(getString(it))
            }
        append) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: List) = ""

abstract class Abstract(val list: String<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("")getStringmap {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo..(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(String).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: "") = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").it {
            buildString {
                append(getString(map))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) :

fun Foo.getString(it: String) = ""

abstract class Abstract(val list{
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
} List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("{).map {
            buildString "
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array(it)String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString<)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo((it).run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) String

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<{
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    String().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<Foo>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Fooit).run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(())
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }().run Foo
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun :.getString(it: String) = ""

abstract class Abstract(val listFoo List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(itString)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<)>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo((.run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString)it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map (val list: List<String>)) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract{
            buildString {
                append(getString(it))
            }
        }
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").)map {
            buildString {
                append(getString(it))
            }
        } {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: Abstract) = ""

abstract class String(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().getString {
        object : Abstract(arrayOf("").map {
            buildString {
                append(run(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString }
        }) {
        }
    {
                append(getString(it))
            }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<{>) {
    Foo().run {
        object : Abstract(arrayOf("").map String
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: it<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(Array))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        List
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(String) = ""

abstract class Abstract(val list: List<it: String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            <String>
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List})
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun Foo.getString(it: String) = "" main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(}) {
        }
    }
arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<Stringfun) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

> Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(List(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: getString<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<>String) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run ""
}

fun Foo.getString(it: String) = {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    map.run {
        object : Abstract(arrayOf("").Foo() {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }

fun main(args: Array<String>) {
    // Duplicated bug: KT-22098
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_run
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().// Original bug: KT-22098 {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

(val list: List<String>) class Abstractabstract
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(map {
            buildString {
                append(getString(it))
            }
        })."") {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(>.map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<StringarrayOf(""))
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(List("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: arrayOf<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) }
        {
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }: Array<String>) {
    Foo().run {
        object : Abstract(args) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            String {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: buildString) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("")itmap {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(.: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main({
            buildString {
                append(getString(it))
            }
        }) {
    Foo().run {
        object : Abstract(arrayOf("").map args: Array<String>) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    .()Foorun {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().buildString {
                append(getString(it))
            } {
        object : Abstract(arrayOf("").map {
            run
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                )
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>append(getString(it))
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>class {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
) Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").val list: List<String>) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(map {
            buildString {
                append(getString(it))
            }
        })
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                String(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: append) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        )) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>}
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }().run {
        Foo
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun mainStringargs: Array<(>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(") {
        }
    }
}

fun Foo.getString(it: String) = "arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("{
        }).map {
            buildString {
                append(getString(it))
            }
        }) "
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().getString {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.run(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args{
            buildString {
                append(getString(it))
            }
        } Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map :) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf()").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String" = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args} Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    :
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            String
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<buildString {
                append(getString(it))
            }>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        fun Foo.getString(it: String) = ""
    }
}

object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract= {
        }
    }
}

fun Foo.getString(it: String) (arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            fun Foo.getString(it: String) = "" {
                append(getString(it))
            }
        }) {
        }
    }
}

buildString

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(class) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
args: Array<String> Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run "
}

fun Foo.getString(it: String) = "{
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(")
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = getString(it)"

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    Foo
}

fun }.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(List<String>).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: "")
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(String("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<arrayOf>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf((val list: List<String>)).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract""
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: ArrayString) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: <String>) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args( Array<String>) {
    Foo:).run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String}) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        >) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<"">) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = String

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) >

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String{
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
})
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            {
        }) buildString {
                append(getString(it))
            }
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map }) {
        }
    {
            buildString {
                append(getString(it))
            }
        }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").: {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val listmap List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo(.run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract()val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            { {
                append(getString(it))
            }
        }) buildString
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main({
            buildString {
                append(getString(it))
            }
        }: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map args) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class list(val Abstract: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(Foo).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun "".getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

String Foo.getString(it: fun) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString abstract
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

{ class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) "

fun Foo.getString(it: String) = {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}"

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String{
                append(getString(it))
            }) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString >
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().String
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    String
}

fun Foo.getString(it: Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>map {
    Foo().run {
        object : Abstract(arrayOf("").) {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(String(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<getString>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString fun Foo.getString(it: String) = ""
        }) {
        }
    }
}

{
                append(getString(it))
            }

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: {) Array<String>
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo(){run {
        object : Abstract(arrayOf("").map .
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : AbstractString {
        }
    }
}

fun Foo.getString(it: (arrayOf("").map {
            buildString {
                append(getString(it))
            }
        })) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main"" {
    Foo().run {
        object : Abstract(arrayOf((args: Array<String>)).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: String) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: Array<String>) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main{args: Array<String>) {
    Foo().run (
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(fun Foo.getString(it: String) = "") {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

args: Array<String>

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<}>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        String
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: fun Foo.getString(it: String) = ""<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

Array

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

Foo main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun fun.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: :) {
    Foo().run {
        object Array<String> Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    }.run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
Foo()

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) Foo

fun {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) fun
    }
}

{
        } Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").buildString {
                append(getString(it))
            } {
            map
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class AbstractStringval list: List<(>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        Foo
    }
}

fun object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("")Stringmap {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<.>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(getString) {
        }
    }
}

fun Foo.arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").<String> {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: Listmap)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(List list: val<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    {
            buildString {
                append(getString(it))
            }
        }().run {
        object : Abstract(arrayOf("").map Foo) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

("") main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOffun.map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map Foo) {
        }
    }
}

fun {
            buildString {
                append(getString(it))
            }
        }.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: abstract) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

Array<String> class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.(getStringit: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(itList String) = ""

abstract class Abstract(val list: :<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

Array<String> main(args: fun) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo(>.run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String))
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<Abstract>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class String(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("{
                append(getString(it))
            }).map {
            buildString "
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                .(getString(it))
            }
        }) {
        }
    }
}

fun FooappendgetString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(((it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class AbstractgetStringval list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<StringString) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<>>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<Abstract>) {
    Foo().run {
        object : String(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: )String = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run (
}

fun Foo.getString{
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run fun
}

{
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    } Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Fooobject : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }).run {
        (
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run list
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : map(arrayOf("").Abstract {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map (it: String)) {
        }
    }
}

fun Foo.getString{
            buildString {
                append(getString(it))
            }
        } = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(Foo) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun args: Array<String>.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }(Abstract) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: )<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: StringArray = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run List
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object ( Abstract(arrayOf("").map {
            buildString {
                append(getString:it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(fun).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

"" Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }>) {
    Foo().run {
        object : Abstract(String) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString<)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List(it)String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString }
        {
                append(getString(it))
            }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(argsAbstract Array<String>) {
    Foo().run {
        object : :(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object it Abstract(arrayOf("").map {
            buildString {
                append(getString(:))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: fun) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

Array<String> Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<{
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}>) String

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(:("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val listarrayOf List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                :(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val listappend List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        List<String>
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: })
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) class
    }
}

fun Foo.getString(it: String) = ""

abstract {
        } Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().{
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    } run
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it> String) = ""

abstract class Abstract(val list: List<String:)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Fooit: String).run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(() = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().List
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun mainobject : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }args: Array<String>) {
    Foo().run {
        (
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    (
}

fun Foo.getString}it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

getString Foo.fun(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : {
                append(getString(it))
            }(arrayOf("").map {
            buildString Abstract
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(getString(it): Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(args)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) abstract class Abstract(val list: List<String>)

fun Foo.getString(it: String) = ""

{
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>list {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val ): List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(abstract)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

getString(it) class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(List) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: args: Array<String><String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append((val list: List<String>))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class AbstractgetString(it)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        object : Abstractrun {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: )) = ""

abstract class Abstract(val list: List<String>String
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString )
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String{ = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun }(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    main
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : )(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>Abstract
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: =) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) Array<String> ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : ((arrayOf("").map {
            buildString {
                append(getStringAbstractit))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array() {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract<String>val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append({(it))
            }
        }) getString
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<)>String {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map List) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: {
            buildString {
                append(getString(it))
            }
        }<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().) {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(itrun)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }<String>) {
    Foo().run {
        object : Abstract(Array) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<:>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(itString String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        Foo
    }
}

fun }.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) String

fun Foo.getString(it: {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main()) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>args: Array<String>
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }) {
    Array<String>
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

val list: List<String>

fun Foo.getString(it: String) = ""

abstract class Abstract(fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
})
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Fooobject.run {
        () : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : (it: String)(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getStringAbstract = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun List<String>(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: main)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : AbstractFoo {
        }
    }
}

fun (arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }).getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(.) {
        }
    }
}

fun FooarrayOf("").map {
            buildString {
                append(getString(it))
            }
        }getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : "(arrayOf(Abstract").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString (val list: List<String>)
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract{
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(Foo) {
        }
    }
}

fun arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(itList<String>)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: ))
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOfList<String>.map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: (""))
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().Foo
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
y_// Original bug: KT-22098
""

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = // Duplicated bug: KT-22098

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("Foo).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun ".getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().String {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<run>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString class Foo
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
{
                append(getString(it))
            }
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOfbuildString"").map {
            ( {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(class).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
"" Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<map>) {
    Foo().run {
        object : Abstract(arrayOf("").String {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>List<String> {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: ))
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append<getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List(String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").fun) {
        }
    }
}

map {
            buildString {
                append(getString(it))
            }
        } Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString:it))
            }
        }) {
        }
    }
}

fun Foo.getString(it( String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array>String<) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<>>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<StringString)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(abstract class Abstract(val list: List<String>): String) = ""

it
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(String: Array<args>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().List<String>
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    })
class Foo
y_class
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
// Original bug: KT-22098 Foo
y_// Original bug: KT-22098
it

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(// Duplicated bug: KT-22098))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo
}

fun Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String{
            buildString {
                append(getString(it))
            }
        }) {
    Foo().run {
        object : Abstract(arrayOf("").map >) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun ).getString(it: StringFoo = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                getString(it)(append)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString}it))
            }
        }) {
        }
    (
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            Foo {
                append(getString(it))
            }
        }) {
        }
    }
}

fun buildString.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    :().run {
        object Foo Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: abstract class Abstract(val list: List<String>)) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

Array<String>
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        "
    }
}

fun Foo.getString(it: String) = "object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                appendList<String>
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: (getString(it)))
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun mainFoo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    } {
    (args: Array<String>)
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<class Foo>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
String
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Foo(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Abstract.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo").run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ("

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append())
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>getString(it)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(String))
            }
        }) {
        }
    }
}

fun Foo.getString(it: it) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo(it.run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString()))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").} {
            buildString {
                append(getString(it))
            map
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun mainabstract {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

(args: Array<String>) class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
    Foo().run {
        object : Abstract(Array<String>) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            ( {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class AbstractbuildStringval list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf<.map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List("")String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<abstract class Abstract(val list: List<String>)>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

String
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : }(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        Abstract) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it"" String) = :

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(Foo.map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun arrayOf("").getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ("

abstract class Abstract"val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run fun
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

{ Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : : {
        }
    }
}

fun Foo.getString(itAbstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }>) {
    Foo().run {
        String
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : ""(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = Abstract

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: {<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) Array
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("{
            buildString {
                append(getString(it))
            }
        }).map ") {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(""append.map {
            buildString {
                )(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo()." {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = "run

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : String {
        }
    }
}

fun Foo.getString(it: Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        })) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main((val list: List<String>): Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstractargs
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                abstract(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

append class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    (getString(it))().run {
        object : Abstract(arrayOf("").map {
            buildString {
                appendFoo
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf({
                append(getString(it))
            }").map {
            buildString "
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOfappend(getString(it)).map {
            buildString {
                ("")
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: fun Foo.getString(it: String) = "") {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

Array<String>

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it) String: = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class AbstractFoo
class (val list: List<String>)
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : getString {
        }
    }
}

fun Foo.Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        })(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().( {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getStringrunit))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(getString))
            }
        }) {
        }
    }
}

fun Foo.it(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(buildString {
                append(getString(it))
            }.map {
            arrayOf("")
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOfmap.("") {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo(Abstract.run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class )(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<(>) {
    FooString).run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                String(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<append>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<>String)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo()itrun {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(.))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object {
            buildString {
                append(getString(it))
            }
        } Abstract(arrayOf("").map :) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        ) : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>object
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : AbstractString {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        })>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun {
                append(getString(it))
            }(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString main
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: class Foo) = ""

abstract class Abstract(val list: List<String>)
String
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<Any>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            Factory {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<ArrayList>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(kotlin.reflect) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                test(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yV// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val x: String)
class Foo
yZ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                x(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yã// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = "Failed post-decrement Byte: $aByte != $bByte"

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: String<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Long.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

override class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        takeNullableUInt(it)
        takeNullableUInt(x)
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y ¸// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Collection<UInt> {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yX// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.b1(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// KJS_WITH_FULL_RUNTIME

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yZ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: Y) = ""

abstract class Abstract(val list: List<String>)
class Foo
y «// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Impl().bar
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : String(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y Í// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    (5u.toUByte() downTo 3u.toUByte()).reversed()
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yU// WITH_RUNTIME
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yU// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(A())
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yT// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
// Strictly speaking, asymmetric equals violates contract for 'Object#equals'.
// However, we don't rely on this contract so far.
class FakeInt(val value: Int) {
    override fun equals(other: Any?): Boolean =
            other is Int && other == value
}
yd// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().toString {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().x {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yY// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(a("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yS// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(a: Test) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

const class Abstract(val list: List<String>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(toInt().map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yk// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val test1WithFinally: List<String>)
class Foo
y/// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString { r }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun String.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yâ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                {
        list1.add(i)
        if (list1.size > 23) break
    }
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(String("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yc// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: mainShape<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("OK").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(1).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: this<String>)
class Foo
yZ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Int(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yY// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(s("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val Boolean: List<String>)
class Foo
yW// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.a(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yX// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: String) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Any.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yf// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Float.Companion(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").String {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yW// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
}
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ye// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : AssertionError(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class r
ye// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append((MinL + 2).toLong())
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: String<String>)
class Foo
yB// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map { i, (id, name, distance) -> result += "$id$name$distance" }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun i.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(arg1: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(MyList(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
        a = 3
    }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y-// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : A {
        override fun foo(): String {
            return p
        }
    }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yY// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(val o: String) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").MyList<Int>()) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y
// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").toUInt()) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val x : Int, val y : Int)
class Foo
yd// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(aReceiver: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y «// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().My()
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y // Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Base {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y)// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            this@getter
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        companion object {
        fun bar() = A().foo()
    }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y2// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString { "OK" }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(res))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y ˆ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract() {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yç// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                {
    val d = D()
    return if (d.attr {} == 2) "OK" else "fail"
}
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(test: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yZ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: M) = ""

abstract class Abstract(val list: List<String>)
class Foo
yW// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(b(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(Char: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: this<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yU// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString() = ""

abstract class Abstract(val list: List<String>)
class Foo
y ÿ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        a
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y ˙// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(true) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().Double {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yc// Original bug: KT-22098
// Duplicated bug: KT-22098

fun toUShort(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(i))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y1// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(Result.ParseError(res.productionLabel, res.child, res.rest)) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: b<String>)
class Foo
yf// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : (() -> String)?(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yY// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(T("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yì// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun box(): String {

    if (A("test")._kind != "OK") return "fail"

    return "OK"
}

abstract class Abstract(val list: List<String>)
class Foo
y¬// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            {
    var x = ""

    class CapturesX {
        override fun toString() = x
    }

    fun localFun() = CapturesX()

    x = "OK"
    return localFun().toString()
}
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yO// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract((a, b))
class Foo
yY// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(z("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y ˜// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(1) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yc// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Nothing.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yl// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        {
        class Local : Inner() {
            val u = foo()
        }
        val u = Local().u
        return if (u == 42) "OK" else "Fail $u"
    }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").a {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yZ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class box(val list: List<String>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: C<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map { state++; this }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yc// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(String: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yZ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: () -> T)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    foo("").run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y6// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    val result = if (true)
        if (true) 1 else 2
    else 3
    if (result != 1) throw AssertionError("result: $result")
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yR// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(a: String)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String?>)
class Foo
y ƒ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    B.bar()
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").First {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : test(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yf// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(AssertionError("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// !LANGUAGE: +InlineClasses

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class log
yY// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.foo(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun foo(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yœ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun box(): String {
    val x: Any = 'A'
    var y = 0
    if (x is Char) {
        y = x.toInt()
    }
    return if (y == 65) "OK" else "fail"
}

abstract class Abstract(val list: List<String>)
class Foo
yj// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
    val y0 = ys[0]
}
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yã// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        {
    val receiver = C()
    var result = receiver.classReceiver().result
    if (result != "C_OK") return "fail 1: $result"

    result = receiver.cReceiver().result
    if (result != "newC_OK") return "fail 3: $result"

    result = receiver.newCReceiver().result
    if (result != "newC_OK") return "fail 3: $result"

    result = receiver.extReceiver().result
    if (result != "newC_OK") return "fail 3: $result"

    return "OK"
}
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(a: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y  // Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().A(true)
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y%// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        companion object {
        private fun String.extension(): String = this
    }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y ı// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : A<String> {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(val x: Long) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = "OK"

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

inline class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(log.toString()) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : inner(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    get(o).run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yâ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                {
        list3.add(i)
        if (list3.size > 23) break
    }
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().prop {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object {
        val t = run { a++ }
    }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                toUShort(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yp// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun box() = Outer().Inner().O() + Outer().Inner().K

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val nn: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class toByte(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : En<*>(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yö// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
    inner class Bar() {
        val x = X({ doSomething() })
    }
}
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Boolean(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yg// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(BoolArray(1) { true })
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y Ã// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run { 1 }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(val fn: () -> String) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y,// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            anyEqeq(Z, NZ)
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
        run {
            xl++
            xd += 1.0
            xi++
        }
    }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y∆// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

inline class UInt(private val value: Int) {
    operator fun plus(other: UInt): UInt = UInt(value + other.asValue())

    fun asValue(): Int = value
}
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract((other as Foo).s) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yX// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : C(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yE// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(
        val a: String = {
            open class B() {
                open fun s() : String = "O"
            }

            val o = object : B() {
                override fun s(): String = "K"
            }

            B().s() + o.s()
        }()
)
class Foo
yY// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: String)
class Foo
y ˇ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : ArrayList<String>() {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(foo("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val i: List<String>)
class Foo
y%// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object {

        inner class C {
            fun foo() = "OK"
        }
    }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Int.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

enum class A {
    X {
        val x = "OK"

        inner class Inner {
            fun foo() = x
        }

        val z = Inner()

        override val test = z.foo()
    };

    abstract val test: String
}
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                Char(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: res1<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val B: List<String>)
class Foo
y ˜// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(p) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yY// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(Int(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(A(true).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    String().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    gtx().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y'// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        foo(foo) // 1st foo is a local fun, second is a captured local var
        foo()
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yX// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : A(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(x: Boolean, y: Boolean) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y$// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Formatter<IN, JsonObject>, MultiFormatter<IN, JsonArray> {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(val i: Int) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map { x(1) in list() }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yS// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: T) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y ÿ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run { a, b -> b - a }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y=// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : IterableIterator {
    override fun hasNext() = index < 5
    override fun next() = index++
}
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ye// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = "Failed"

abstract class Abstract(val list: List<String>)
class Foo
yU// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Int) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y È// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        mapUIntToULong(it)
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: box<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yp// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
inline class Z(val x: Int)
yä// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
        xz = Z(42)
        xl = L(1234L)
        xs = Str("abc")
        xo = Obj("def")
    }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString("???"))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yc// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = "fail"

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : range(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = "_"

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().s {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yd// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").hashCode {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    S().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yc// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = "FAIL"

abstract class Abstract(val list: List<String>)
class Foo
yg// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("fail: $s").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun String(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yI// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract()
class Foo
yZ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

operator fun component2() = 2

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun ZN.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                message(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString { a2 ->
                flag = false
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y,// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {}
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: shortPos<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yZ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : foo(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val c: List<String>)
class Foo
yÇ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                {
    return if (A().run() == "Aabc") "OK" else "fail"
}
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            {
    val b = B()
    val result = b.foo()
    return result
}
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(Child().ChildInClass.work()) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(xs.size + 42) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ye// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(elements: Collection<MyUInt>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(result("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: b<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y Ô// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : A() {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y3// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Builder<T> {
        override fun filter(filter: (T) -> Boolean) {

        }
    }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(z: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                Test(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").run {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(prop: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: foo<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y ÿ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run { { Host.ok() } }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(nn: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val box: List<String>)
class Foo
y&// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        private companion object {
        override fun toString(): String = "OK"
    }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yi// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    (A::Inner)(A()).run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yY// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(x("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yX// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            test {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

inner open class Abstract(val list: List<String>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(x: Int) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf().map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString())
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Long().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : ()-> Unit(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yX// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append("Fail")
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun local.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yÇ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

inline class Name(private val value: String) {
    fun asValue(): String = value
}
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun s.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(box: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yg// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(x@ (1 + 2)))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y¨// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                {
  val s = Slot()
  s.increaseVitality(1000)
  return if (s.vitality == 11000) "OK" else "fail"
}
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.Outer(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(takeVarargs(u3))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class get
y ”// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().AssertionError()
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            ArrayWrapper {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: ub<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun box(): String {
    var a = Base()

    val count = a.count
    if (count != 0) return "fail 1: $count"

    val count2 = a.count
    if (count2 != 1) return "fail 2: $count2"

    return "OK"

}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val Inner: List<String>)
class Foo
y0// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString { it }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y ˙// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Bar<Foo>("OK") {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yL// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main() {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yi// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

operator fun MyClass?.inc(): MyClass? = null

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val a: Any?, var x: Int)
class Foo
yd// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(x, "OK").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y÷// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
    companion object {
        private val my: String = "O"
            get() = field + "K"

        fun getValue() = my
    }
}
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yR// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(x: Int) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yP// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Table<String>(
            Array(1, {
                x-> Array(1, {y -> "OK"})
            })
    ) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y Õ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run { it }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Any().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y;// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString { object : B {} }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map { it.key + it.value }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun larg2.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yc// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString("O", z))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y Œ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run { ++x }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y	// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").foo("")) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    val map: Map<String, Boolean>? = mapOf()
    return if (map?.get("") == true) "fail" else "OK"
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y ∆// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().f()
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: test<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().String {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y?// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString { this[i] = this[j] }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yY// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(A("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yU// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: F2)
class Foo
y5// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun box(): String {
   if (Foo.A.a != 1 || Foo.A.b != "a") return "fail"
   if (Foo.B.a != 2 || Foo.B.b != "b") return "fail"
   if (Foo.C.a != 1 || Foo.C.b != "b") return "fail"
   if (Foo.D.a != 2 || Foo.D.b != "a") return "fail"
   return "OK"
}

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {

    operator fun getValue(thisRef: Any?, prop: Any?) =
        backing

    operator fun setValue(thisRef: Any?, prop: Any?, newValue: Int) {
        setterInvoked++
        backing = newValue
    }
}
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
        state = 1
    }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun a.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(testIt().map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(String: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yd// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(MyAlias: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                foo(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(::foo).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

private class Abstract(val list: List<String>)
class Foo
yÉ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                {
    val f = "KOTLIN"::get
    return "${f(1)}${f(0)}"
}
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y À// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {""}
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y≥// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                {
    xs[0] = Z(12)
    val t = xs[0]
    if (t.data != 12) throw AssertionError("$t")

    return "OK"
}
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(this).map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(val s: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val A: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString("OK"))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yU// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            a {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yW// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.s(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yW// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            {
    if (Foo().a != 11) return "fail"

    return "OK"
}
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yO// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                foo()
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class foo
y0// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            ArrayList<ULong>()
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yb// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    invoke().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yU// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Any) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            cResult {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yV// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(x: Array<Int>)
class Foo
yW// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(A(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").x {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y Õ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().toString()
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y €// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run { result(+"Stuff") }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yW// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            box {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: getT<String>)
class Foo
yU// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(42L)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yc// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("abc1").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yj// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun f(s: String?): String {
    return "$s"
}

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run { index, uInt ->
        sum = sum * 10 + (index + 1) * uInt.toInt()
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val fn: () -> String)
class Foo
yW// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(D().map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y ˜// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(i) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yl// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
        var x = 0L
        val y = x[0]++
        return if (y == 0L) "OK" else "Failed, y=$y"
    }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yS// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract((index, x))
class Foo
yr// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(run { { Host.ok() } }))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yZ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.ltDI(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y Ã// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().add(C(0))
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y Ú// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : B, A() {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y*// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            append(this)
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y`// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val Outer: List<String>)
class Foo
y // Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run { _, xx, _, _ -> Str(xx.string + "123") }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(Local("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ya// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(KProperty("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yã// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                {
    val list1 = ArrayList<UInt>()
    val range1 = 3u..5u
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(3u, 4u, 5u)) {
        return "Wrong elements for 3u..5u: $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = 3.toUByte()..5.toUByte()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(3u, 4u, 5u)) {
        return "Wrong elements for 3.toUByte()..5.toUByte(): $list2"
    }

    val list3 = ArrayList<UInt>()
    val range3 = 3.toUShort()..5.toUShort()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<UInt>(3u, 4u, 5u)) {
        return "Wrong elements for 3.toUShort()..5.toUShort(): $list3"
    }

    val list4 = ArrayList<ULong>()
    val range4 = 3uL..5uL
    for (i in range4) {
        list4.add(i)
        if (list4.size > 23) break
    }
    if (list4 != listOf<ULong>(3u, 4u, 5u)) {
        return "Wrong elements for 3uL..5uL: $list4"
    }

    return "OK"
}
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yß// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            {
    val o = object : A<Int> {
        override fun foo(t: Int) = if (t == 42) "OK" else "Fail $t"
    }
    return Derived(o).foo(42)
}
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.instance(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yW// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Runnable {
            public override fun run() {
                "".ext()
                f()
            }
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yì// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    // with possible local optimizations
    if (1L in 3L downTo 1L != range0.contains(1L)) throw AssertionError()
    if (1L !in 3L downTo 1L != !range0.contains(1L)) throw AssertionError()
    if (!(1L in 3L downTo 1L) != !range0.contains(1L)) throw AssertionError()
    if (!(1L !in 3L downTo 1L) != range0.contains(1L)) throw AssertionError()
    // no local optimizations
    if (element0 in 3L downTo 1L != range0.contains(element0)) throw AssertionError()
    if (element0 !in 3L downTo 1L != !range0.contains(element0)) throw AssertionError()
    if (!(element0 in 3L downTo 1L) != !range0.contains(element0)) throw AssertionError()
    if (!(element0 !in 3L downTo 1L) != range0.contains(element0)) throw AssertionError()
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yV// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(x : String) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y°// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
inline class Z(val x: Int) : IFoo {
    override fun bar(): String = "OK"
}
y Ô// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : B() {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yk// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        {
    fun rec(n : Int) {
        fun x(m : Int) {
            if (n > 0) rec(n - 1)
        }

        x(0)
    }

    rec(5)
    
    return "OK"
}
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yå// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
inner class C {
            fun foo() = "OK"
        }
yf// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val BaseGeneric: List<String>)
class Foo
yq// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(Exception("Division by zero").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y_// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))

        }) {
        }
    }
}

fun Foo.getString(it: String) = ""
            }
abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String> {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yV// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yZ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: <String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y ó// Original bug: KT-22098
// Duplicated bug: KT-22098



fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                appendgetString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        } {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yZ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    .run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yZ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }}
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

 main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(""). {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) 
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yR// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append()
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yN// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yW// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    ().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun .getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yY// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo(.run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf(").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo(). {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list List<String>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: <String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo()run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run 
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yV// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)

y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = "

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString 
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo).run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : AbstractarrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y ◊// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yV// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {}
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yF
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y=// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}



abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run{
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }){
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y*// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString 
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yW// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : (arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y µ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) 

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yT// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
             {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstractclass Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yR// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: ) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yZ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
 Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        ) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yV// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append((it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val : List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it:String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String = ""

abstract class Abstract(val list: List<String>)
class Foo
yG// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun mainargs: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yT// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) 
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Fooy^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString{
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract( list: List<String>)
class Foo
yJ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(vallist: List<String>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf.map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>){
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map ) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf"").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yW// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yS// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map{
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yY// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y Ù// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yR// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))}
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yY// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: ) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String)  ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getStringit))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }


fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map 
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y «// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run 
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yT// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(.map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y Ω// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString)
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object :Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getStringit: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y √// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args:Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yW// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

 class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: ListString>)
class Foo
y Ï// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object :  {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object: Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
classFoo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)class Foo
yV// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yS// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: )
class Foo
yZ// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract  Abstract(val list: List<String>)
class Foo
yY// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
         : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y\// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class 
y0// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""


class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object  Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("".map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String)= ""

abstract class Abstract(val list: List<String>)
class Foo
y]// Original bug: KT-22098
// Duplicated bug: KT-22098fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract classAbstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) =""

abstract class Abstract(val list: List<String>)
class Foo
y[// Original bug: KT-22098
// Duplicated bug: KT-22098

fun (args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yX// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yR// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("")map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
yV// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }}) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: Array<String>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun FoogetString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
y^// Original bug: KT-22098
// Duplicated bug: KT-22098

fun main(args: ArrayString>) {
    Foo().run {
        object : Abstract(arrayOf("").map {
            buildString {
                append(getString(it))
            }
        }) {
        }
    }
}

fun Foo.getString(it: String) = ""

abstract class Abstract(val list: List<String>)
class Foo
ˇˇ