øiexportTaggdefaultnoriginalSampley#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
gmutantsüyL// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty


val i = true
if (i) {var a = 0} else {var a = 0}


object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0


val k = true
try
{object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}}
catch(e: Exception){}
finally{}


fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}


val v = false
if (v) {fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}} else {fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}}

yW// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 
val t = true
when (t) {
 true -> {0}
 else -> {0}
}


object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y*// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String 
val p = false
when (p) {
 true -> {{
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}}
 else -> {{
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}}
}

yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import 
val a = false
try
{kotlin.reflect.KProperty}
catch(e: Exception){}
finally{}


var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yö// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    
val l = false
if (l) {operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }} else {operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }}


    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    
val z = true
try
{operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }}
catch(e: Exception){}
finally{}

}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yZ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    
val u = true
if (u) {var g by SimpleDelegate} else {var g by SimpleDelegate}


    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    
val e = false
try
{if (g++ != 0) return "fail g++: $g"}
catch(e: Exception){}
finally{}

    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    
val m = false
try
{if (++g != 2) return "fail ++g: $g"}
catch(e: Exception){}
finally{}

    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    
val w = false
try
{if (--g != 1) return "fail --g: $g"}
catch(e: Exception){}
finally{}

    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yg// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    
val y = false
if (y) {if (g-- != 1) return "fail g--: $g"} else {if (g-- != 1) return "fail g--: $g"}

    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yJ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    
val q = true
if (q) {g += 10} else {g += 10}

    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yz// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    
val n = false
when (n) {
 true -> {if (g != 10) return "fail g +=: $g"}
 else -> {if (g != 10) return "fail g +=: $g"}
}

    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    
val g = true
try
{g *= 10}
catch(e: Exception){}
finally{}

    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yh// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    
val y = false
if (y) {if (g != 100) return "fail g *=: $g"} else {if (g != 100) return "fail g *=: $g"}

    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yJ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    
val o = false
if (o) {g /= 5} else {g /= 5}

    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yf// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    
val b = true
if (b) {if (g != 20) return "fail g /=: $g"} else {if (g != 20) return "fail g /=: $g"}

    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    
val w = false
try
{g -= 10}
catch(e: Exception){}
finally{}

    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yy// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    
val q = true
when (q) {
 true -> {if (g != 10) return "fail g -=: $g"}
 else -> {if (g != 10) return "fail g -=: $g"}
}

    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yI// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    
val v = true
if (v) {g %= 7} else {g %= 7}

    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    
val y = false
try
{if (g != 3) return "fail g %=: $g"}
catch(e: Exception){}
finally{}


    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    
val i = true
try
{return "OK"}
catch(e: Exception){}
finally{}

}
yR// Original bug: KT-14833
// Duplicated bug: KT-14833

import 
val o = false
if (o) {kotlin.reflect} else {kotlin.reflect}
.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yL// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.
val f = true
if (f) {KProperty} else {KProperty}


var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yo// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int 
val n = false
when (n) {
 true -> {{
        return a
    }}
 else -> {{
        return a
    }}
}


    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y]// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) 
val m = false
if (m) {{
        a = value
    }} else {{
        a = value
    }}

}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): 
val a = false
try
{String}
catch(e: Exception){}
finally{}
 {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yE// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    
val c = false
if (c) {g} else {g}
 += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g 
val s = false
when (s) {
 true -> {+=}
 else -> {+=}
}
 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yF// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 
val g = false
if (g) {10} else {10}

    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    
val r = true
try
{g}
catch(e: Exception){}
finally{}
 *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g 
val w = true
when (w) {
 true -> {*=}
 else -> {*=}
}
 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yF// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 
val y = false
if (y) {10} else {10}

    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yE// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    
val a = false
if (a) {g} else {g}
 /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g 
val o = true
when (o) {
 true -> {/=}
 else -> {/=}
}
 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 
val j = false
when (j) {
 true -> {5}
 else -> {5}
}

    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    
val j = false
try
{g}
catch(e: Exception){}
finally{}
 -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g 
val i = false
try
{-=}
catch(e: Exception){}
finally{}
 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yF// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 
val i = false
if (i) {10} else {10}

    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yD// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    
val y = true
if (y) {g} else {g}
 %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yF// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g 
val y = false
if (y) {%=} else {%=}
 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 
val h = false
when (h) {
 true -> {7}
 else -> {7}
}

    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return 
val j = false
try
{"OK"}
catch(e: Exception){}
finally{}

}
yI// Original bug: KT-14833
// Duplicated bug: KT-14833

import 
val l = true
if (l) {kotlin} else {kotlin}
.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y^// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.
val z = false
when (z) {
 true -> {reflect}
 else -> {reflect}
}
.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(
val a = true
try
{thisRef: Any?}
catch(e: Exception){}
finally{}
, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yU// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, 
val r = true
if (r) {desc: KProperty<*>} else {desc: KProperty<*>}
): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y^// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        
val q = true
when (q) {
 true -> {return a}
 else -> {return a}
}

    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yd// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(
val u = false
when (u) {
 true -> {thisRef: Any?}
 else -> {thisRef: Any?}
}
, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, 
val o = true
try
{desc: KProperty<*>}
catch(e: Exception){}
finally{}
, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, 
val q = false
try
{value: Int}
catch(e: Exception){}
finally{}
) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y_// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        
val w = true
when (w) {
 true -> {a = value}
 else -> {a = value}
}

    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yR// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by 
val l = false
if (l) {SimpleDelegate} else {SimpleDelegate}


    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y^// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (
val t = true
when (t) {
 true -> {g++ != 0}
 else -> {g++ != 0}
}
) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yk// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) 
val y = true
when (y) {
 true -> {return "fail g++: $g"}
 else -> {return "fail g++: $g"}
}

    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y_// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (
val f = false
when (f) {
 true -> {++g != 2}
 else -> {++g != 2}
}
) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yl// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) 
val x = false
when (x) {
 true -> {return "fail ++g: $g"}
 else -> {return "fail ++g: $g"}
}

    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (
val a = true
try
{--g != 1}
catch(e: Exception){}
finally{}
) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) 
val e = true
if (e) {return "fail --g: $g"} else {return "fail --g: $g"}

    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y^// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (
val r = true
when (r) {
 true -> {g-- != 1}
 else -> {g-- != 1}
}
) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) 
val r = true
if (r) {return "fail g--: $g"} else {return "fail g--: $g"}

    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y^// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (
val n = false
when (n) {
 true -> {g != 10}
 else -> {g != 10}
}
) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yl// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) 
val o = true
when (o) {
 true -> {return "fail g +=: $g"}
 else -> {return "fail g +=: $g"}
}

    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y_// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (
val c = false
when (c) {
 true -> {g != 100}
 else -> {g != 100}
}
) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) 
val b = true
try
{return "fail g *=: $g"}
catch(e: Exception){}
finally{}

    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y^// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (
val h = false
when (h) {
 true -> {g != 20}
 else -> {g != 20}
}
) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) 
val j = false
try
{return "fail g /=: $g"}
catch(e: Exception){}
finally{}

    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (
val h = false
try
{g != 10}
catch(e: Exception){}
finally{}
) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yZ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) 
val o = false
if (o) {return "fail g -=: $g"} else {return "fail g -=: $g"}

    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yJ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (
val f = false
if (f) {g != 3} else {g != 3}
) return "fail g %=: $g"

    return "OK"
}
yZ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) 
val x = false
if (x) {return "fail g %=: $g"} else {return "fail g %=: $g"}


    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): 
val i = true
try
{Int}
catch(e: Exception){}
finally{}
 {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return 
val j = false
try
{a}
catch(e: Exception){}
finally{}

    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yW// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        
val p = true
when (p) {
 true -> {a}
 else -> {a}
}
 = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a 
val u = false
when (u) {
 true -> {=}
 else -> {=}
}
 value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = 
val m = false
try
{value}
catch(e: Exception){}
finally{}

    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (
val h = true
try
{g++}
catch(e: Exception){}
finally{}
 != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yE// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ 
val z = true
if (z) {!=} else {!=}
 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yD// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 
val b = true
if (b) {0} else {0}
) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yd// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return 
val x = true
when (x) {
 true -> {"fail g++: $g"}
 else -> {"fail g++: $g"}
}

    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yZ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (
val r = false
when (r) {
 true -> {++g}
 else -> {++g}
}
 != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yE// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g 
val y = true
if (y) {!=} else {!=}
 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 
val o = false
when (o) {
 true -> {2}
 else -> {2}
}
) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return 
val x = true
try
{"fail ++g: $g"}
catch(e: Exception){}
finally{}

    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yZ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (
val k = false
when (k) {
 true -> {--g}
 else -> {--g}
}
 != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g 
val m = false
when (m) {
 true -> {!=}
 else -> {!=}
}
 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yW// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 
val p = true
when (p) {
 true -> {1}
 else -> {1}
}
) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yd// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return 
val s = true
when (s) {
 true -> {"fail --g: $g"}
 else -> {"fail --g: $g"}
}

    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yZ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (
val l = false
when (l) {
 true -> {g--}
 else -> {g--}
}
 != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- 
val n = false
try
{!=}
catch(e: Exception){}
finally{}
 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 
val t = false
when (t) {
 true -> {1}
 else -> {1}
}
) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return 
val o = false
try
{"fail g--: $g"}
catch(e: Exception){}
finally{}

    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (
val f = false
when (f) {
 true -> {g}
 else -> {g}
}
 != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g 
val r = true
when (r) {
 true -> {!=}
 else -> {!=}
}
 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 
val o = false
when (o) {
 true -> {10}
 else -> {10}
}
) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yS// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return 
val k = false
if (k) {"fail g +=: $g"} else {"fail g +=: $g"}

    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yW// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (
val n = true
when (n) {
 true -> {g}
 else -> {g}
}
 != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g 
val m = true
when (m) {
 true -> {!=}
 else -> {!=}
}
 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yZ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 
val v = false
when (v) {
 true -> {100}
 else -> {100}
}
) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return 
val w = true
try
{"fail g *=: $g"}
catch(e: Exception){}
finally{}

    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yE// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (
val c = false
if (c) {g} else {g}
 != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g 
val l = false
try
{!=}
catch(e: Exception){}
finally{}
 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yF// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 
val q = false
if (q) {20} else {20}
) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yS// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return 
val b = false
if (b) {"fail g /=: $g"} else {"fail g /=: $g"}

    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yE// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (
val m = false
if (m) {g} else {g}
 != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yF// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g 
val v = false
if (v) {!=} else {!=}
 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yF// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 
val x = false
if (x) {10} else {10}
) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return 
val h = false
try
{"fail g -=: $g"}
catch(e: Exception){}
finally{}

    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (
val e = false
try
{g}
catch(e: Exception){}
finally{}
 != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g 
val m = false
try
{!=}
catch(e: Exception){}
finally{}
 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 
val z = false
when (z) {
 true -> {3}
 else -> {3}
}
) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return 
val h = true
try
{"fail g %=: $g"}
catch(e: Exception){}
finally{}


    return "OK"
}
yW// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (
val r = true
when (r) {
 true -> {g}
 else -> {g}
}
++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yF// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g
val s = false
if (s) {++} else {++}
 != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (
val r = false
try
{++}
catch(e: Exception){}
finally{}
g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yE// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++
val b = false
if (b) {g} else {g}
 != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yF// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (
val w = false
if (w) {--} else {--}
g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--
val u = true
try
{g}
catch(e: Exception){}
finally{}
 != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (
val y = true
try
{g}
catch(e: Exception){}
finally{}
-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yF// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g
val z = false
if (z) {--} else {--}
 != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y`// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: 
val s = false
when (s) {
 true -> {KProperty}
 else -> {KProperty}
}
<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yM// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: 
val s = false
if (s) {KProperty} else {KProperty}
<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: 
val o = false
try
{Int}
catch(e: Exception){}
finally{}
) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yW// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $
val u = true
when (u) {
 true -> {g}
 else -> {g}
}
"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $
val w = true
try
{g}
catch(e: Exception){}
finally{}
"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $
val p = false
when (p) {
 true -> {g}
 else -> {g}
}
"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yE// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $
val r = false
if (r) {g} else {g}
"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yD// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $
val d = true
if (d) {g} else {g}
"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $
val r = true
try
{g}
catch(e: Exception){}
finally{}
"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $
val o = false
try
{g}
catch(e: Exception){}
finally{}
"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yY// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $
val l = false
try
{g}
catch(e: Exception){}
finally{}
"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yE// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $
val k = false
if (k) {g} else {g}
"

    return "OK"
}
yZ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: 
val q = false
when (q) {
 true -> {Any}
 else -> {Any}
}
?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yX// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: 
val s = true
try
{Any}
catch(e: Exception){}
finally{}
?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    (g %= 7)
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): (String) {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if ((--g != 1)) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if ((g != 3)) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if ((g++) != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if ((g)-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: (Any)?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"!!
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"!!
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"!!
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"!!
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }!!
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String!! {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10!!
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect!!.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g!! != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"!!
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"!!
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int!!) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g!!"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): (String)? {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): (Int)? {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: (KProperty<*>)?): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: (KProperty<*>)?, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: (Int)?) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin!!.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g *= 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g == 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- == 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g == 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g == 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g == 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g-- != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (--g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g.inc() != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (g.inc() != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (g.dec() != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g.dec() != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: g++ != 0<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (KProperty) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    (
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if if (g != 10) return "fail g +=: $g"g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc*= KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g : 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValuegthisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $("
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "g != 20$g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (fail --g: ) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.(

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if KPropertyg != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(Any: thisRef?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<3>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != *) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: g != 10g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if ($) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $fail g /=: "
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "g$g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: return?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) Any "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: 7"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= $g
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: g<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $KProperty"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = $g
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: value"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (gg != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $++"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $if (--g != 1) return "fail --g: $g""
    g
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(g: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (thisRef != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: !=<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g KProperty 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    OK fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "operator"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

5 box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= fun
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: OKg"

    return "$"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
10

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += }
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>)g Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (: != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if ("OK" != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return g
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: {
        a = value
    }<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) KProperty
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        " a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $greturn
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

fail g++: 

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "var a = 0$g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    g
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (if (g != 10) return "fail g +=: $g" != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    $ (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: ifg"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>)"fail g--: $g" Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return :
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100g return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $)"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValuegthisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if ((++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        +=
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g a = value 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue" {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return (thisRef: Any?, desc: KProperty<*>, value: Int)fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: +=) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g Int 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: ++, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (Any?g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by "

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $gSimpleDelegate
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#g
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (// Original bug: KT-14833 != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2return "fail g +=: $g" return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) )
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: "g"
    if (++g != 2) return $fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g return 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) += "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: return "fail g %=: $g""
    g %= 7
    if (g != 3) $g

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != !=) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g 2 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != fail g /=: ) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "100$g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) $
    g *= 10
    if (g != 100) return "fail g *=: return "fail g +=: $g"g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

()

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun boxvar a = 0: String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (gg != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    ++ += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?if (g != 20) return "fail g /=: $g" desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    ,
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: g) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    Int /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) "
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g{
        a = value
    }
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: KProperty?, desc: Any<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*if, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    > (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "g$g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $fail g++: "
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import value.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = kotlin
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>--g: Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if () != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect."

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $gKProperty
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    g %= 7
    if (g != 10) return "fail g -=: $g"
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate return "fail g /=: $g"

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var SimpleDelegate = 0

object a {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: "OK"g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return $
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate 10
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= {
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: String<*>, value: Int) {
        a = value
    }
}

fun box(): KProperty {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: return?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) Any "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue}thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    (
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "3$g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != fail g +=: ) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $""
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return gfail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) g
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (return "fail ++g: $g" != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*return "fail g /=: $g"): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) >
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: *=g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g $ 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) != "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g return 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) fail g %=: 
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "return "fail --g: $g"$g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty=*>, value: Int) {
        a < value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(10, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += thisRef: Any?
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, fail g -=: ): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "desc: KProperty<*>$g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: return "fail g +=: $g"g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) $
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (fail g *=: g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "--$g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) fail g +=:  "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "return$g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): ++ {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (gInt != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g ) 10!= return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return 10
    g *= "fail g +=: $g"
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: )<*>, value: IntKProperty {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != %=) return "fail g -=: $g"
    g 10 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if 10g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != () return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<">, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return *fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if returng != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    ( "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 1020 return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != )) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#"
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g// Original bug: KT-14833
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun fail g %=: (thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "getValue$g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return ""fail g %=: $g"$g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return fail g--: 

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, $g, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: desc: KProperty<*>"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): != {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g String 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return return "fail g +=: $g"fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) "
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: a?, desc: KProperty<*>, value: Int) {
        Any = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) $g "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: return"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

String box(): fun {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun *(thisRef: Any?, desc: KProperty<getValue>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "$$g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: fail g++: g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ $ 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: !=g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    10
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= }
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    g
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (if (g-- != 1) return "fail g--: $g" != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $1"
    if (g-- != g) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue"thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK(
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): "fail --g: $g" {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return String
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator Int getValue(thisRef: Any?, desc: KProperty<*>): fun {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: (?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if Anyg++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0if (++g != 2) return "fail ++g: $g" return "fail g++: $g"
    )
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g g 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    += -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any+=, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g ? 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

return "fail g %=: $g" box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) fun

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $gif
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    " (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= "
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return 10OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

0

var a = import kotlin.reflect.KProperty

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "g$g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (fail g++:  != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: 1<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != KProperty) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): != {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g Int 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>)-= Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g : 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

!= box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g fun 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) --
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (greturn "fail g++: $g" != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if )g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3( return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: (, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if Any?g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    10
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= if (g++ != 0) return "fail g++: $g"
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, valueg Int) {
        a = value
    }
}

fun box(): String {
    var : by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, return: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) desc "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, !=) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g value: Int 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#(thisRef: Any?, desc: KProperty<*>)
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue// Original bug: KT-14833: Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: !=?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g Any 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (1 != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != g++) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if () != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10g++ return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != "fail g *=: $g") return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return 0
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != fail g -=: ) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "100$g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g *= 10) return "fail g +=: $g"
    g != 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $)"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20g return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) g "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    return -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) g
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (return "fail --g: $g" != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<a>, value: Int) {
        * = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

=

var a import kotlin.reflect.KProperty 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        g = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    a %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: )) {
        a = value
    }
}

fun box(Int: String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): if {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    String (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: ifg"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    $ (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != return "fail g /=: $g") return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) 2
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: return "fail g -=: $g"?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) Any
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = --
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (gvalue != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g g 10
    if (g != 100) return "fail g *=: $g"
    *= /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box()by String {
    var g : SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(fail g /=: , desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "thisRef: Any?$g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(if (--g != 1) return "fail --g: $g", desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    thisRef: Any?
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != !=) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g 10 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): " {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $gString
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ $ 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: !=g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (g -= 10) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    ++g != 2
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) $
    g += 10
    if (g != 10) return "fail g +=: return "fail g--: $g"g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#return
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        // Original bug: KT-14833 a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(String: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): thisRef {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if ($ != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: --gg"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (g--g != 1) return "fail --g: $g"
    if (-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 5) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 0
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#"
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return // Original bug: KT-14833fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun ++(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (getValueg != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): return "fail ++g: $g" {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) Int
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1$ return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: )g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return g != 20
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if ("fail g--: $g") return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: )) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0Int return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
g != 10

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (// Duplicated bug: KT-14833) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by "

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $gSimpleDelegate
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = !=
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- value 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

kotlin.reflect
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(g: String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if () != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: *, desc: KProperty<Any?>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return !=
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g a 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) fail g--:  "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "return$g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue--thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if ((g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != ") return 2fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: +=): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g KProperty<*> 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: g) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $Int"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 100 != 10) return "fail g +=: $g"
    g *= 10
    if (g) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $++g != 2"
    if (g) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: *="
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g $g 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != () return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if 2g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    "fail g /=: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return if (g++ != 0) return "fail g++: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

(

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if var a = 0--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import return "fail g++: $g".reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) kotlin
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ g-- != 1 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (!=) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlinSimpleDelegatereflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by .

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    g (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $if"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (ifg != 1) return "fail --g: $g"
    -- (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= g != 3
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (10) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object g *= 10 {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    SimpleDelegate
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return "fail g %=: $g"
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return a

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun boxif): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    ( (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty!=*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g < 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    if -= 10
    g (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: $?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: Anyg"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "return "fail g *=: $g"$g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) fail --g: 
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) 1
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != {
        a = value
    }) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) g "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $return"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any,, desc: KProperty<*>? value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g ) 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20!= return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "*=$g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g fail g--:  10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "if (g-- != 1) return "fail g--: $g"$g"
    if (--g != 1) return "fail --g: $g"
    fail ++g: 
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.!=.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g reflect 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "!=$g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g fail g--:  10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: g *= 10) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    Int
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
g-- != 1

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (// Duplicated bug: KT-14833) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef( Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if :g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= fail g %=: 
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "5$g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValueg /= 5 {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    (thisRef: Any?, desc: KProperty<*>, value: Int)
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- "fail g +=: $g" 1) return "fail g--: $g"
    g += 10
    if (g != 10) return !=
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $greturn "fail g +=: $g"
    g += 10
    if (g != 10) "
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValueg {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    (thisRef: Any?, desc: KProperty<*>, value: Int) /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun "(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $gsetValue
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: gg"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if ($ != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (() return "fail g++: $g"
    if g++ != 0++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g %= 7) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g != 20
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if $--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: (g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a g 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (= != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (gg != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    ++ *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, g): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $desc: KProperty<*>"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"fail g -=: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, (, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if desc: KProperty<*>++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, if): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    desc: KProperty<*> (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g( != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if ++--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<)>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3* return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

!= a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g var 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box()if (g++ != 0) return "fail g++: $g" String {
    var g by SimpleDelegate

    :
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return !=
    if (++g != 2) return "fail ++g: $g"
    if (--g "fail g++: $g" 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    fail --g: 
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }$g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.g.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $reflect"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g != 10"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    " (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $gif
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate return
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        { a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        desc a
    }

    operator fun setValue(thisRef: Any?, return: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(if (g != 10) return "fail g +=: $g", desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    thisRef: Any?
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, ": KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $gdesc
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return !=
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g "fail g++: $g" 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun $(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: getValueg"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return g++
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (a != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (10 != g) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator != setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g fun 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

g kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $import"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

0 a = var

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: return "fail g /=: $g"<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) KProperty
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, !=: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g value 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Anyif (g != 10) return "fail g +=: $g", desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    ?
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if ("g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g--
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var "OK" = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return a
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 20) return "fail g *=: $g"
    g /= 5
    if (g != 100) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValuefail ++g: thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "($g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate 1

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: g?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (Any != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: )?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20Any return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, }, value: Int) {
        a = value
    desc: KProperty<*>
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) fail g--:  "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "return$g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) g
    if (--g != 1) return "fail --g: $g"
    if (return "fail ++g: $g"-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: value: Int, KProperty<*>) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: (): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if KProperty<*>g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a "fail --g: $g" value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return =
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return fail g %=: fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return ""$g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (return "fail g +=: $g"g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) --
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) g
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    return "fail --g: $g" *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): " {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $gInt
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: !="
    g /= 5
    if (g $g 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0OK return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return ")"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "10$g"
    g -= 10
    if (g != fail g /=: ) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return return "fail g--: $g"
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) a
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g $ 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: +=g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++g != 0) return "fail g++: $g"
    if (++ != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (10 != 20) return "fail g /=: $g"
    g -= g
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    $

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: }g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun g(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $getValue"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return gfail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (" != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    10 /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != g) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) "fail g++: $g"
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return {
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "g$g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $fail ++g: "
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
operator

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    // Duplicated bug: KT-14833 fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail ++g: $g"
    if (++g != 2) return "fail g++: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
if

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    // Duplicated bug: KT-14833 (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    return "fail --g: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) if (g++ != 0) return "fail g++: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: g): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $KProperty<*>"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: 1): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != KProperty<*>) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (gg != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (-- != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    fail g++:  (g++ != 0) return "if$g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) +=
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g return "fail ++g: $g" 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect)KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int. {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (OK) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "g != 100"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, descg KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (: != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g != 10 by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int" {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return )fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g$ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: ++g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>g value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++, != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

var g by SimpleDelegate kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    import

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun "(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $ggetValue
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>g: Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    ) += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    g

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $}"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    " (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return iffail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        "
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return return afail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KPropertyreturn "OK"): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    <*>
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.{
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String reflect
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef10 Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != :) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: 5g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= $
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    g += 10

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    }
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += "fail g *=: $g"
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return 10
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $gg
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $""

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) g
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $return "fail ++g: $g""
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) --g != 1
    if (++g != 2) return "fail ++g: $g"
    if (return "fail g++: $g") return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100return return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) ) "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return ""$g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return fail g++: OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (return) g != 10 "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) fail g -=:  "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "return$g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail g -=: $g"fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    return

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    } "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

* a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<var>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g if 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    *= (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty--*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (<g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, "fail ++g: $g", value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return desc: KProperty<*>
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) g
    g /= 5
    if (g != 20) return "fail g /=: $g"
    return "fail g *=: $g" -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    " /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return gfail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty$g, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: <*>"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g g 10
    if (g != 10) return "fail g -=: $-="
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (") return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return g != 10fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "g$g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (fail --g:  != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): ( {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if Intg != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g g %= 7 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    !=
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g } 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
!=
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: g<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $KProperty"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

++ kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (importg != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g " 2) return "fail ++g: $g"
    if (--g != 1) return !=fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: return "fail g %=: $g"?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) Any

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != g) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (10 != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $-="
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g g 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g!= != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g -- 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $7"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= g
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): ++g != 2 {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (Int) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        " = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return afail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box()} String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
:
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if !=--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g ( 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != g != 10) return "fail g--: $g"
    g += 10
    if (1) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, g++: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (desc != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0g != 3 return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if ()) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, g, value: Int) {
        a = value
    }
}

fun box(): String {
    var desc: KProperty<*> by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return gfail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (" != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 1) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 2) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: "fail g *=: $g", desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return Any?
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: return, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) Any? "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: g) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--Int != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflectIntKProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: .) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import getValue

var a = 0

object SimpleDelegate {
    operator fun kotlin.reflect.KProperty(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect<*>KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty.): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): if {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    String (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= $g
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: 10"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    $g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $"fail g +=: $g""
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return g
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "5$g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= fail g--: 
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    return
    if (g-- != 1) if (--g != 1) return "fail --g: $g" "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    if (g != 10) return "fail g -=: $g"
    if (g != 20) return "fail g /=: $g"
    g -= 10
    g /= 5
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue" {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g(thisRef: Any?, desc: KProperty<*>, value: Int)
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a $ value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: =g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate operator
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    { fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate 20
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != {) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty--g, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (<*> != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    g != 20 fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (operator) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: 10): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= KProperty<*>
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        if (g != 10) return "fail g -=: $g" = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    a
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != if (g != 10) return "fail g -=: $g") return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    2
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    !=
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g if (++g != 2) return "fail ++g: $g" 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: return "fail g /=: $g") {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) Int
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int if
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    { (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) g-- "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (return != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValuegthisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (( != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: returng"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) $ "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValueg: Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $(thisRef: Any?, desc: KProperty<*>)"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) g
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (return "fail g *=: $g" != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != OK) return "fail g %=: $g"

    return "3"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, valuereturn Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    : "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var g = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $a"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<-->): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g* != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail g--: $g"
    if (g-- != 1) return "fail --g: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    g (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $if"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: g != 3g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if ($) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int --
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if ({g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return "OK"
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return a
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box((: String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if )++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>)Int Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: :) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: "?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return Anyfail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g$
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: "g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (return "fail g %=: $g" != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) g

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box()10 String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= :
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: "?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OKAny
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): ) {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2Int return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by fail g /=: 

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "SimpleDelegate$g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun 1(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != setValue) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.{.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int reflect
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

= a var 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1$g return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: )"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    $g

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: }"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if 1--g != 1) return "fail --g: $g"
    if (g-- != () return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<return>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) * "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import KProperty.reflect.kotlin

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        return "fail g++: $g"
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) a = value
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (return "fail g /=: $g"-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) g
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate Any?
    operator fun getValue(thisRef: {, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g g 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (!= != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
g

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    } /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g != 20
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g += 10) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $gif (g != 3) return "fail g %=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    "

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    /= *= 10
    if (g != 100) return "fail g *=: $g"
    g g 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g" != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return ++fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.=

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a KProperty value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, 5: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= desc
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): " {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $gInt
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g g != 10 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (!=) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    fail g /=:  (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "if$g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: g-- != 1): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (KProperty<*>) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return iffail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    " (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*g, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $>"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: fail g--: ): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "KProperty<*>$g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g fail g -=:  2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "!=$g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g $g 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: *="
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue($g, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: thisRef: Any?"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (7 != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= g
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != if) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    10 (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, "fail --g: $g"): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return desc: KProperty<*>
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (if (g != 3) return "fail g %=: $g"++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    g

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (gg != 1) return "fail g--: $g"
    g += 10
    if (-- != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator -- setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (gfun != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0g-- != 1 return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if ()) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun boxif (g-- != 1) return "fail g--: $g"): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    (
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (") return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return g++ != 0fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var /= = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g a 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value"fail --g: $g" Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return :
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): () {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun boxInt: String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (fail g -=:  != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "g$g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return g
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $"fail --g: $g""
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, ), value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100desc: KProperty<*> return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: operator): Int {
        return a
    }

    KProperty<*> fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    5
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= if (g-- != 1) return "fail g--: $g"
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>)!= Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g : 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g if 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    != (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: (?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun boxAny): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    !=
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g } 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String setValue
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        fail g +=:  = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "a$g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    ( fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if operatorg != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun return "fail --g: $g"(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) getValue
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

3 a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != var) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a : 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box()= String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- g 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $!="
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return 20fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != ") return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++"fail g %=: $g" != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return g

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if ($) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: --g != 1g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return fail g /=: 
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return ""fail g +=: $g"$g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (gg != 20 != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (--) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g " 1) return "fail --g: $g"
    if (g-- != 1) return !=fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?if (g-- != 1) return "fail g--: $g" desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    ,
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: fail g -=: ?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "Any$g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: !=?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g Any 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "$gfail g -=: "
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (return) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) g-- != 1 "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++5 != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= g
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $""
    g %= 7
    if (g != 3) return gfail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 5) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 1
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, descg KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var : by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        return = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) a "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): g {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $String"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $gg"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var "fail g -=: $g" = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return a
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KPropertyif (--g != 1) return "fail --g: $g", value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    <*>
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import KProperty<*>

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: kotlin.reflect.KProperty): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if "g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK(
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        g != 10
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (return a) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (!=) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g g-- != 1 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box"OK"): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return (
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fail g++:  box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fun$g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<">, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK*
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: String<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): KProperty {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue((: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if thisRefg != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by "

    if (g++ != 0) return SimpleDelegatefail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a != value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g = 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(1, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != thisRef: Any?) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (list3.size > 23) break
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 2) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yt// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

val local = object {
        public fun run() : Int {
            return a
        }
    }

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(i, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y;// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "Wrong elements for 0..MinI step 3: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (c != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y.// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (Int.TopField++ != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        result = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    o += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    r %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y6// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (testS0L(L(42L)).long != 43L) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "OK$g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import Int.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yI// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        list4.add(i)
        if (list4.size > 23) break
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "k"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) break
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y.// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "Fail: ${a.component1()}"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    a /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "OK"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yﬁ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    val z = Z().test()
    if (z != "A") return "fail 1: $z"

    val f = Z().field
    if (f != "F") return "fail 2: $f"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g .. 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (y != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "OK$g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, args: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import x.foo(42)

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// !LANGUAGE: +InlineClasses
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yK// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

val aDouble: Array<Double> = arrayOf<Double>(1.0)

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<String>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "Fail$g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "OK"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: ULong<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (!=g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y@// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (A(myArray) == A(intArrayOf(0, 1, 2))) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, b: T) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (x1 ?: x2 ?: y) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yo// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
    val test = shouldReturn11()
    if (test != 11) return "Failed, test=$test"

    return "OK"
}

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Nothing {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "OK"

    return "OK"
}
y.// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $changeObject"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a in value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 42) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 42
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: p<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (String != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    val result = "OK"

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yk// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object Test {
    val a = "OK"
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var prop: Int by Delegate()

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "Z2"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $String"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.AssertionError

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (x++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (order-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(var bar: Int?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y.// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (s == "1:2;2:3;3:4;") return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "OK$g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: index<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yj// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (list2 != listOf<ULong>(MaxUL)) {
        return "Wrong elements for MaxUL..MaxUL step 1: $list2"
    }
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $intList"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y*// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (list2.size > 23) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): String {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (!=g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++Any != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (this + 1) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: String, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (++g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.nullValue.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (f != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 1234
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (String != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yÖ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (arg == 1) {
        result = "firstResult"
        d
    } else if (arg == 2) {
        result = "secondResult"
        arg
    }
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 0
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 23) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (bottles != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: D) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a != value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "OK"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (B-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (z2.x != 0) throw AssertionError()
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y<// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    z.toByteArray()[0].toInt() != 42
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 0) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $ss"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yº// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    "O" +
        try {
            throw Exception("oops!")
        }
        catch (e: Exception) {
            try { "K" } catch (e: Exception) { "2" }
        }
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g == 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    Outer -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $f"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(x: Int, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g!= != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(val a: Char, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: String, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g < 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: DoubleArray<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "OK$g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 10) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y*// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (1.0F != 1.0.toFloat()) return "fail 2"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun compareTo(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yE// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (str == "ROCK PAPER SCISSORS LIZARD SPOCK") return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return this + s
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 42) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (stepg != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (x != false) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "O"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Double?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "d"
}
y.// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (super.foo(r) + "K") return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(String: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "OK$g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (x = "OK") return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (simple != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        foo() != 2
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (!g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "OK$g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.this.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (sum != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a == b
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.T.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (result != 333) return "Fail $result"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return u()
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, String: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, compareTo: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        x = x + break
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    companion fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $C"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (2 < 1) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yˆ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue() {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.printSome.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Boolean?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 1
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {}

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var b = Byte.MAX_VALUE

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 0
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    String += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y`// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail 1: $invokeOrder != $expectedInvokeOrder or $result != $expectedResult"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++kotlin != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.String.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return str
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833



var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "OK"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.A

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    vararg fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, arg: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $Nested"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $Int"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yO// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "Wrong elements for 5.toByte() downTo 10.toByte(): $list2"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (C != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y6// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return if( v1 == v2 ) "OK" else "$v1 $v2"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "localExt $localExt"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "1:2;2:3;3:4;$g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yE// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "Wrong elements for MinUI..MinUI step 1: $list1"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun list5(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    exit += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (list2++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: NestedFoo?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): UInt {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return add
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: String) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $String"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "OK$g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yL// This test just checks that no internal error happens in backend
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y*// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (toUShort-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (box != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail2: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = String
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, a: Any): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "Fail #3$g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 5

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y0// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (hasNext) {hasNext = false; true} else false

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(box: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return Byte
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 42
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $foo"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.add.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (setOK()) {
    } else {
    }
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (i-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): T {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $list1"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y`// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    fun box(): String {
    val u1 = UInt(10)
    val u2 = UInt(20)
    val r = test(null, null, u1, u2)
    return if (r != 40) "fail: $r" else "OK"
}

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (res == "OKOK") "OK" else res

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (i++ != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yq// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    val a1: Byte? = 1 + 1
    val a2: Short? = 1 + 1
    val a3: Int? = 1 + 1
    val a4: Long? = 1 + 1
    val a5: Double? = 1.0 + 1
    val a6: Float? = 1f + 1
    val a7: Char? = 'A' + 1
    val a8: Int? = 'B' - 'A'

    if (a1!! != 2.toByte()) return "fail 1"
    if (a2!! != 2.toShort()) return "fail 2"
    if (a3!! != 2) return "fail 3"
    if (a4!! != 2L) return "fail 4"
    if (a5!! != 2.0) return "fail 5"
    if (a6!! != 2f) return "fail 6"
    if (a7!! != 'B') return "fail 7"
    if (a8!! != 1) return "fail 8"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (String != 3) return "fail g %=: $g"

    return "OK"
}
yH// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (baz("abc") == 3 && baz("") == 3 && baz(null) == 0) "OK" else "FAIL"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail: xi=$xi"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (10!! == 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y;// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (a3.parentProp != "2") return "fail8: ${a3.parentProp}"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    v == null
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail 1$g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: foo<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "Fail 1: {$f.get()}"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return c
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    x > 0
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yx// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {

    fun T.local(s: Int) {
        value += s
    }

    var t: T? = T(1)
    t?.local(2)

    return t!!
}

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 5) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g> != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 1
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (isg != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $s"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y6// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
   if (Foo.A.a != 1 || Foo.A.b != "a") return "fail"
   if (Foo.B.a != 2 || Foo.B.b != "b") return "fail"
   if (Foo.C.a != 1 || Foo.C.b != "b") return "fail"
   if (Foo.D.a != 2 || Foo.D.b != "a") return "fail"
   return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: floatVararg<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) "OK"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by T

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $A"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 1
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return Local()
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by a

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g != 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y3// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (reformat("") != expected) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.from

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<Int>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 800
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (C(0)..C(2)) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.Callable.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "Fail toString"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y/// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

val a = FloatArray(5)

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = holderValue
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: En<*>) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 0x00ff00) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++In != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++Double != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 9
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yû// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    val i : Int? = 0
    val j = i?.plus(3) //verify error
    return "OK"
}
yÅ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    val a = Foo("OK")
    return a.asResult()
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "OK$g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: I4?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    s %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import KProperty.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (x5(1) != 1) return "fail 5"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (result = "OK") return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (value++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--ok != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    Any %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y7// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (1 == 1) {
            i++
        } else {
        }
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y,// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (a1.prop != 1) return "fail1: ${a1.prop}"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g is 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, d: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 1
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 1) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y-// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) throw AssertionError(message())
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    data fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y+// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return Companion
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y5// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (ClassDescriptorImpl != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: value<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail 8: ${i3.size}"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- + 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++public != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 4
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail 5$g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.foo

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $x"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var It by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.String

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 1) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yF// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (x == 42)
            s = "OK"
        else
            s = "fail"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "OK"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (propDec-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    reflect += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (x == until) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "OK"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (x != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yú// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object Impl : ContentBox<Content> {
    override fun get(): Content = Content()
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    Inner *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 7) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail get$g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.l

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    test2 -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "OK"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = p
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $result"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): r {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// KJS_WITH_FULL_RUNTIME
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $start"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $ax"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yE// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (iterator1.hasNext() && iterator2.hasNext()) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $Int"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $list2"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import s.readwrite.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $bShort"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(list5: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return Outer.Nested().fn()
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    box *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a += value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $l"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    s *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "foo$g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: Int): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail: xl=$xl"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++a4 != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (a.value == 42) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 0) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yÛ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    fun <T : Number?> foo(t: T) {
    t?.toInt()
}
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = KProperty
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (!eqDI(-0.0, 0)) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "first"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import 0.toShort()

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 23
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: String?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "Fail 1$g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, list2: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "K$g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (Boolean != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 0) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y+// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (A.prop != "OK") return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: A, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y%// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $Int"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 0
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y6// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.UninitializedPropertyAccessException

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (rem != uc) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yõ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    fun box(): String {
    val z = "K"
    open class A(val x: String) {
        constructor() : this("O")

        val y: String
            get() = z
    }

    class B : A()

    val b = B()

    return b.x + b.y
}
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y:// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if ((arrayOf(1, 2, 3)::get)(1) == 2) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    test1 %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $size"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return """ """""
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (-1 != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(b: Int, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y<// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var result = (0..3).map(::sparse).joinToString()

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail: $s"

    return "OK"
}
y)// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (d.id("") != "") return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (String != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $s"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: Number): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (a1 != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun Z(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var S by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y'// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Array<T>, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "Fail$g"

    return "OK"
}
yc// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (!(1.toDouble() in collection.indices) != !range0.contains(1.toDouble())) throw AssertionError()
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g + 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (B != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--x != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "Fail 2 GE D$g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: String): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y,// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $descriptor"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 42

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    o + k
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by Nothing

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        l = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y(// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    string %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.properties.Delegates

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    M %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yó// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    enum class Nested {
        O,
        K
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) "OK"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (r != "OK") return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: second<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y&// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    Base += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y$// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (a2!! != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: Whatever<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "two$g"

    return "OK"
}
y#// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0
    if (g++ != 0) return "fail g++: $g"
object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate


    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "$g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a= 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = 
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if(g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var  by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) 
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g !=3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var  = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g  2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if () return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>):  {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?,desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g!= 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1 return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if --g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if ( != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1)return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g  100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if ( != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: <*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: ?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if ( != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ !=0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

     "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g--  1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import .KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "$g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g !=2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if ++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
     (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10)return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "$g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
         = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
     *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if () return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a =value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++ != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) 
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: "
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, ) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: ) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3)return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
     %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if () return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>) Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate{
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g  10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
     (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import .reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g !=10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g bySimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var gby SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operatorfun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g +=10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int 
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != ) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, : KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g  3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "$g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a= value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: , value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int){
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return"fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

     fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2)  "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: "
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yÙ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if(g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "$g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != ) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "$g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) 
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g*= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %=7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) 
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
     (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return 
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, ): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by 

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y≈// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if () return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if () return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != ) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: <*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if(g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return 
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != ) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return"fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: ?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g  5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
     fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int{
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: "
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
     (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return"fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return 
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g!= 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "$g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if ( != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if ( != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
     /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a  value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) 
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if(g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box() String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: , desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g  10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
     (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(: String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

importkotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g!= 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: "
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

 kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833


import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10)  "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box: String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>,value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if ( != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) 
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return 
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: "
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g!= 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

     (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if(--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if () return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "$g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

 a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box():  {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10 return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a =0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"

y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return"fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: "
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g 

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
     -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KPropertyvar a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

objectSimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if ( != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g  7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if(g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?,desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if ( != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: , desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0)return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yÕ// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g+= 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: "
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) 
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if(g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return"fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fungetValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc:KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator  setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g  1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) 
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g  SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if () return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return"fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) 
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) 

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun (thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegateif (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != ) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20)return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
         a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if () return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return"fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g !=10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -=10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, : Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y // Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int 

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
ya// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate 

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValuethisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1)  "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
yK// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0



fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a}

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g !=1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc:KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10)return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g  10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return"OK"
}
y// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValuethisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any? desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return"fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != ) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y!// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return ""
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }
}

fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (-- != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
y"// Original bug: KT-14833
// Duplicated bug: KT-14833

import kotlin.reflect.KProperty

var a = 0

object SimpleDelegate {
    operator fun getValue(thisRef: Any?, desc: KProperty<*>): Int {
        return a
    }

    operator fun setValue(thisRef: Any?, desc: KProperty<*>, value: Int) {
        a = value
    }


fun box(): String {
    var g by SimpleDelegate

    if (g++ != 0) return "fail g++: $g"
    if (++g != 2) return "fail ++g: $g"
    if (--g != 1) return "fail --g: $g"
    if (g-- != 1) return "fail g--: $g"
    g += 10
    if (g != 10) return "fail g +=: $g"
    g *= 10
    if (g != 100) return "fail g *=: $g"
    g /= 5
    if (g != 20) return "fail g /=: $g"
    g -= 10
    if (g != 10) return "fail g -=: $g"
    g %= 7
    if (g != 3) return "fail g %=: $g"

    return "OK"
}
ˇˇ