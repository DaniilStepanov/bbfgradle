øiexportTaggdefaultnoriginalSampley6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
gmutantsüy≠// Original bug: KT-10835
// Duplicated bug: KT-10835


val t = false
if (t) {fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}} else {fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}}



class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y›// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}



val p = true
when (p) {
 true -> {class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}}
 else -> {class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}}
}


fun main(args: Array<String>) {
    X().foo()
}
yÖ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}


val i = true
if (i) {fun main(args: Array<String>) {
    X().foo()
}} else {fun main(args: Array<String>) {
    X().foo()
}}

yk// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R 
val k = true
try
{{    
    return receiver.block()
}}
catch(e: Exception){}
finally{}



class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yg// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) 
val b = true
if (b) {{
    X().foo()
}} else {{
    X().foo()
}}

yX// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <
val j = false
if (j) {T} else {T}
, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yl// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, 
val i = false
try
{R}
catch(e: Exception){}
finally{}
> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
ya// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(
val n = true
if (n) {receiver: T} else {receiver: T}
, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yf// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, 
val l = true
if (l) {block: T.() -> R} else {block: T.() -> R}
): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yÄ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    
val n = true
when (n) {
 true -> {return receiver.block()}
 else -> {return receiver.block()}
}

}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yl// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    
val i = false
try
{open inner class Y}
catch(e: Exception){}
finally{}


    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y¢// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    
val d = true
if (d) {fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }} else {fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }}

}

fun main(args: Array<String>) {
    X().foo()
}
y}// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(
val r = false
when (r) {
 true -> {args: Array<String>}
 else -> {args: Array<String>}
}
) {
    X().foo()
}
yr// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    
val u = true
when (u) {
 true -> {X().foo()}
 else -> {X().foo()}
}

}
yl// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): 
val t = false
try
{R}
catch(e: Exception){}
finally{}
 {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yk// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return 
val s = true
try
{receiver.block()}
catch(e: Exception){}
finally{}

}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yò// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() 
val l = true
if (l) {{
        with2(X()) {
            object : Y() {}
        }
    }} else {{
        with2(X()) {
            object : Y() {}
        }
    }}

}

fun main(args: Array<String>) {
    X().foo()
}
yY// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    
val x = true
if (x) {X()} else {X()}
.foo()
}
yl// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().
val u = false
try
{foo()}
catch(e: Exception){}
finally{}

}
y_// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return 
val d = false
if (d) {receiver} else {receiver}
.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yp// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.
val d = true
when (d) {
 true -> {block()}
 else -> {block()}
}

}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yâ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        
val r = false
if (r) {with2(X()) {
            object : Y() {}
        }} else {with2(X()) {
            object : Y() {}
        }}

    }
}

fun main(args: Array<String>) {
    X().foo()
}
yk// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    
val u = true
try
{X}
catch(e: Exception){}
finally{}
().foo()
}
yZ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().
val a = false
if (a) {foo} else {foo}
()
}
yl// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: 
val s = false
try
{T}
catch(e: Exception){}
finally{}
, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y\// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.
val y = false
if (y) {block} else {block}
()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y[// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        
val x = true
if (x) {with2} else {with2}
(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yn// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: 
val w = true
when (w) {
 true -> {Array}
 else -> {Array}
}
<String>) {
    X().foo()
}
yë// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) 
val x = false
when (x) {
 true -> {{
            object : Y() {}
        }}
 else -> {{
            object : Y() {}
        }}
}

    }
}

fun main(args: Array<String>) {
    X().foo()
}
yl// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> 
val t = false
try
{R}
catch(e: Exception){}
finally{}
): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yl// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(
val v = true
when (v) {
 true -> {X()}
 else -> {X()}
}
) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yk// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) 
val r = true
try
{{
            object : Y() {}
        }}
catch(e: Exception){}
finally{}

    }
}

fun main(args: Array<String>) {
    X().foo()
}
yk// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: 
val x = false
when (x) {
 true -> {T}
 else -> {T}
}
.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yj// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(
val b = true
when (b) {
 true -> {X}
 else -> {X}
}
()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yk// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            
val z = true
try
{object : Y() {}}
catch(e: Exception){}
finally{}

        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yx// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            
val j = true
when (j) {
 true -> {object : Y() {}}
 else -> {object : Y() {}}
}

        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y\// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<
val n = true
if (n) {String} else {String}
>) {
    X().foo()
}
yk// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            
val i = true
try
{object : Y() {}}
catch(e: Exception){}
finally{}

        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yk// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : 
val n = true
try
{Y}
catch(e: Exception){}
finally{}
() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yk// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : 
val z = true
try
{Y}
catch(e: Exception){}
finally{}
() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2((X())) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y!!

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X!!()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String!!>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}!!
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): (R)? {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: (T)?, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (T.() -> R)?): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: (Array<String>)?) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> (R)?): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (T)?.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<(String)?>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : (Y)?() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver!!.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, Ropen with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    > inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X(:) {
            object ) Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    (

    fun foo() {
        with2(X()) {
            object : Yopen inner class Y) {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R X


class X {
    open inner class Y

    fun foo() {
        with2({    
    return receiver.block()
}()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: object : Y() {}, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            T
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            String
        }
    }
}

fun main(args: Array<object : Y() {}>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): () {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().fooR
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> .(receiver: T, block: T.() -> R): R {    
    return receiverwith2block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) Array<String>
            object : Y() {}
        }
    }
}

fun main(args: {) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


<String> X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Arrayclass) {
    X().foo()
}
y6// Original bug: KT-10835
T

fun <T, R> with2(receiver: // Duplicated bug: KT-10835, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: Y, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : T() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2Y()receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : ( {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun ( with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo<T, R>) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return Array<String>.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: receiver) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, foo> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun R() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T{() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) .
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun object : Y() {} with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            <T, R>
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

object : Y() {} <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            fun
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo((args: Array<String>) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun Y() with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : <T, R> {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, }): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        block: T.() -> R
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open ) class Y

    fun foo() {
        with2(X()) {
            object : Y(inner {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: {): R T.() -> R    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    Array<String> class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: open inner) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block(String
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<)>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, blockfun main(args: Array<String>) {
    X().foo()
} T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

:
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return Array.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: receiver<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R)open inner class Y R {    
    return receiver.block()
}


class X {
    :

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: <String>Array) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.blockY)
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : (() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R: with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object > Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, X().foo(): T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    block
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, )> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X(R.foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> class): R {    
    return receiver.block()
}


R X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X )
    open inner class Y

    fun foo() {
        with2(X(){ {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6X
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class // Original bug: KT-10835 {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y(X() {}
        }
    }
}

fun main(args: Array<String>) {
    ).foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiverfun foo() {
        with2(X()) {
            object : Y() {}
        }
    } T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    :
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

String


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


{ X {
    open inner class Y

    fun foo() class
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : fun() {}
        }
    }
}

Y main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: )): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y(T.() -> R {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return Y().block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : receiver {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R X    
    return receiver.block()
}


class { {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: inner): R {    
    return receiver.block()
}


class X {
    open T.() -> R class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(}) {
            object : Y() {}
        }
    }
X()

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: R, block: T.() -> T): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, (): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().fooblock: T.() -> R)
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner ) Y

    fun foo(class {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> :)R R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun args: Array<String> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(<T, R>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


X() X {
    open inner class Y

    fun foo() {
        with2(class) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() with2 R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        ->(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: :): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(argsT.() -> R Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


args: Array<String> X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(class) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.( -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo())
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R Array<String>


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: {    
    return receiver.block()
}) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X(X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> String(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<with2>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() R R): -> {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiverY() T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : : {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : (args: Array<String>) {}
        }
    }
}

fun mainY() {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    foo() foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().fun
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: ).() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y(T {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver{
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
} T, block: T.() -> R): R {    
    return receiver.block()
}


class X :

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver) T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X(): {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    X class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    open inner().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
            object : Y() {}
        }
        with2(X()) {
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : String() {}
        }
    }
}

fun main(args: Array<Y>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    )
}

fun main(args: Array<String>) {
    X().foo(fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2main {
            object : Y() {}
        }
    }
}

fun (X())(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T)() -> R): R {    
    return receiver.block(.
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): ) {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>R {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R)fun main(args: Array<String>) {
    X().foo()
} R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

:
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: X, block: T.() -> R): R {    
    return receiver.block()
}


class T {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(Y()) {
            object : X() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo} {
        with2(X()) {
            object : Y() {}
        ()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(() {
            object : Y() {}
        }
    }
}

fun mainX()args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R)Array R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: :<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(args()) {
            object : Y() {}
        }
    }
}

fun main(X: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.()()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().fooblock
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun } with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
<T, R>


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: }.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    T
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X<String>)) {
            object : Y() {}
        }
    }
}

fun main(args: Array() {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.blockobject : Y() {})
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            (
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : X()() {}
        }
    }
}

fun main(args: Array<String>) {
    Y.foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> Rreceiver: R {    
    return ).block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

{
            object : Y() {}
        } <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) fun
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: Targs block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(,: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Yfun) {}
        }
    }
}

( main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun String with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<<T, R>>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiverT :, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: {.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) T
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.{
    X().foo()
}) -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) (
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(Xobject : Y() {}) {
            ()
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): return {    
    R receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {
            object : Y() {}
        }


class X {
    open inner class Y

    fun foo() {
        with2(X()) {    
    return receiver.block()
}
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.)) -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo(( {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> {): R R    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: (, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().fooT)
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <TR R> with2(receiver: T, block: T.() -> ,): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
(

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2// Duplicated bug: KT-10835X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: X.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    T().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: foo()): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().T.() -> R
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver, T: block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver) T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>: {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.)()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo(block
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class Y() {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : X {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, RY with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : >() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() String
}

fun main(args: Array<{
        with2(X()) {
            object : Y() {}
        }
    }>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    {
            object : Y() {}
        }
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) return receiver.block()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    {} class Y

    fun foo() {
        with2(X()) {
            object : Y() open inner
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

args: Array<String> <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(fun) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun fooY {
        with2(X()) {
            object : ()() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R }


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        {    
    return receiver.block()
}
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun args() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(foo: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) >
    }
}

fun main(args: Array<String{
            object : Y() {}
        }) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): X {    
    return receiver.block()
}


class R {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2receiverreceiver: T, block: T.() -> R): R {    
    return (.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<()>) {
    XString.foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2Y(): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : (receiver: T, block: T.() -> R) {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun fooargs: Array<String> {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(()) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun fooArray<String> {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ()) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<Stringfoo()) {
    X().>
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <<String>, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ArrayT) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): { {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) R
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, main): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun block: T.() -> R(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, Rfun main(args: Array<String>) {
    X().foo()
} with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

>
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: return.() -> R): R {    
    T receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: (, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainTargs: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (.() -> R): R {    
    return receiver.blockT)
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun receiver: TT, R> with2(<, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() String
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<{>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : (args: Array<String>)() {}
        }
    }
}

fun mainY {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : ()() {}
        }
    }
}

fun main(args: Array<String>) {
    XY.foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: String): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<T.() -> R>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            } : Y() {}
        }
    }
object

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return ).block(receiver
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> fun): R {    
    return receiver.block()
}


class X {
    open inner class Y

    R foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun openT, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    < inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun <() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ArrayfooString>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver)block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y(. {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() X().foo() R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    ->
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(R, block: T.() -> receiver: T): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
T

fun <// Duplicated bug: KT-10835, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class with2

    fun foo() {
        Y(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.:
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(argsblock() Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: Tclass block: T.() -> R): R {    
    return receiver.block()
}


, X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

} <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        fun
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<X>) {
    String().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> Array): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: R<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: }.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        T
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: )T.() -> R: R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.(Array -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: )<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.(()
}


class X {
    open inner class Y

    fun foo() {
        with2(Xblock)) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R ()


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X{    
    return receiver.block()
}.foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(>) {
            object : Y() {}
        }
    }
}

fun main(args: Array<StringX()) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().fooX()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    foo receiver.block()
}


class X {
    open inner class Y

    fun return() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return ().block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    Xreceiver.foo()
}
y6// Original bug: KT-10835
{
    X().foo()
}

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) // Duplicated bug: KT-10835
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun T with2(receiver: <T, R>, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R (    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main{args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.{
            object : Y() {}
        } -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) ()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.fun -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    () foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block{
}


class X {
    open inner class Y

    fun foo() ()
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<}>) {
    X().foo()
String
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <String, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<T>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : args: Array<String> {}
        }
    }
}

fun main(Y()) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): String {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<R>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R(X()) with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2> {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(X().foo(): Array<String>) {
    args
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() (X()) R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2-> {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiverXblock()
}


class X {
    open inner class Y

    fun foo() {
        with2(.()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block(}
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        )
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}
}


class X return receiver.block()

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiverT.() -> R T, block: :): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, RX with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class > {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: foo().() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().T
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: }, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {T
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block(inner
}


class X {
    open ) class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: block()): R {    
    return receiver.T.() -> R
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() R ->): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Array.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: T<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        object : Y() {}(X()) {
            with2
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T{ block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) ,
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner object : Y() {} Y

    fun foo() {
        with2(X()) {
            class
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: fun, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    T foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(XString)) {
            object : Y() {}
        }
    }
}

fun main(args: Array<(>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Y.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : T() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    args
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(return receiver.block(): Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
String

fun main(args: Array<}>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <Tfun main(args: Array<String>) {
    X().foo()
} R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

,
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) String
    }
}

fun main(args: Array<{
            object : Y() {}
        }>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2<: R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array(receiver: T, block: T.() -> R)String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    .
}

fun main(args: Array<String>) {
    X()fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2args: Array<String> {
            object : Y() {}
        }
    }
}

fun main((X())) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    )
}

fun main(args: Array<String>fun foo() {
        with2(X()) {
            object : Y() {}
        }
    } {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2}: R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {(receiver: T, block: T.() -> R)
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R }


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {{    
    return receiver.block()
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(Xfoo)) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().(()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> <): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ArrayRString>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun ()T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X<) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

R <T, R> with2(receiver: T, block: T.() -> R): fun {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, )): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X(block: T.() -> R.foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver{
            object : Y() {}
        } T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) :
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver{}block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() .
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block}
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        ()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


open inner class Y X {
    class

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array}) {
    X().foo()
<String>
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun XT, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class < {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
return

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    // Duplicated bug: KT-10835 receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: foo): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun T.() -> R() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class ) {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo(X
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : foo() {}
        }
    }
}

fun main(args: Array<String>) {
    X().Y()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R(): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T() R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block,
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo{ {
        with2(X()) ()
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> {
            object : Y() {}
        }): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) R
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
<

fun // Duplicated bug: KT-10835T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) fun
    }
}

{
            object : Y() {}
        } main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : X() {}
        }
    }
}

fun main(args: Array<String>) {
    Y().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: receiver.block().() -> R): R {    
    return T
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

with2(X()) {
            object : Y() {}
        }


class X {
    open inner class Y

    fun foo() {
        fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> fun): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

R main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(foo()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().X()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(String: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<receiver>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: Y(), block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : T {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(String, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<receiver: T>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(()) {
    X().fooargs: Array<String>
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    }
}

fun main(args: Array<String>) {
    X().foo()
fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.(Y -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : )() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: R.() -> R): T {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {args
        }
    }
}

fun main(}: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X<)) {
            object : Y() {}
        }
    }
}

fun main(args: Array(String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    ( receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    Xreturn).foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun RT, R> with2(receiver: T, block: T.() -> R): < {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        ()(X()) {
            object : Ywith2 {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> }): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    R
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, .> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X()Rfoo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

)


class X {
    open inner class Y

    fun foo() {
        with2(X(fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            (args: Array<String>)
        }
    }
}

fun mainobject : Y() {} {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.:
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object block() Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X(Y) {
            object : )() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Array<String>.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: T) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() <}
        }
    }
}

fun main(args: Array{String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : }() {Y
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y(. {}
        }
    }
}

fun main(args: Array<String>) {
    X())foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, }> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    R
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() (args: Array<String>)
        }
    }
}

fun main{} {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block})
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
(
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            {
    X().foo()
}
        }
    }
}

fun main(args: Array<String>) object : Y() {}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.blockfun)
}


class X {
    open inner class Y

    ( foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Twith2(X()) {
            object : Y() {}
        }() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        .
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    foo inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().open()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            String : Y() {}
        }
    }
}

fun main(args: Array<object>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<>String) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {()
        }
    }
}

fun main(args: Array<String>) {
    X}.foo()
}
y6// Original bug: KT-10835
,

fun <T// Duplicated bug: KT-10835 R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R foo


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().{    
    return receiver.block()
}()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    (args: Array<String>) foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainfun {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    Y class Y

    fun foo() {
        with2(X()) {
            object : open inner() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Y()): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : T.() -> R {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R }


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
{    
    return receiver.block()
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: ()): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    XT.() -> R.foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> Rfun foo() {
        with2(X()) {
            object : Y() {}
        }
    }: R {    
    return receiver.block()
}


class X {
    open inner class Y

    )
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T) R> with2(receiver: T, block: T.(, -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X(receiver: T, block: T.() -> R).foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> Y): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : R() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.Y) -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : (() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object String Y() {}
        }
    }
}

fun main(args: Array<:>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(<()) {
            object : Y() {}
        }
    }
}

fun main(args: ArrayXString>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, Y: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : block() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: X()<String>) {
    Array.foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.}) -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
(
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
args: Array<String>

fun main(}) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, )): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X(block: T.() -> R) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}


class X {
    open inner class Y

    return receiver.block()
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, fun main(args: Array<String>) {
    X().foo()
}> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

R
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: fun main(args: Array<String>) {
    X().foo()
}, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

T
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.)(block
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, {
            object : Y() {}
        }): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) block: T.() -> R
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(args, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(receiver: T: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun (X())() {
        with2foo {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> foo): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().R()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    X receiver.block()
}


class return {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo<) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array(String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() :
        }
    }
}

fun main(args{} Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object Array<String> Y() {}
        }
    }
}

fun main(args: :) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: with2, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        T(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: <ArrayString>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R){ R :    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : )() {}
        }
    }
}

fun main(args: Array<String>) {
    X(Y.foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <TY R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : ,() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return {.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) receiver
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
(

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X// Duplicated bug: KT-10835).foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : >() {}
        }
    }
}

fun main(args: Array<StringY) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: inner, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open T class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> (args: Array<String>)): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainR {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): fun {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

R main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    object
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            return receiver.block() : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.(. -> R): R {    
    return receiver)block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> ()): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().fooR
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2funreceiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    ( foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.( -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X()).foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: {    
    return receiver.block()
}, block: T.() -> R): R T


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: open inner, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    T class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.blockopen inner class Y)
}


class X {
    (

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

(


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Yfun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}) {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    (args: Array<String>) inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainopen {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainStringargs: Array<(>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(fun main(args: Array<String>) {
    X().foo()
}()) {
            object : Y() {}
        }
    }
}

X
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : X().foo() {}
        }
    }
}

fun main(args: Array<String>) {
    Y()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X(object : Y() {}) {
            )
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun fooX) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    (().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <{, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) T
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block({
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() )}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> X()): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    R.foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, .: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X()blockfoo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.{) -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) (
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Array): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: T.() -> R<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        (args: Array<String>)
    }
}

fun main} {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        X(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    with2().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X }
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        {
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

) main(args: Array<String>) {
    X().foo(fun
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R (args: Array<String>)    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main{ {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <Tfun foo() {
        with2(X()) {
            object : Y() {}
        }
    } R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    ,
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, (): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    Xblock: T.() -> R).foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, T.() -> R> with2(receiver: T, block: R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(): T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X(receiver) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: {, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) T
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(R, block: T.() -> R): receiver: T {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
{}

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() // Duplicated bug: KT-10835
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: {}.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() T
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.(
}


class X {
    open inner class Y

    fun foo() {
        with2block()X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    }
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        return receiver.block()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: R.() -> T): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <TString R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<,>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: (), block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().fooT
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.(args: Array<String>) -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main() {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(object : Y() {}) {
            X()
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R)X R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    :().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> }(receiver: T, block: T.() -> R): R {    
    return receiver.block()
with2


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.blockArray
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ()<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(}, block: T.() -> R): R {    
    return receiver.block()
receiver: T


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() . R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X()->foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<)>) {
    X(String.foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(R: T, block: T.() -> receiver): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

( <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foofun) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> object : Y() {}(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            with2
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    { receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) return
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T( R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X,)) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class }

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
Y

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block})
(


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X{
    X().foo()
}) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) ()
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, RR with2(receiver: T, block: T.() -> >): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, )> with2(receiver: T, block: T.() -> RR: R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, blockreceiver T.() -> R): R {    
    return :.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return Y()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : receiver.block() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, Y()): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : block: T.() -> R {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block((
}


class X {
    open inner class Y

    fun foo)) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() Array<String>
        }
    }
}

fun main(args: {}) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.blockX)
}


class X {
    open inner class Y

    fun foo() {
        with2((()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: R, block: T.() -> R): T {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: class.() -> R): R {    
    return receiver.block()
}


class X {
    open inner T Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiveropen inner class Y T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    :

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.{
    X().foo()
}()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) block
y6// Original bug: KT-10835
(X())

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2// Duplicated bug: KT-10835 {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: ), block: T.() -> RT: R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R){ R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) :
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.(X -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    )().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {.
        }
    }
}

fun main(args: Array<String>) {
    X()}foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2} {
            object : Y() {(X())
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
Array

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: // Duplicated bug: KT-10835<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiverblock T, block: T.() -> R): R {    
    return receiver.:()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return >
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<Stringreceiver.block()) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


String X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<class>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() (}
        }
    }
}

fun main(args: Array<String>) {
    X{).foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, with2(X()) {
            object : Y() {}
        }> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        R
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: foo, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().T()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun fooY() {
        with2(X()) {
            object : () {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2({: T, block: T.() -> R): R {    
    return receiver.block()
}


class X receiver
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.Y()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : block() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.blockfoo())
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().(
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, .): R {    
    return receiverblock: T.() -> Rblock()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, RX() with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(>) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Array() {}
        }
    }
}

fun main(args: Y<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return }.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
receiver

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) )
    }
}

fun main(args: Array<String>{
            object : Y() {}
        } {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.(class -> R): R {    
    return receiver.block()
}


) X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main<args: Array(String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.X
}


class X {
    open inner class Y

    fun foo() {
        with2(block()()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, Y): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : block: T.() -> R() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() ) R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()-> {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, block> with2(receiver: T, block: T.() -> R): R {    
    return receiver.R()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: {, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() T
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: TX block: T.() -> R): R {    
    return receiver.block()
}


class , {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : YT) {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, ,> with2(receiver: TR block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    String
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<return receiver.block()>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.<String>
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Arrayblock()) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() }
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
{
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block(
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X()).foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: )): R {    
    return receiver.block(T.() -> R
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <(, R> with2Treceiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> (): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : YR) {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


foo X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().class()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun )() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X(foo.foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> X): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    R().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.String -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<()>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {)
        }
    }
}

fun main(args: Array<String>) {
    X().foo(}
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun fooX) {
        with2((()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): with2 {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        R(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return foo
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().receiver.block()()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner (X()) Y

    fun foo() {
        with2class {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() X()
        with2({) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainTargs: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class }

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    Y
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun fun main(args: Array<String>) {
    X().foo()
}T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

<
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (.T) -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() X() R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(->) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


(

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        }(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
with2
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() (
}

fun main(args: Array<String>) {
    X().foo{
        with2(X()) {
            object : Y() {}
        }
    })
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, open inner class Y: T.() -> R): R {    
    return receiver.block()
}


class X {
    block

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }


class X {
    open inner class Y

    {    
    return receiver.block()
}
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

) <T, R> with2(receiver: T, block: T.(fun -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.Y -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : ()() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiverreceiver T, block: T.() -> R): R {    
    return :.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T(args: Array<String>) R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main, {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X})) {
            object : Y() {}
        (
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: Array<String>, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: T) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: fun main(args: Array<String>) {
    X().foo()
}.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

T
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R (


class X {
    open inner class Y

    fun foo{    
    return receiver.block()
}) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : main {}
        }
    }
}

fun Y()(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Y.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class T

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block( T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo:)
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(: R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y(receiver: T, block: T.() -> R)) {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R(receiver: T, block: T.() -> R) with2>: R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

Y() <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : fun {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.{
}


class X {
    open inner class Y

    fun foo() block()
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block((
}


class X {
    open inner class Y

    fun foo() {
        with2(X))) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
.

fun <T, R> with2(receiver: T, block: T// Duplicated bug: KT-10835() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): open inner {    
    return receiver.block()
}


class X {
    R class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <R, R> with2(receiver: T, block: T.() -> R): T {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> Y(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : with2() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Y().() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : T {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2} {
            object : Y() {}
        }
    (X())
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block(args
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(): Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiverfoo()block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X()..
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


main X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun class(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: TR() -> R): . {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner fun foo() {
        with2(X()) {
            object : Y() {}
        }
    } Y

    class
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.R) -> (): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() Array<String>
}

fun main(args: {
        with2(X()) {
            object : Y() {}
        }
    }) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <{
            object : Y() {}
        }, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) T
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun X with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(<T, R>()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(Array<String>()) {
            object : Y() {}
        }
    }
}

fun main(args: X) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (args: Array<String>)): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainT.() -> R {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : X().foo()() {}
        }
    }
}

fun main(args: Array<String>) {
    Y
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X }
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {{
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    foo foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().fun()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : YString {}
        }
    }
}

fun main(args: Array<()>) {
    X().foo()
}
y6,
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T// Original bug: KT-10835 block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.blockX())
}


class X {
    open inner class Y

    fun foo() {
        with2(() {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> {    
    return receiver.block()
}): R R


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : }() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
Y
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> {(receiver: T, block: T.() -> R): R with2    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) .
    }
}

fun main(args: Array<String>) {
    X(){
            object : Y() {}
        }foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    {
        with2(X()) {
            object : Y() {}
        }
    } class Y

    fun foo() open inner
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: X().foo().() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    T
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.String) -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<(>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): () {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : YR {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            <String>
        }
    }
}

fun main(args: Arrayobject : Y() {}) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, R): block: T.() -> R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: (, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun fooT) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) Array
    }
}

fun main(args: {
            object : Y() {}
        }<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T) block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y(, {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

Array main(args: fun<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R)class R {    
    return receiver.block()
}


class X {
    open inner : Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
R

fun <T, R> with2(receiver: T, block: T.() -> R): // Duplicated bug: KT-10835 {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, return: T.() -> R): R {    
    block receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.X().foo()()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    block
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : )(Y {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: {
            object : Y() {}
        }, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) T
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> block): R {    
    return receiver.R()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R)class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
} R {    
    return receiver.block()
}


:

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


Array<String> X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: class) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> nine): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(A: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {
    return Outer.Nested().fn()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) { Local() }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : attr() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y;// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    downTo().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(cl: Array<String>) {
    X().foo()
}
y\// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun box(): String {
    val a = A()
    val x = A::foo
    x(a)
    return a.result
}
yt// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {

    val bad = Bad({ 1 })

    return if (bad.test() == 1) "OK" else "fail"
}
y/// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: String) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: A.() -> Unit): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y("K") {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yD// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {
    var v: T
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y=// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    receiver().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// !LANGUAGE: +InlineClasses
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class x {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yn// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {
    for (x in IntArray(5)) {
        if (x != 0) return "Fail $x"
    }
    return "OK"
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y/// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return ::OK.name
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y7// Original bug: KT-10835
// !LANGUAGE: +InlineClasses

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> Float): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(foo2: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y0// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class C(val value: String = "C") {

    inner class B(val s: String) {
        val result = value + "_" + s
    }

    fun classReceiver() = B("OK")

    fun newCReceiver() = C("newC").B("OK")
    fun cReceiver(): B {
        val c = C("newC")
        return c.B("OK")
    }

    fun C.extReceiver1() = this.B("OK")
    fun extReceiver() = C("newC").extReceiver1()
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(i) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, val arg: String): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    bar().foo()
}
yu// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
        var x = 0L
        val y = x[0]++
        return if (y == 0L) "OK" else "Failed, y=$y"
    }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: Base, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) { a, b -> a + b }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y;// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): String {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: () -> Unit): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().list3()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2() {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo(5)
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    box().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : UInt() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: String): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.h()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: result<String>) {
    X().foo()
}
yó// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            private companion object {
        private fun foo() = on { this }

        override fun toString() = "OK"
    }
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun test(args: Array<String>) {
    X().foo()
}
y<// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> Boolean): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yk// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun testFloatArray() {
    FloatArray(5) { i ->
        if (i == 3) return
        i.toFloat()
    }
    throw AssertionError()
}
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): Char {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X(0)) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yA// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(anyEqeq(Z, NZ)) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: Int, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y;// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : String() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y/// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return S.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().z()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(uai()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun get() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(value()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y;// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class MClass {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> Int): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    C().foo()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> String(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: UInt?): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> z(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

// IGNORE_BACKEND: JVM_IR
fun returnNullable(): String? = null


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: takeClass<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2((::A)()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y?// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Builder<T>.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) { z(4) in zr(1, 3) }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(2) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yD// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2("result: $result") {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y0// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Int): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.OK()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): UInt {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> Inner): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        KMutableProperty1Impl()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: Float, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        String(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: () -> T): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: String<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun box() = if (Nested(42) == 42) "OK" else "fail"


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : foo() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(toString: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    infix fun Int.myMap(x: () -> Unit) {}
}

fun main(args: Array<String>) {
    X().foo()
}
y/// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(s: S, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) { L(it.long + 1L) }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<Long>) {
    X().foo()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, localD: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: r.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block("OK")
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yG// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun box() : String {
    PhysicalVirtualFile()
    return "OK"
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<Any>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: MyObject<String>) {
    X().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: i<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun S(args: Array<String>) {
    X().foo()
}
yE// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    private fun foo(result: String = "OK"): String = result

    companion object {
        fun bar() = A().foo()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yA// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun AssertionError() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y*// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return "OK"
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y;// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: String, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, Game: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<B>) {
    X().foo()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun box() =
        if (getAndCheck({ 42 }, { 42 })) "OK" else "fail"


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yl// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
        return "Wrong elements for MinUS..MinUS step 1: $list3"
    }
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) { x, y -> "$x-$y" }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y=// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(MutableIterator: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y;// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().toUShort()
}
y,// WITH_RUNTIME
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Base(s) {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: list3, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: size.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.b()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y/// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return t.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: A.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yM// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open class Map1 : HashMap<String, Any?>()

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main() {
    X().foo()
}
y;// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class String

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y€// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {
    if (Z(42)::xx.get() != 42) throw AssertionError()
    if (L(1234L)::xx.get() != 1234L) throw AssertionError()
    if (S("abcdef")::xx.get() != "abcdef") throw AssertionError()

    return "OK"
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(C()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y<// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().withIndex()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.A()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.String()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y>// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class ArrayList

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun index() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<Int>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    iarg1.inv()
}
y?// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : FunctionNode {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().MinUI()
}
yA// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : CharSequence() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y<// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(a: String = "abc", block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return Local.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y@// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : VirtualFile() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yÄ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun box(): String {
  val l: Long = 1
  val l2: Long = 2
  val r = l.rangeTo(l2)
  return if (r.start == l && r.endInclusive == l2) "OK" else "fail"
}
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Any() {
                override fun toString() = outerProp + arg
            }
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yã// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {
    val list1 = ArrayList<UInt>()
    val range1 = (3u..5u).reversed()
    for (i in range1) {
        list1.add(i)
        if (list1.size > 23) break
    }
    if (list1 != listOf<UInt>(5u, 4u, 3u)) {
        return "Wrong elements for (3u..5u).reversed(): $list1"
    }

    val list2 = ArrayList<UInt>()
    val range2 = (3u.toUShort()..5u.toUShort()).reversed()
    for (i in range2) {
        list2.add(i)
        if (list2.size > 23) break
    }
    if (list2 != listOf<UInt>(5u, 4u, 3u)) {
        return "Wrong elements for (3u.toUShort()..5u.toUShort()).reversed(): $list2"
    }

    val list3 = ArrayList<ULong>()
    val range3 = (3uL..5uL).reversed()
    for (i in range3) {
        list3.add(i)
        if (list3.size > 23) break
    }
    if (list3 != listOf<ULong>(5u, 4u, 3u)) {
        return "Wrong elements for (3uL..5uL).reversed(): $list3"
    }

    return "OK"
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): a {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Int.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yD// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> Comparable<Int>): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y/// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(A: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
ym// KT-5786 NoSuchMethodError: no accessor for private fun with default arguments
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2("other") {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y=// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    Delegate().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().nx()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return B(239).hashCode()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        { result = "O"; "K"}()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().A()()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: ()->(()->T?)): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y;// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> String): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    x().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> list(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> toFloat(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, T> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        S("OK")
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yK// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: putNumberCompareAsVoid, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(D()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().f(t)
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <Obj, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y[// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    when (a) {
        is B -> run(a::magic)
    }
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, val param: String): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) { (x, y, z) -> x + y + z.toString() }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.listOf()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class i {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return Derived(o).foo(42)
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y
// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
  operator fun contains(l : Long): Boolean = l == 5.toLong()
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return 3u.toUShort()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    A(1).foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(task: () -> T): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y=// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().Comparable()
}
y.// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return f.next()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Your() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return String.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

public fun ListTag.item(body: LI.() -> Unit): Unit {}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y)// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(a: Any) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class inc

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2({}) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.toString()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(length) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(x()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yf// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Local(239L) {
        fun bar(): Boolean = foo()
    }
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y;// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <reified T> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return asResult.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y@// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    myNotEquals().foo()
}
yO// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(listOf<UInt>(1u, 2u, 3u, 4u)) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    const class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yN// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    Array<Int>(5, { it } ).iterator()
}
y.// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    in class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yE// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    Outer.Nested().foo("OK")
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: IcAny, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : IBar() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yF// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    inline class S(val string: String)

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.getValue()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y<// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Comparable<Any>): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun box(): String {
    var count = 0
    for (i in (M .. M).reversed()) {
        ++count
        if (count > 1) {
            throw AssertionError("Loop should be executed once")
        }
    }
    if (count != 1) throw AssertionError("Should be executed once")
    return "OK"
}
}

fun main(args: Array<String>) {
    X().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.a()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// KJS_WITH_FULL_RUNTIME

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.run()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().Long()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> UInt): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().Unit()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) { 3 }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Foo() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : A() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yÇ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            {
    val result = A().foo()
    if (result != 333) return "Fail $result"
    return "OK"
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(Test()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y ˘// Original bug: KT-10835
// Duplicated bug: KT-10835

fun box() = My().delegate


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yÜ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        throw UnsupportedOperationException("not implemented") //To change body of created functions use File | Settings | File Templates.
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y@// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2((-1).toLong()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return result.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: let, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> loop): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, a: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y;// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: String.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y≤// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {
    val a = A()
    val b = A()

    a.put("", 0.0)
    a.remove("")

    a.putAll(b)
    a.clear()

    a.keys
    a.values
    a.entries

    return "OK"
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y;// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.ref(Local())
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        MAX_VALUE(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(s: CharSequence, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yÑ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
  var m = Test()
  return if((m.i)++ == 5 && ++(m.i) == 7 && m.tt() == 26) "OK" else "fail"
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class a {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.r()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun x() : Int = 50
yY// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun box(): String {
    val x = 2
    return when(x) {
        in (1..3) -> "OK"
        else -> "fail"
    }
}
}

fun main(args: Array<String>) {
    X().foo()
}
y.// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: AsAny) {
    X().foo()
}
y7// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, String: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {
    log += a.toString() + ";"
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(a: Any): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y ¸// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    fun test(p: T): T {
        return p
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    i().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, Z: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y-// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(s: String?) {
    X().foo()
}
y Ê// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    fun nulled(): T? = z
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class list3 {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y8// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): Int {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y-// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Test) {
    X().foo()
}
yA// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): Z<String, X> {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y	// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        bar()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, xs: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yE// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    currentAccountId().foo()
}
y/// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return x.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().String()
}
y<// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T : Any, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Point.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yC// Original bug: KT-10835
// !LANGUAGE: -NormalizeConstructorCalls

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y;// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    String().foo()
}
yd// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            {
    val map = HashMap<K, V>()
    val old = map.put(k, v)
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y>// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: ByteArray.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y;// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Father() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): b {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: Outer, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        val next = C(c)
        c++
        return next
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y>// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().Box<Long>(-1)
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, Any: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> T(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        A()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : B() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yÜ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            {
    A.Nested().nestedA()
    A.Nested().Inner().innerA()
    A.companionA()
    return "OK"
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// KJS_WITH_FULL_RUNTIME
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: i.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> Data): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Foo<String>) {
    X().foo()
}
y?// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : FooStr("OK") {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    }

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    open inner class Y
}

fun main(args: Array<String>) {
    X().foo()
}
y6class X {
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


// Original bug: KT-10835
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    X().foo()
}

fun main(args: Array<String>) {
    }
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y Ù// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() 
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: .() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y0// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()

y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() }
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R: R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: , block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainargs: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo(
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> ): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y-// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args:Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() ->R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

funmain(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }


fun main(args: Array<String>) {
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> (receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.()-> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : () {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


 X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) 
    X().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(: Array<String>) {
    X().foo()
}
y  // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X 

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
     inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y)// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object  Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R):  {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object :Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X).foo()
}
y.// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    returnreceiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() 
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X()foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R>with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class  {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner  Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y0// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Yfun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2 {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo)
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>){
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open  class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y0// Original bug: KT-10835
// Duplicated bug: KT-10835

fun  with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: <String>) {
    X().foo()
}
y ‡// Original bug: KT-10835
// Duplicated bug: KT-10835




class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y) {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiverblock()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y.// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return .block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return 
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block)
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()



class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    openinner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun<T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object: Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835


fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        (X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo( {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y0// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
             : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R) R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) 
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


classX {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) 
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y.// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.( -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    funfoo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main {
    X().foo()
}
y-// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: ): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X{
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.) -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block(
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

 <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R 


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y(){}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X() {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y-// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y ¬// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}




fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String> {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class 

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R     
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open innerclass Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y( {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y-// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y+// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    ().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block:T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y)// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ) {
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }}
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T,block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X 
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) 
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver:T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, > with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, ): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object :  {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X.foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() 
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ArrayString>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R):R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T. -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R{    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2: R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T,R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args Array<String>) {
    X().foo()
}
y,// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
     class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner classY

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {X().foo()
}
y0// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
     receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.()  R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}


y/// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    .foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, : T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}fun main(args: Array<String>) {
    X().foo()
}
y Í// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

 main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R {    
    return receiver.block()
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {

        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
ˇˇ