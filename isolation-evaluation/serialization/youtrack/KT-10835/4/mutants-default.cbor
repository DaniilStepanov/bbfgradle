øiexportTaggdefaultnoriginalSampley$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
gmutantsüyZ// Original bug: KT-10835
// Duplicated bug: KT-10835


val v = false
try
{fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()}
catch(e: Exception){}
finally{}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yZ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()


val w = false
try
{class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}}
catch(e: Exception){}
finally{}


fun main(args: Array<String>) {
    X().foo()
}
yt// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}


val l = false
if (l) {fun main(args: Array<String>) {
    X().foo()
}} else {fun main(args: Array<String>) {
    X().foo()
}}

yg// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = 
val f = true
when (f) {
 true -> {receiver.block()}
 else -> {receiver.block()}
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yY// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) 
val i = true
try
{{
    X().foo()
}}
catch(e: Exception){}
finally{}

yY// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <
val d = false
when (d) {
 true -> {T}
 else -> {T}
}
, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yE// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, 
val t = true
if (t) {R} else {R}
> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yc// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(
val u = false
when (u) {
 true -> {receiver: T}
 else -> {receiver: T}
}
, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yg// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, 
val y = true
when (y) {
 true -> {block: T.() -> R}
 else -> {block: T.() -> R}
}
): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yM// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = 
val m = false
if (m) {receiver} else {receiver}
.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y_// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.
val z = false
when (z) {
 true -> {block()}
 else -> {block()}
}


class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yj// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    
val x = false
when (x) {
 true -> {open inner class Y}
 else -> {open inner class Y}
}


    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yê// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    
val u = true
if (u) {fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }} else {fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }}

}

fun main(args: Array<String>) {
    X().foo()
}
yW// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(
val d = true
if (d) {args: Array<String>} else {args: Array<String>}
) {
    X().foo()
}
yZ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    
val f = false
try
{X().foo()}
catch(e: Exception){}
finally{}

}
yX// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): 
val w = true
when (w) {
 true -> {R}
 else -> {R}
}
 = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yI// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.
val g = true
if (g) {block} else {block}
()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yY// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() 
val d = true
try
{{
        with2(X()) {
            object : Y() {}
        }
    }}
catch(e: Exception){}
finally{}

}

fun main(args: Array<String>) {
    X().foo()
}
yH// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    
val a = false
if (a) {X()} else {X()}
.foo()
}
yZ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().
val u = false
try
{foo()}
catch(e: Exception){}
finally{}

}
yZ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        
val b = false
try
{with2(X()) {
            object : Y() {}
        }}
catch(e: Exception){}
finally{}

    }
}

fun main(args: Array<String>) {
    X().foo()
}
yF// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    
val v = false
if (v) {X} else {X}
().foo()
}
yH// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().
val f = false
if (f) {foo} else {foo}
()
}
yZ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: 
val g = false
try
{T}
catch(e: Exception){}
finally{}
, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yI// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        
val l = true
if (l) {with2} else {with2}
(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yY// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: 
val e = true
try
{Array}
catch(e: Exception){}
finally{}
<String>) {
    X().foo()
}
yl// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) 
val k = false
if (k) {{
            object : Y() {}
        }} else {{
            object : Y() {}
        }}

    }
}

fun main(args: Array<String>) {
    X().foo()
}
yY// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> 
val i = false
when (i) {
 true -> {R}
 else -> {R}
}
): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yH// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(
val a = false
if (a) {X()} else {X()}
) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yY// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) 
val g = true
try
{{
            object : Y() {}
        }}
catch(e: Exception){}
finally{}

    }
}

fun main(args: Array<String>) {
    X().foo()
}
yE// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: 
val e = true
if (e) {T} else {T}
.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yZ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(
val a = false
try
{X}
catch(e: Exception){}
finally{}
()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yZ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            
val j = false
try
{object : Y() {}}
catch(e: Exception){}
finally{}

        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yZ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            
val n = false
try
{object : Y() {}}
catch(e: Exception){}
finally{}

        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yY// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<
val x = true
try
{String}
catch(e: Exception){}
finally{}
>) {
    X().foo()
}
yg// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            
val a = false
when (a) {
 true -> {object : Y() {}}
 else -> {object : Y() {}}
}

        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yY// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : 
val v = true
try
{Y}
catch(e: Exception){}
finally{}
() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yF// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : 
val l = false
if (l) {Y} else {Y}
() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

(fun main(args: Array<String>) {
    X().foo()
})
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().(foo)()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (T).() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()!!

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}!!
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X!!()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y!!() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): (R)? = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: (T)?, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (T.() -> R)?): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: (Array<String>)?) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> (R)?): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (T)?.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<(String)?>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : (Y)?() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver!!.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X()!!.foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T!!.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T{
            object : Y() {}
        } R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) ,
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.String

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<block()>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T{}() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() .
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun {
    X().foo()
}T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) <
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R{: R = receiver.block()

class X )
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open X class Y

    fun foo() {
        with2(inner()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, RT.() -> R with2(receiver: T, block: >): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X X

fun main(args: Array<String>) {
    {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T<String> block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array,) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, {
            object : Y() {}
        }> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) R
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    Array<String>
}

fun main(args: }) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: ), block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>T {
    X().foo()
}
y$receiver
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = // Original bug: KT-10835.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) foo()
    X().{
}
y$// Original bug: KT-10835
)

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y(// Duplicated bug: KT-10835 {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.class()

block X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = }.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
receiver
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R)Y R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : :() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): Y = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : R() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: object.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            T : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo(: {
        with2(X()) {
            object ) Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> Y()(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : with2 {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.({ -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) )
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): {
            object : Y() {}
        } = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) R
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, (receiver: T, block: T.() -> R)> with2R: R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block))

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X((.foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open <String> class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Arrayinner) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: {.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) T
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2({}) {
            object : Y() X()
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(}, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        receiver: T
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: :.() -> R)T R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()object : Y() {} {
            )
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, (> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(XR)) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            }
        }
    object : Y() {}
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): () = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().fooR
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.X -> R): R = receiver.block()

class () {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.blockmain

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun ()(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: with2, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        T(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.object : Y() {}

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            block()
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, RT with2(receiver: >, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Tfun foo() {
        with2(X()) {
            object : Y() {}
        }
    }() -> R): R = receiver.block()

class X {
    open inner class Y

    .
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()Y() {
            object : ) {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : {() Y}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: {
        with2(X()) {
            object : Y() {}
        }
    }.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() T
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: (, block: T.() -> R): R = receiver.blockT)

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
Array<String>

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: // Duplicated bug: KT-10835) {
    X().foo()
}
y$// Original bug: KT-10835
)

fun <T, R> with2(receiver: T, block: T.() -> R// Duplicated bug: KT-10835: R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> with2): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        R(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.<) -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array(String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X<String>)) {
            object : Y() {}
        }
    }
}

fun main(args: Array() {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun Y()T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : < {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: R, block: T.() -> R): T = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    )
}

fun main(args: Array<String>) {
    X().foo(fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object String Y() {}
        }
    }
}

fun main(args: Array<:>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, (): T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun fooblock {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open {
            object : Y() {}
        } class Y

    fun foo() {
        with2(X()) inner
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: X.() -> R): R = receiver.block()

class T {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: {
            object : Y() {}
        }, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) T
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun ArrayT, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: <<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: <, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ArrayTString>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

()

class X {
    open inner class Y

    fun foo() {
        with2(Xfun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: :, blockT T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: receiver.() -> R): R = T.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        <String>
    }
}

fun main(args: Arraywith2(X()) {
            object : Y() {}
        }) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}receiver: T, block: T.() -> R): R = receiver.block()

(

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun ( with2<T, R>receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) String
            object : Y() {}
        }
    }
}

fun main(args: Array<{>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    foo() foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().fun
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2{: R = receiver.block()

class X (receiver: T, block: T.() -> R)
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    T
}

fun main(args: Array<String>) {
    X().foo()
}
y$receiver: T
// Duplicated bug: KT-10835

fun <T, R> with2(// Original bug: KT-10835, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun fooY {
        with2(X()) {
            object : ()() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo(} {
        with2(X()) {
            object : Y() {}
        }
    }
)

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun object() {
        with2(X()) {
            foo : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, }: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
block
y$// Original bug: KT-10835
}

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
// Duplicated bug: KT-10835
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() ) R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>-> {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().fooT)
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, (): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2block: T.() -> RX()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: {
    X().foo()
}, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) T
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(block, block: T.() -> R): R = receiver.receiver: T()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() foo
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().{()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun receiver.block()T, R> with2(receiver: T, block: T.() -> R): R = <

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.foo()()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().block
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> X): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    R().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> :): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object R Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: open.() -> R): R = receiver.block()

class X {
    T inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : {() {}
        }
    }
}

fun main(args: Array<String>) Y
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: }): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        T.() -> R
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> X().foo()): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    R
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R } receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
=
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiverreceiver.block() T, block: T.() -> R): R = :

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: (), block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun fooT {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foowith2(X()) {
            object : Y() {}
        }) {
        (
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: TT.() -> R block: ,): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> Array<String>): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: R) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun (args: Array<String>)() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainfoo {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        fun
    }
}

with2(X()) {
            object : Y() {}
        } main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: R.() -> T): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(T: receiver, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): String = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<R>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: =.() -> R): R T receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): object : Y() {} = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            R
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    args inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(open: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

{
            object : Y() {}
        } X {
    open inner class Y

    fun foo() {
        with2(X()) class
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.Array<String> -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ()) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <with2, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        T(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.}()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        block
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = object : Y() {}.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            receiver
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, Y): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : block: T.() -> R() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <), R> with2(receiver: T, block: T.() -> R): R = receiver.block(T

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <(receiver: T, block: T.() -> R), R> with2T: R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <{
        with2(X()) {
            object : Y() {}
        }
    }, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() T
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = ()

class X {
    open inner class Y

    fun foo() {
        with2(Xreceiver.block()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainfoo()args: Array<String>) {
    X().(
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> (): R = receiver.block()

class X {
    open inner class Y

    fun fooR) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    ()

    fun fooopen inner class Y {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, RString with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<>>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: ), block: T.(T -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y(String {}
        }
    }
}

fun main(args: Array<)>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, Rwith2 with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        >(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        foo(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().with2()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(XX().foo())) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    (
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

) <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>fun {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: X, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    T().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(object : Y() {}, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            receiver: T
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T)(. -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    : class Y

    fun foo() {
        with2(X()) {
            object open inner Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <,T R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : <() {}
        }
    }
}

fun main(args: ArrayYString>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ()) {
    XArray<String>.foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> X(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    with2().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = X().block()

class X {
    open inner class Y

    fun foo() {
        with2(receiver) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() (
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo{)
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block{
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
} T.() -> R): R = receiver.block()

class X :

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X fun
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

{ main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(:: T, block: T.() -> R)receiver R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, :> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(argsR Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}(receiver: T, block: T.() -> R): R = receiver.block()

class X with2

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2X() {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    (X()).foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: (, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun fooT) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R.: R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X())foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun ) with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo(<T, R>
}
y$// Original bug: KT-10835
(X())

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2// Duplicated bug: KT-10835 {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun class with2(receiver: T, block: T.() -> R): R = receiver.block()

<T, R> X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: {
            object : Y() {}
        }.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) T
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> RR: ) = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

String main(args: Array<fun>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

T <T, R> with2(receiver: fun, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> Rfun main(args: Array<String>) {
    X().foo()
}: R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

)
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : .() {}
        }
    }
}

fun main(args: Array<String>) {
    X()Yfoo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R foo() receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().=
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class {

    fun foo() Y
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() X
}

fun main(args: Array<String>) {
    {
        with2(X()) {
            object : Y() {}
        }
    }().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

{

class X {
    open inner class Y

    fun foo() fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        :
    }
}

fun main(argswith2(X()) {
            object : Y() {}
        } Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: (args: Array<String>), block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainT {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (args: Array<String>).() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainT {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block(class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

)

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

( <T, R> with2(receiver: T, block: T.() -> R): R = receiver.blockfun)

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2{
            object : Y() {}
        }: R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) (receiver: T, block: T.() -> R)
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.}) -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
(
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    { foo() fun
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {{
        }
    }
}

fun main(args: Array<String>) }
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.blockfun foo() {
        with2(X()) {
            object : Y() {}
        }
    }

class X {
    open inner class Y

    ()
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun foo with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun <T, R>() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner Y() Y

    fun foo() {
        with2(X()) {
            object : class {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun (mainargs: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = X

class receiver.block() {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

Y() <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : fun {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.(()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().fooblock)
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <(, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2TX()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(.: T, block: T.() -> R): R = receiverreceiverblock()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.Array<String>()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: block) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> RY(): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : ) {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$fun main(args: Array<String>) {
    X().foo()
}
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

// Original bug: KT-10835
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, Y()): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : block: T.() -> R {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(XY) {
            object : ()() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.)()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>block {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() <}
        }
    }
}

fun main(args: Array{String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <Array, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: T<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(R, block: T.() -> R): receiver: T = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) String
    }
}

fun main(args: Array<{
            object : Y() {}
        }>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <:, R> with2(receiver: T, block: T.() -> R)T R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <(, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(XT)) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: (, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2TX()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): with2 = receiver.block()

class X {
    open inner class Y

    fun foo() {
        R(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: block: T.() -> R, T): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        X(with2()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

:

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(argsfun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block() Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block) T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X(:.foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun main(args: Array<String>) {
    X().foo()
}
}

fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): ( = receiver.blockR)

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
{

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) // Duplicated bug: KT-10835
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> String): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<R>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: args: Array<String>, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(T) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, (> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun fooR) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

class

class X {
    open inner fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block() Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): Array = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: R<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }.block()

class X {
    open inner class Y

    receiver
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() Y R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : ->() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> Y): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : R() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: ).() -> R): R = receiver.block(T

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2Treceiver: T, block: (.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, object : Y() {}> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            R
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

: X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object class Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: class): R = receiver.block()

T.() -> R X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.object : Y() {}) -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            (
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): foo() = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().R
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() )}
        }
    }
}

fun main(args: Array<String>) {
    X({.foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Yfoo) {}
        }
    }
}

fun main(args: Array<String>) {
    X().(()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R String receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<=>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.Array -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ()<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): Y() = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : R {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun receiverT, R> with2(<: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun fooT, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().<()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        (args: Array<String>)
    }
}

fun mainwith2(X()) {
            object : Y() {}
        } {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = foo.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().receiver()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()String {
            object : Y() {}
        }
    }
}

fun main(args: Array<)>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<{>) String
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        args: Array<String>
    }
}

fun main(}) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

{

fun main(args: Array<String>) class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    ( inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    Xopen).foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> main): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun R(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y(fun main(args: Array<String>) {
    X().foo()
} {}
        }
    }
}

)
y$// Original bug: KT-10835
class

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner // Duplicated bug: KT-10835 Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        (args: Array<String>)
    }
}

fun main} {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X String

fun main(args: Array<{
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: Tclass X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
} block: T.() -> R): R = receiver.block()

,

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() ) R): R = receiver.block(->

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ()) {
    X().fooArray<String>
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo<String>) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array() {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        object(X()) {
            with2 : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> )(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()with2 {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <), R> with2(receiver: T, block: T.() -> RT: R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T) R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo(,
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> <String>): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ArrayR) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: ., block: T.() -> R): R = receiverTblock()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Yargs) {}
        }
    }
}

fun main((: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> {
    X().foo()
}): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) R
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X(object : Y() {}) {
            )
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> fun main(args: Array<String>) {
    X().foo()
}): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

R
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        <String>
    }
}

fun main(args: Array}) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun ) with2(receiver: T, block: T.() -> R): R = receiver.block(<T, R>

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: with2(X()) {
            object : Y() {}
        }.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        T
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: TR block: T.() -> ,): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2:receiver( T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun ( with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo<T, R>) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Array<String>): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: T.() -> R) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> Y()): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : R {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2with2: R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        (receiver: T, block: T.() -> R)(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> >): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<StringR) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(Array: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: receiver<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> }(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
with2

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object main Y() {}
        }
    }
}

fun :(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(()) {
            object : YX() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.main()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun block(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() :
}

fun main(args{
        with2(X()) {
            object : Y() {}
        }
    } Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class } {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {X
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foofoo) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().(()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(.: Array<String>) {
    X()argsfoo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: X<String>) {
    Array().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
String

fun main(args: Array<}>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y(() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo)
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class <String> {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ArrayX) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2Arrayreceiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: (<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2Treceiver: (, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, blockblock() T.() -> R): R = receiver.:

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, {: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) block
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: )<String>) {
    X().foo(Array
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    foo().X()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: ().() -> R): R = receiver.block()

class X {
    open inner class Y

    fun fooT {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: String<Array>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, {
            object : Y() {}
        }): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) block: T.() -> R
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun ( with2(receiver: T, block: T.<T, R>) -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R foo receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().=()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        (with2X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$.
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T// Original bug: KT-10835() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = open inner.block()

class X {
    receiver class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<foo()>) {
    X().String
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, }> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
R

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

X X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    class().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R}: R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
)
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun fun main(args: Array<String>) {
    X().foo()
}T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

<
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun Array with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: <T, R><String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    ()
}

fun main(args: Array<String>) {
    Xfun foo() {
        with2(X()) {
            object : Y() {}
        }
    }.foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.Y) -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : (() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: block, block: T.() -> R): R = receiver.T()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, {
    X().foo()
}: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) block
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <receiver, R> with2(receiver: T, block: T.() -> R): R = T.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().)(foo
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(: R = receiver.block()

class X {
    open inner class Y

    fun foo(receiver: T, block: T.() -> R)) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block())

class X {
    open inner class Y

    fun foo( {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.{
    X().foo()
}()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) block
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: Y(), block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : T {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, with2> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        R(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(<String>: Arrayargs) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    main

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun open inner class Y(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: X.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(T()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): inner = receiver.block()

class X {
    open R class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(Array<String>) {
            object : Y() {}
        }
    }
}

fun main(args: X()) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver{} T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() :
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            >
        }
    }
}

fun main(args: Array<Stringobject : Y() {}) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, T> with2(receiver: T, block: R.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main((: Array<String>) {
    Xargs).foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): {} = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() R
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : }() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
Y
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T{() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) .
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    Array inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: open<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}, block: T.() -> R): R = receiver.block()

class X T

fun main(args: Array<String>) {
    X().foo()
}
y$()
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y// Original bug: KT-10835 {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

with2(X()) {
            object : Y() {}
        }

class X {
    open inner class Y

    fun foo() {
        fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X )

fun main(args: Array<String>) {
    X().foo({
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> (args: Array<String>)): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainR {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y({ )}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun object : Y() {}() {
        with2(X()) {
            foo
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

{ X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) class
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): fun main(args: Array<String>) {
    X().foo()
} = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

R
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Arrayfoo()String>) {
    X().<
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo{
            object : Y() {}
        } {
        with2(X()) ()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.Y

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : block()() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> )): R = receiver.block()

class X {
    open inner class Y

    fun foo(R {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiverwith2(X()) {
            object : Y() {}
        } T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        :
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo(( {
        with2(X()) {
            object : Y)) {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() block R): R = receiver.->()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T. block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X(),foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: args.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(T: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, R: T.() -> R): block = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2X().foo(): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    (receiver: T, block: T.() -> R)
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.with2

class X {
    open inner class Y

    fun foo() {
        block()(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver( T, block: T.:) -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : }() {}
        }
    Y
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

T <T, R> with2(receiver: T, block: fun.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun blockT, R> with2(receiver: T, block: T.() -> R): R = receiver.<()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, inner> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open R class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
} <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

fun

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> class): R = receiver.block()

class X {
    open inner R Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.= -> R): R () receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Array() {}
        }
    }
}

fun main(args: Y<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, blockY() T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : : {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Array): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: T.() -> R<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}, block: T.() -> R): R = receiver.block()

T

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2foo {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().(X())()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: fun main(args: Array<String>) {
    X().foo()
}, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

T
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): } = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
R
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, (): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainblock: T.() -> Rargs: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Tfun() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

. main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2()()) {
            object : Y(X {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) <String>
    }
}

fun main(args: Array{
            object : Y() {}
        }) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2({
            object : Y() {}
        }, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) receiver: T
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    }

    fun foo() {
        with2(X()) {
            object : Y() {}
        open inner class Y
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: R, block: T.() -> T): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun .T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X()<foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> <): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ArrayRString>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.({ -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) )
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, class> with2(receiver: T, block: T.() -> R): R = receiver.block()

R X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() Array<String>
}

fun main(args: {
        with2(X()) {
            object : Y() {}
        }
    }) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.blockY())

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : ( {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R)() R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y: {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: ), block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X(T) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: :, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object T Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T..) -> R): R = receiver(block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = ().block()

class X {
    open inner class Y

    fun foo() {
        with2(Xreceiver) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, foo> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().R()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.: -> R)() R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2)receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo((
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, (> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().fooR)
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        args: Array<String>(X()) {
            object : Y() {}
        }
    }
}

fun main(with2) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.(fun main(args: Array<String>) {
    X().foo()
} -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

)
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiverfun main(args: Array<String>) {
    X().foo()
}block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

.
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<X()>) {
    String.foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo((X()) {
        with2) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.{()

class X {
    open inner class Y

    fun foo() block
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: {.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() T
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo{
    X().foo()
}) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) (
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) Y
            object : {() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

// Duplicated bug: KT-10835

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, blockX T.() -> R): R = receiver.block()

class : {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: X().foo().() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    T
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: with2.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        T(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X(foo.)()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (.T) -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <), R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()T {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2X().foo() {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    (X())
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(Y, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : receiver: T() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(Xfoo) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().()()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    foo

    fun open inner class Y() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : X()() {}
        }
    }
}

fun main(args: Array<String>) {
    Y.foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() ) R->: R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    {
            object : Y() {}
        }

    fun foo() {
        with2(X()) open inner class Y
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T)() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo(.
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> object : Y() {}(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            with2
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    Y

    fun foo() {
        with2(X()) {
            object : open inner class Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiverYblock()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : .() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X(foo().)
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() X()
        with2({) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}.() -> R): R = receiver.block()

class X T

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): args = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(R: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.}

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
block()
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: object : Y() {}): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            T.() -> R
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$()
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.// Original bug: KT-10835 -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.)()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo(block
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun with2T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        <(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(<String>()) {
            object : Y() {}
        }
    }
}

fun main(args: ArrayX) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = foo().block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().receiver
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object X().foo() Y() {}
        }
    }
}

fun main(args: Array<String>) {
    :
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <fun, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

T main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() String
}

fun main(args: Array<{
        with2(X()) {
            object : Y() {}
        }
    }>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: object : Y() {}, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            T
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.with2) -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        ((X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$<String>
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array// Original bug: KT-10835) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: ().() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    XT.foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun receiver with2(receiver: T, block: T.() -> R): R = <T, R>.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = Y.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : receiver() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() fun main(args: Array<String>) {
    X().foo()
} R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

->
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun T with2(receiver: <T, R>, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block(}

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {)
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
} = receiver.block()

class X R

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        >
    }
}

fun main(args: Array<String}) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.(( -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X)).foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: Tclass block: T.() -> R): R = receiver.block()

, X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, RX() with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    >.foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: args: Array<String>.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(T) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<)>) {
    X().foo(String
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open Y class Y

    fun foo() {
        with2(X()) {
            object : inner() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: {, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) T
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class ( {
    open inner class Y

    fun foo() {
        with2XX()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <Twith2(X()) {
            object : Y() {}
        } R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        ,
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>foo {
    X().)()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.open inner

class X {
    block() class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.blockinner

class X {
    open () class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open object : Y() {} class Y

    fun foo() {
        with2(X()) {
            inner
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2Y(): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : (receiver: T, block: T.() -> R) {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, RY with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : >() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <TX() R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    ,.foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner Array<String> Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: class) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, RR with2(receiver: T, block: T.() -> R): > = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y} {}
        ()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : () {}
        }
    }
}

fun main(args: Array<String>) {
    XY().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() ( R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X->).foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) )
    }
}

fun main(args: Array<String>) {
    X({
            object : Y() {}
        }.foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: (<String>) {
    X().fooArray)
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    foo
}

fun main(args: Array<String>) {
    X().fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) }
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
{
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, :block T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <Y, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : T() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

Array<String>

fun main(args: class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, {}): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() block: T.() -> R
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> RX(): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open X() class Y

    fun foo() {
        with2(inner) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(Xfoo)) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().(()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) }
            object : Y() {}
        }
    {
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<(>) {
    XString).foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

foo()

fun main(args: Array<String>) {
    X().class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiverobject : Y() {}block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            .
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, class: T.() -> R): R = receiver.block()

class X {
    open inner block Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Tfun() -> R): R = receiver.block()

class X {
    open inner class Y

    . foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    ()X.foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    }.foo()
X()
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y{) {}
        }
    }
}

fun main(args: Array<String>) (
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): X = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(R()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            Array : Y() {}
        }
    }
}

fun main(args: object<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

<String>

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Arrayfun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): ) = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo(R
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
()

fun main(args: Array<String>) {
    X}.foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.X() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        String
    }
}

fun main(args: Array<}>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Y): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : T.() -> R() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): ( = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainRargs: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: X(), block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(T) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}): R = receiver.block()

T.() -> R

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Y.() -> R): R = receiver.block()

class X {
    open inner class T

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, X> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    R().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() String
        }
    }
}

fun main(args: Array<{}>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X .

fun main(args: Array<String>) {
    X(){
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun fooString) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<(>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X{
            object : Y() {}
        })) (
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y;// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<UnsupportedOperationException>) {
    X().foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> x(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = Test().x.string

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, T> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: String): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yú// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object: ClosedRange<A> {
    override val endInclusive: A
        get() = that
    override val start: A
        get() = this@rangeTo
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y)// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> String): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = i.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun T() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yL// Original bug: KT-10835
// Duplicated bug: KT-10835

fun box(): String {
    val a1 = A("abc")
    if (a1.prop != "abc") return "fail0: ${a1.prop}"
    if (a1.parentProp != "1") return "fail1: ${a1.parentProp}"
    if (a1.arg != 1) return "fail1': ${a1.arg}"
    if (sideEffects != "zero#first#second#third") return "fail2: ${sideEffects}"

    sideEffects = ""
    val a2 = A(123)
    if (a2.prop != "123#int") return "fail3: ${a2.prop}"
    if (a2.parentProp != "2") return "fail4: ${a2.parentProp}"
    if (a2.arg != 2) return "fail5': ${a2.arg}"
    if (sideEffects != "zero#first#second#fourth") return "fail6: ${sideEffects}"

    sideEffects = ""
    val a3 = A(false)
    if (a3.prop != "") return "fail7: ${a3.prop}"
    if (a3.parentProp != "2") return "fail8: ${a3.parentProp}"
    if (a3.arg != 2) return "fail9': ${a3.arg}"
    if (sideEffects != "zero#first#second") return "fail10: ${sideEffects}"
    return "OK"
}

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y ˜// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun bar(): Int? = foo() as? Int
}

fun main(args: Array<String>) {
    X().foo()
}
y+// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, FooClass> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = it.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(y: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main() {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Char.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> E): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y,// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y("O", "K") {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
        filter {
            it > 10
        }
    }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = String.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2("OK") {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, Int: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y)// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(String()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: test1<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().typeName(ArrayList<Int>())
}
y>// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    class A(val a: Int = 0, val b: String = "a")

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y-// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            {
    return "" + this
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y*// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Boolean() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: zero.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: fn<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y-// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().joinToString()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(count: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yT// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    var aByte: Byte? = 0
    var bByte: Byte = 0

    var aShort: Short? = 0
    var bShort: Short = 0

    var aInt: Int? = 0
    var bInt: Int = 0

    var aLong: Long? = 0
    var bLong: Long = 0

    var aFloat: Float? = 0.0f
    var bFloat: Float = 0.0f

    var aDouble: Double? = 0.0
    var bDouble: Double = 0.0

    if (aByte != null) aByte--
    bByte--
    if (aByte != bByte) return "Failed post-decrement Byte: $aByte != $bByte"

    if (aByte != null) aByte++
    bByte++
    if (aByte != bByte) return "Failed post-increment Byte: $aByte != $bByte"

    if (aShort != null) aShort--
    bShort--
    if (aShort != bShort) return "Failed post-decrement Short: $aShort != $bShort"

    if (aShort != null) aShort++
    bShort++
    if (aShort != bShort) return "Failed post-increment Short: $aShort != $bShort"
    
    if (aInt != null) aInt--
    bInt--
    if (aInt != bInt) return "Failed post-decrement Int: $aInt != $bInt"

    if (aInt != null) aInt++
    bInt++
    if (aInt != bInt) return "Failed post-increment Int: $aInt != $bInt"

    if (aLong != null) aLong--
    bLong--
    if (aLong != bLong) return "Failed post-decrement Long: $aLong != $bLong"

    if (aLong != null) aLong++
    bLong++
    if (aLong != bLong) return "Failed post-increment Long: $aLong != $bLong"

    if (aFloat != null) aFloat--
    bFloat--
    if (aFloat != bFloat) return "Failed post-decrement Float: $aFloat != $bFloat"

    if (aFloat != null) aFloat++
    bFloat++
    if (aFloat != bFloat) return "Failed post-increment Float: $aFloat != $bFloat"

    if (aDouble != null) aDouble--
    bDouble--
    if (aDouble != bDouble) return "Failed post-decrement Double: $aDouble != $bDouble"

    if (aDouble != null) aDouble++
    bDouble++
    if (aDouble != bDouble) return "Failed post-increment Double: $aDouble != $bDouble"

    return "OK"
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun box(): String =
        Outer("O").Inner("K").z
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> IFoo): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X(i).foo()
}
y,// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().valThisRef1()
}
y+// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class Callback {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: Int.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().Outer()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(A()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yÖ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo(b: Boolean): String {
    return if (b) {
        "fail: reached unexpected code at line 3"
    } else if (false) {
        "fail: reached unreachable code at line 5"
    } else if (true) {
        "OK"
    } else if (true) {
        "fail: reached unreachable code at line 9"
    } else if (b) {
        "fail: reached unreachable code at line 11"
    } else {
        "fail: reached unreachable code at line 13"
    }
}
}

fun main(args: Array<String>) {
    X().foo()
}
y.// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (Result<T>) -> Unit): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> f(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y ı// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        Z()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
ys// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    IntArray(5) { i ->
        if (i == 3) return
        i
    }
    throw AssertionError()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Int() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: () -> Unit): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(s()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().test()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(fill()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class int {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<T>) {
    X().foo()
}
y≥// Original bug: KT-10835
// Duplicated bug: KT-10835

fun box(): String {
    var xs by Del(intArrayOf(1, 2, 3))
    var sum = 0
    for (x in xs) {
        sum = sum * 10 + x
        xs = intArrayOf(4, 5, 6)
    }
    return if (sum == 123) "OK" else "Fail: $sum"
}

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yf// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun test(x: Any?): String {
    if (x !is Int) return "Fail 1"
    when (x) {
        0 -> return "OK"
        else -> return "Fail 2"
    }
}
}

fun main(args: Array<String>) {
    X().foo()
}
y)// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : String() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<Long>) {
    X().foo()
}
yü// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            {
    var prop: Int by Delegate()
    if (prop != 1) return "fail get"
    prop = 2
    if (prop != 2) return "fail set"
    return "OK"
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class En

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(s2) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: fooB<String>) {
    X().foo()
}
y)// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(KModel()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
    if (A().a() != 10) return "Fail"

    return "OK"
}
}

fun main(args: Array<String>) {
    X().foo()
}
y.// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = tail.reverse(where + head)

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yG// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {
    operator fun invoke(): String
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    y().foo()
}
y*// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): entries = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.s()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun box() : String {
    return if (B().a == 239) "OK" else "fail"
}

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): A = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, val x: String): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): run = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X(E.I)) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y)// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: String, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    enum class Bar {
    ONE,
    TWO
}

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yJ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    inlineCall {
        width += width
    }.foo()
}
yß// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {
    NORTH {
        val someSpecialValue = "OK"

        override fun f() = someSpecialValue
    };


    abstract fun f():String
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Long() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(`in`: String): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): t = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y(// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: KProperty<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) { i, (id, name, distance) -> result += "$id$name$distance" }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yB// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            {
        contents.addAll(rhs.contents)
    }
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    data class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        expected(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(null) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y ˆ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    RED(0xFF0000),
    GREEN(0x00FF00),
    BLUE(0x0000FF)
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.test()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y(// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun rangeTo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().run {
    { it }
}
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        {res += "K"; "K"}()
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: B<String>) {
    X().foo()
}
yå// Original bug: KT-10835
// Duplicated bug: KT-10835

fun box(): String {
    val s = StringBuilder()
    for ((index, x) in xs.withIndex()) {
        return "Loop over empty list should not be executed"
    }
    return "OK"
}

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): l = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: foo<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(MaxS()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yp// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    // KJS_WITH_FULL_RUNTIME
public interface LoggerAware {
    public val logger: StringBuilder
}

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    override class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<IC>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object: Iterator<T> {
    private var cur: FList<T> = this@iterator

    override public fun next(): T {
        val res = cur.head
        cur = cur.tail
        return res
    }
    override public fun hasNext(): Boolean = !cur.empty
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y ˆ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        R(0)
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(foo()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().an()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<published>) {
    X().foo()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        String(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.foo(1)

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y ÿ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    val method : () -> Unit?
}

fun main(args: Array<String>) {
    X().foo()
}
y.// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(arrayOf("OK")) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2() {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: () -> T): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y<// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = list.sortWith(Comparator(comparatorFun))

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> i): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : A() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) { outerProp + arg }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class Int {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y*// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: hasNext, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            {
    return box is Box<*>;
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) { "" }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y)// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(Value<T>) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(val x: IFoo) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, s: String): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yË// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            {
    return when (x) {
        -4 -> 9
        -1 -> 10
        0 -> 11
        1 -> 12
        4 -> 13
        5 -> 14
        6 -> 15
        7 -> 16
        8 -> 17
        9 -> 18
        else -> 19
    }
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yl// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Callable {
                override fun call(b: Boolean) {
                    if (b) {
                        x()
                    } else {
                        try {
                            x()
                        } catch(t: Throwable) {
                        }
                    }
                }
            }
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(peek()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&//adopted snippet from kdoc
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Long<String>) {
    X().foo()
}
y+// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(toUShort()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): foo2 = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: Collection<String>, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Base() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(9u) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): B = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(0.0F) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(n: Int, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): Int = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y1// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : AssertionError() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<Int>) {
    X().foo()
}
y*// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = funInCompanion.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y*// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T : Number> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y3// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    kotlin.reflect.KProperty
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {"$a:$b;"}
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {res+="O"; "O"}
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yV// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    if (x < y) {
        throw Error()
    }
    return "${y}K"
}
y È// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

open class A<T : Number> {
    open fun foo(t: T) = "A"
}

fun main(args: Array<String>) {
    X().foo()
}
y®// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object Foo2 {
    operator fun Any?.get(key: String) = "OK"
    operator fun Any?.set(key: String, value: String)  {
        result = value
    }
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    private class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y√// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {

    val commands : MutableMap<String, String> = HashMap()

    commands["c1"]  = "239"
    if(commands["c1"] != "239") return "fail"

    commands["c1"] += "932"
    return if(commands["c1"] == "239932") "OK" else "fail"
}
}

fun main(args: Array<String>) {
    X().foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: a<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    Test().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: A): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun i(args: Array<String>) {
    X().foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: i<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    10.toShort()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    R.test(R(0))
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Foo() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(2) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: list4<String>) {
    X().foo()
}
y(// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(list3()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y+// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): IntArray = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) { fld }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yy// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    val expected = T4(true, true, true, " ")
    if(reformat("", true, true, true, " ") != expected) return "fail"
    if(reformat("", true, true, true) != expected) return "fail"
    if(reformat("", true, true) != expected) return "fail"
    if(reformat("", true) != expected) return "fail"
    if(reformat("") != expected) return "fail"
    return "OK"
}
yN// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    operator fun getValue(thisRef: Any?, kProp: Any) = x

    operator fun setValue(thisRef: Any?, kProp: Any, value: T) {
        x = value
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            { inner = i }
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().next()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: zero<String>) {
    X().foo()
}
y(// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(Class()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// WITH_RUNTIME
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y	// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) { x = "OK" }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y,// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> TextField): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y*// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = AssertionError.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.Z()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y-// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        AssertionError(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Z<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    enum class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : ("Z1") {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y/// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): CharSequence = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y ’// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open fun foo() = "OK"
}

fun main(args: Array<String>) {
    X().foo()
}
y-// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : SimpleGame() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y(// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : IFoo<L> {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, val s: Any): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(l: Int, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().C()
}
yi// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Callback {
                    override fun invoke() = ok
                }
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y6// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class maxLongStringSingle {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yM// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            private companion object {
        fun ok() = "OK"
    }
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y9// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object {
        val ok = "OK"
    }
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        UnsupportedOperationException("not implemented")
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y(// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(value()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y)// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, IcLong> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y>// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) { assertEquals(o === Int.Companion, true) }
y/// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().listOf("O", "K")
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> run): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun String() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y
// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) { Test.ok() }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <P : Any> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Any) {
    X().foo()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: String<String>) {
    X().foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        f(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y¬// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {
    var inner = 1
    operator fun getValue(t: Any?, p: KProperty<*>): Int = inner
    operator fun setValue(t: Any?, p: KProperty<*>, i: Int) { inner = i }
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// WITH_RUNTIME

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y0// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(19, "something") {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): Test = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> foo(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = log.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y,// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: getPlayer, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : this() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yA// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    return foo { if (v != null) v else b }
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X(s)) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        box(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: String) {
    X().foo()
}
y4// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Base({ Host.ok() }) {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: () -> String): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
          super.method()
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y)// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    String().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(String: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(i: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun size(args: Array<String>) {
    X().foo()
}
yA// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2({ Obj(it.obj.toString() + "1") }) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yp// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : A {
        override fun foo(): String {
            return "fail"
        }
    }
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> T): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    a().foo()
}
y#// KJS_WITH_FULL_RUNTIME
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Int<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : A {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(i: Int) {
    X().foo()
}
y2// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open class B : A<String>("Fail")

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    foo().foo()
}
y"p// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    class A {
    fun Int.foo(a: Int = 1,
                b: Int = 2,
                c: Int = 3,
                d: Int = 4,
                e: Int = 5,
                f: Int = 6,
                g: Int = 7,
                h: Int = 8,
                i: Int = 9,
                j: Int = 10,
                k: Int = 11,
                l: Int = 12,
                m: Int = 13,
                n: Int = 14,
                o: Int = 15,
                p: Int = 16,
                q: Int = 17,
                r: Int = 18,
                s: Int = 19,
                t: Int = 20,
                u: Int = 21,
                v: Int = 22,
                w: Int = 23,
                x: Int = 24,
                y: Int = 25,
                z: Int = 26,
                aa: Int = 27,
                bb: Int = 28,
                cc: Int = 29,
                dd: Int = 30,
                ee: Int = 31,
                ff: Int = 32): String {
        return "$a $b $c $d $e $f $g $h $i $j $k $l $m $n $o $p $q $r $s $t $u $v $w $x $y $z $aa $bb $cc $dd $ee $ff"
    }

    fun String.bar(a: Int = 1,
                   b: Int = 2,
                   c: Int = 3,
                   d: Int = 4,
                   e: Int = 5,
                   f: Int = 6,
                   g: Int = 7,
                   h: Int = 8,
                   i: Int = 9,
                   j: Int = 10,
                   k: Int = 11,
                   l: Int = 12,
                   m: Int = 13,
                   n: Int = 14,
                   o: Int = 15,
                   p: Int = 16,
                   q: Int = 17,
                   r: Int = 18,
                   s: Int = 19,
                   t: Int = 20,
                   u: Int = 21,
                   v: Int = 22,
                   w: Int = 23,
                   x: Int = 24,
                   y: Int = 25,
                   z: Int = 26,
                   aa: Int = 27,
                   bb: Int = 28,
                   cc: Int = 29,
                   dd: Int = 30,
                   ee: Int = 31,
                   ff: Int = 32,
                   gg: Int = 33,
                   hh: Int = 34,
                   ii: Int = 35,
                   jj: Int = 36,
                   kk: Int = 37,
                   ll: Int = 38,
                   mm: Int = 39,
                   nn: Int = 40): String {
        return "$a $b $c $d $e $f $g $h $i $j $k $l $m $n $o $p $q $r $s $t $u $v $w $x $y $z $aa $bb $cc $dd $ee $ff " +
                "$gg $hh $ii $jj $kk $ll $mm $nn"
    }

    fun Char.baz(a: Int = 1,
                 b: Int = 2,
                 c: Int = 3,
                 d: Int = 4,
                 e: Int = 5,
                 f: Int = 6,
                 g: Int = 7,
                 h: Int = 8,
                 i: Int = 9,
                 j: Int = 10,
                 k: Int = 11,
                 l: Int = 12,
                 m: Int = 13,
                 n: Int = 14,
                 o: Int = 15,
                 p: Int = 16,
                 q: Int = 17,
                 r: Int = 18,
                 s: Int = 19,
                 t: Int = 20,
                 u: Int = 21,
                 v: Int = 22,
                 w: Int = 23,
                 x: Int = 24,
                 y: Int = 25,
                 z: Int = 26,
                 aa: Int = 27,
                 bb: Int = 28,
                 cc: Int = 29,
                 dd: Int = 30,
                 ee: Int = 31,
                 ff: Int = 32,
                 gg: Int = 33,
                 hh: Int = 34,
                 ii: Int = 35,
                 jj: Int = 36,
                 kk: Int = 37,
                 ll: Int = 38,
                 mm: Int = 39,
                 nn: Int = 40,
                 oo: Int = 41,
                 pp: Int = 42,
                 qq: Int = 43,
                 rr: Int = 44,
                 ss: Int = 45,
                 tt: Int = 46,
                 uu: Int = 47,
                 vv: Int = 48,
                 ww: Int = 49,
                 xx: Int = 50,
                 yy: Int = 51,
                 zz: Int = 52,
                 aaa: Int = 53,
                 bbb: Int = 54,
                 ccc: Int = 55,
                 ddd: Int = 56,
                 eee: Int = 57,
                 fff: Int = 58,
                 ggg: Int = 59,
                 hhh: Int = 60,
                 iii: Int = 61,
                 jjj: Int = 62,
                 kkk: Int = 63,
                 lll: Int = 64,
                 mmm: Int = 65,
                 nnn: Int = 66,
                 ooo: Int = 67,
                 ppp: Int = 68,
                 qqq: Int = 69,
                 rrr: Int = 70): String {
        return "$a $b $c $d $e $f $g $h $i $j $k $l $m $n $o $p $q $r $s $t $u $v $w $x $y $z $aa $bb $cc $dd $ee $ff $gg $hh $ii $jj $kk " +
                "$ll $mm $nn $oo $pp $qq $rr $ss $tt $uu $vv $ww $xx $yy $zz $aaa $bbb $ccc $ddd $eee $fff $ggg $hhh $iii $jjj $kkk $lll " +
                "$mmm $nnn $ooo $ppp $qqq $rrr"
    }

    fun test(): String {
        val test1 = 1.foo(4, e = 8, f = 15, w = 16, aa = 23, ff = 42)
        val test2 = 1.foo()
        val test3 = 1.foo(32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, q = 16, r = 15, s = 14, t = 13,
                          u = 12, v = 11, w = 10, x = 9, y = 8, z = 7, aa = 6, bb = 5, cc = 4, dd = 3, ee = 2, ff = 1)
        if (test1 != "4 2 3 4 8 15 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 16 24 25 26 23 28 29 30 31 42") {
            return "test1 = $test1"
        }
        if (test2 != "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32") {
            return "test2 = $test2"
        }
        if (test3 != "32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1") {
            return "test3 = $test3"
        }

        val test4 = "".bar(54, 217, h = 236, l = 18, q = 3216, u = 8, aa = 22, ff = 33, jj = 44, mm = 55)
        val test5 = "".bar()
        val test6 = "".bar(40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, u = 20, v = 19,
                           w = 18, x = 17, y = 16, z = 15, aa = 14, bb = 13, cc = 12, dd = 11, ee = 10, ff = 9, gg = 8, hh = 7, ii = 6,
                           jj = 5, kk = 4, ll = 3, mm = 2, nn = 1)
        if (test4 != "54 217 3 4 5 6 7 236 9 10 11 18 13 14 15 16 3216 18 19 20 8 22 23 24 25 26 22 28 29 30 31 33 33 34 35 44 37 38 55 40") {
            return "test4 = $test4"
        }
        if (test5 != "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40") {
            return "test5 = $test5"
        }
        if (test6 != "40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1") {
            return "test6 = $test6"
        }

        val test7 = 'a'.baz(5, f = 3, w = 1, aa = 71, nn = 2, qq = 15, ww = 97, aaa = 261258, iii = 3, nnn = 8, rrr = 7)
        val test8 = 'a'.baz()
        val test9 = 'a'.baz(70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41,
                            40, 39, 38, 37, 36, jj = 35, kk = 34, ll = 33, mm = 32, nn = 31, oo = 30, pp = 29, qq = 28, rr = 27, ss = 26, tt = 25,
                            uu = 24, vv = 23, ww = 22, xx = 21, yy = 20, zz = 19, aaa = 18, bbb = 17, ccc = 16, ddd = 15, eee = 14, fff = 13,
                            ggg = 12, hhh = 11, iii = 10, jjj = 9, kkk = 8, lll = 7, mmm = 6, nnn = 5, ooo = 4, ppp = 3, qqq = 2, rrr = 1)
        if (test7 != "5 2 3 4 5 3 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 1 24 25 26 71 28 29 30 31 32 33 34 35 36 37 38 39 2 41 42 15 " +
                "44 45 46 47 48 97 50 51 52 261258 54 55 56 57 58 59 60 3 62 63 64 65 8 67 68 69 7") {
            return "test7 = $test7"
        }
        if (test8 != "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 " +
                "43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70") {
            return "test8 = $test8"
        }
        if (test9 != "70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 " +
                "31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1") {
            return "test9 = $test9"
        }

        return "OK"
    }
}

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
        O.memExt = ""
    }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        s(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.String()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y(// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: (Int?) -> Int): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y5// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    Failure(Exception()).foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: c<String>) {
    X().foo()
}
y&// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: Any, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(C: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y)// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): String = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y>// Original bug: KT-10835
// Duplicated bug: KT-10835

fun box() = when {
        1 > 2 -> "false"
        1 >= 1 -> "OK"
        else -> "else"
    }

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = test.x

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = (a as B).foo()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y'// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, MyString: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(C: Array<String>) {
    X().foo()
}
y\// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object Foo {
    val bar: String

    init {
        bar = "OK"
    }
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y:// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(logged("k", 2.let { it })) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: N) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    var foo: String
        get() = result
        set(value) { result = value }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(C()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(box: Box<out Any?>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) { ok }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: UInt) {
    X().foo()
}
y È// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    public open fun method() : String  = "OK"
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    x().foo()
}
yT// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
        run {
            xl++
            xd += 1.0
            xi++
        }
    }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): a = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y/// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> KProperty<*>): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y%// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(MIN_VALUE: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
yi// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object Test {
    fun ok() = "OK"
    val x = run { Test.ok() }
    fun test() = x
}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, thisRef: Any?): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().add()
}
y$// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    X().foo()
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    fun foo() {
}
y$
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y
// Original bug: KT-10835
    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: , block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R) R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X() {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    ().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : () {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block)

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2: R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }


fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X()foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver:T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y) {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open innerclass Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, : T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}}
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo( {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun () {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }}
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: .() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R):  = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

classX {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.()  R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo) {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        (X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo(
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object :Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2 {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> ): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y ÿ// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun  with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y ı// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}


y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class 

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, ): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class  {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() 
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun<T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: <String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, > with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object :  {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.( -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    openinner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo(){
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X{
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
             : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

     foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.()-> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object  Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y(){}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) 
    X().foo()
}
y ˝// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) 
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun mainargs: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiverblock()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

funmain(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X)) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X.foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Yfun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args:Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ArrayString>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open  class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R  receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = 

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: ) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) 
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()

y ﬂ// Original bug: KT-10835
// Duplicated bug: KT-10835



class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y!// Original bug: KT-10835
// Duplicated bug: KT-10835

 <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() }
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() ->R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>){
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y ‚// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() 
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().
}
y ∏// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X 

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X(.foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R =receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
     class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

 X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block(

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: ): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun (args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) 
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() 
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X 
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R: R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner classY

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo)
}
y	// Original bug: KT-10835


fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T. -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = .block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T,block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner  Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()){
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y( {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T,R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block:T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String> {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R= receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R>with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X).foo()
}
y // Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
     inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y#// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R):R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}

fun main(args: Array<String>) {
    X().foo()
}
y"// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}
        }
    }
}fun main(args: Array<String>) {
    X().foo()
}
y// Original bug: KT-10835
// Duplicated bug: KT-10835

fun <T, R> with2(receiver: T, block: T.() -> R): R = receiver.block()

class X {
    open inner class Y

    fun foo() {
        with2(X()) {
            object : Y() {}

    }
}

fun main(args: Array<String>) {
    X().foo()
}
ˇˇ